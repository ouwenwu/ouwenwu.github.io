<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo常见命令</title>
    <url>/2025/07/27/hexo%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="一、创建文档"><a href="#一、创建文档" class="headerlink" title="一、创建文档"></a>一、创建文档</h1><h2 id="1-创建到-post默认的文件夹中"><a href="#1-创建到-post默认的文件夹中" class="headerlink" title="1.创建到_post默认的文件夹中"></a>1.创建到_post默认的文件夹中</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new name</span><br></pre></td></tr></table></figure>
<h2 id="2-创建到-post下的指定子文件夹中"><a href="#2-创建到-post下的指定子文件夹中" class="headerlink" title="2.创建到_post下的指定子文件夹中"></a>2.创建到_post下的指定子文件夹中</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;title&quot; --path=latex/name.md</span><br></pre></td></tr></table></figure>
<h1 id="二、部署到github"><a href="#二、部署到github" class="headerlink" title="二、部署到github"></a>二、部署到github</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>hexo写博客的常见命令</tag>
      </tags>
  </entry>
  <entry>
    <title>ar-app使用教程</title>
    <url>/2023/09/11/ar-app%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="ar-app使用教程"><a href="#ar-app使用教程" class="headerlink" title="ar-app使用教程"></a>ar-app使用教程</h1><p><strong><em>ar_app文件夹：</em></strong></p>
<p><img src="/2023/09/11/ar-app%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230911090458858-16944013591941.png" alt="image-20230911090458858"></p>
<p><strong><em>数据与输出文件夹：</em></strong>建议按以下路径放置，可以更改</p>
<p><img src="/2023/09/11/ar-app%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230911090809952-16944013762242.png" alt="image-20230911090809952"></p>
<h2 id="ar-app使用"><a href="#ar-app使用" class="headerlink" title="ar_app使用"></a>ar_app使用</h2><p><img src="/2023/09/11/ar-app%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230911095706333-16944013919213.png" alt="image-20230911095706333"></p>
<p>其中：</p>
<h3 id="—input-path：输入路径"><a href="#—input-path：输入路径" class="headerlink" title="—input_path：输入路径"></a>—input_path：输入路径</h3><p><strong><em>路径下有两个文件夹：</em></strong></p>
<ul>
<li>mapping：构建库的图片（不可动）</li>
<li>query：存储定位图片的临时文件夹（需要定期删除里面的图片）</li>
</ul>
<p><img src="/2023/09/11/ar-app%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230911103431355-16944014043194.png" alt="image-20230911103431355"></p>
<h3 id="—output-path：输出路径"><a href="#—output-path：输出路径" class="headerlink" title="—output_path：输出路径"></a>—output_path：输出路径</h3><p><strong><em>里面有若干定位所需要的文件，不可更改</em></strong></p>
<p><img src="/2023/09/11/ar-app%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230911103637786-16944014159535.png" alt="image-20230911103637786"></p>
<h3 id="—host：本机IP"><a href="#—host：本机IP" class="headerlink" title="—host：本机IP"></a>—host：本机IP</h3><p><strong><em>本机电脑IP地址，服务发布的位置</em></strong></p>
<h3 id="—port：服务运行的IP"><a href="#—port：服务运行的IP" class="headerlink" title="—port：服务运行的IP"></a>—port：服务运行的IP</h3><h3 id="—number-retrieval：定位前图片检索的张数"><a href="#—number-retrieval：定位前图片检索的张数" class="headerlink" title="—number_retrieval：定位前图片检索的张数"></a>—number_retrieval：定位前图片检索的张数</h3><p>数量可以设置为100，可以根据定位效果调整，这个对定位效率影响较小</p>
<h3 id="—init-match-num：初始化图片用于定位需要的图片数目"><a href="#—init-match-num：初始化图片用于定位需要的图片数目" class="headerlink" title="—init_match_num：初始化图片用于定位需要的图片数目"></a>—init_match_num：初始化图片用于定位需要的图片数目</h3><p>这个对初始化定位速率影响较大，数量越多，定位精度越高，但定位效率越低</p>
<h3 id="—navigation-match-num：导航过程中用于定位的图片数目"><a href="#—navigation-match-num：导航过程中用于定位的图片数目" class="headerlink" title="—navigation_match_num：导航过程中用于定位的图片数目"></a>—navigation_match_num：导航过程中用于定位的图片数目</h3><p>这个对导航定位数量影响较大，如上所述，可以根据精度和定位效率要求进行更改，默认为10</p>
<h1 id="发起请求与返回"><a href="#发起请求与返回" class="headerlink" title="发起请求与返回"></a>发起请求与返回</h1><ul>
<li><strong><em>请求地址：</em></strong><a href="http://host:ip/upLoadImg_api">http://host:ip/upLoadImg_api</a></li>
<li><strong><em>使用方法如下所示：</em></strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> wx.<span class="title function_">uploadFile</span>(&#123;</span><br><span class="line">     <span class="attr">filePath</span>: res.<span class="property">tempFilePath</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://10.104.31.14:5001/upLoadImg_api&#x27;</span>,</span><br><span class="line">     <span class="attr">success</span>:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">         <span class="keyword">let</span> x_y_data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res.<span class="property">data</span>)</span><br><span class="line">         <span class="keyword">if</span>(x_y_data.<span class="property">status</span> === <span class="string">&quot;floor&quot;</span>)&#123;</span><br><span class="line">         wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">             <span class="attr">title</span>: <span class="string">&#x27;行走楼梯中&#x27;</span>,</span><br><span class="line">             <span class="attr">mask</span>: <span class="title class_">True</span></span><br><span class="line">         &#125;)</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="variable language_">this</span>.<span class="title function_">addPointToMap</span>(x_y_data.<span class="property">x</span>, x_y_data.<span class="property">y</span>,<span class="string">&quot;image&quot;</span>)</span><br><span class="line">             wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">is_end</span> === <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">upLoadImage</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://192.168.20.146:5001/upLoadImg_api&quot;</span></span><br><span class="line">src_dir = <span class="string">&quot;cz_1&quot;</span></span><br><span class="line">images = os.listdir(src_dir)</span><br><span class="line">images = <span class="built_in">sorted</span>(images, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">    file = os.path.join(src_dir, image)</span><br><span class="line">    files = &#123;<span class="string">&#x27;image&#x27;</span>: <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    r = requests.post(url=url, files=files)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(end_time-start_time, r.content)</span><br></pre></td></tr></table></figure>
<h1 id="返回值："><a href="#返回值：" class="headerlink" title="返回值："></a>返回值：</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">	x<span class="punctuation">:</span>x坐标<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">	y<span class="punctuation">:</span>坐标<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">	status<span class="punctuation">:</span><span class="string">&quot;floor&quot;</span>时表示定位失误</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ar导航定位</tag>
      </tags>
  </entry>
  <entry>
    <title>常见error</title>
    <url>/2023/07/31/%E5%B8%B8%E8%A7%81error/</url>
    <content><![CDATA[<h1 id="python中常见错误"><a href="#python中常见错误" class="headerlink" title="python中常见错误"></a>python中常见错误</h1><h2 id="opencv相关"><a href="#opencv相关" class="headerlink" title="opencv相关"></a>opencv相关</h2><h3 id="最基础的imread、imwrite都不能使用"><a href="#最基础的imread、imwrite都不能使用" class="headerlink" title="最基础的imread、imwrite都不能使用"></a>最基础的imread、imwrite都不能使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cv2.error: OpenCV(4.2.0) C:\projects\opencv-python\opencv\modules\highgui\src\window.cpp:651: error: (-2:Unspecified error) The <span class="keyword">function</span> is not implemented.</span><br></pre></td></tr></table></figure>
<p><strong><em>解决办法：</em></strong>降低python版本为3.7</p>
]]></content>
      <tags>
        <tag>常见的错误</tag>
      </tags>
  </entry>
  <entry>
    <title>M300搭载高光谱仪使用教程</title>
    <url>/2023/10/30/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/M300%E6%90%AD%E8%BD%BD%E9%AB%98%E5%85%89%E8%B0%B1%E4%BB%AA%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="仪器安装"><a href="#仪器安装" class="headerlink" title="仪器安装"></a>仪器安装</h1><p>无人机安装+RTK安装</p>
<h1 id="航线规划"><a href="#航线规划" class="headerlink" title="航线规划"></a>航线规划</h1><p>按照公司给的文件计算飞速等设置（要求其中一条航线包含灰布）</p>
<h1 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h1><p>自动曝光+白帧+黑帧</p>
<p><strong><em>自动曝光：</em></strong>将飞机抬起来对着灰布，要求迎着太阳，摄像头拍的灰布区域不会被影子挡住，点击自动曝光</p>
<p><strong><em>白帧：</em></strong>将飞机抬起来对着灰布，要求迎着太阳，摄像头拍的灰布区域不会被影子挡住，点击白帧</p>
<p><strong><em>黑帧：</em></strong>将飞机放在地面上，盖着镜头盖，点击黑帧</p>
<h1 id="飞行"><a href="#飞行" class="headerlink" title="飞行"></a>飞行</h1><p>起飞+绕8字+按航线飞行+(过灰布)</p>
<p>如果航线不过灰布的话需要手动飞一条航线过灰布</p>
]]></content>
      <categories>
        <category>仪器</category>
      </categories>
      <tags>
        <tag>高光谱仪</tag>
      </tags>
  </entry>
  <entry>
    <title>ContextCapture使用及集群</title>
    <url>/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="一、本地使用"><a href="#一、本地使用" class="headerlink" title="一、本地使用"></a>一、本地使用</h1><h2 id="1-一般使用"><a href="#1-一般使用" class="headerlink" title="1.一般使用"></a>1.一般使用</h2><p><strong><em>新建项目：</em></strong></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907161016140.png" alt="image-20230907161016140"></p>
<p><strong><em>引擎设置：</em></strong>确保项目的jobs路径和引擎监听的jobs路径相同</p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907162128310.png" alt="image-20230907162128310"></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907162234601.png" alt="image-20230907162234601"></p>
<p><strong><em>导入图片：</em></strong></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907161046985.png" alt="image-20230907161046985"></p>
<p><strong><em>空三：</em></strong>block名上右键</p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907162010342.png" alt="image-20230907162010342"></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907164531702.png" alt="image-20230907164531702"></p>
<p><strong><em>重建：</em></strong>空三后的block上右键</p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907164632789.png" alt="image-20230907164632789"></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907164809754.png" alt="image-20230907164809754"></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907164831639.png" alt="image-20230907164831639"></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907164924132.png" alt="image-20230907164924132"></p>
<h2 id="2-导入其他软件的空三结果"><a href="#2-导入其他软件的空三结果" class="headerlink" title="2.导入其他软件的空三结果"></a>2.导入其他软件的空三结果</h2><p><strong><em>注意导入的xml文件中图片的路径要和导入图片的路径一样，也就是需要更改一下这个路径，在3D view里去看一下是否图片可以找到</em></strong></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907170005855.png" alt="image-20230907170005855"></p>
<h1 id="二、集群使用"><a href="#二、集群使用" class="headerlink" title="二、集群使用"></a>二、集群使用</h1><p><strong><em>集群三个部分：</em></strong>Master机器+文件存储机器+工作机器（引擎）</p>
<h2 id="1-集群项目的建立"><a href="#1-集群项目的建立" class="headerlink" title="1.集群项目的建立"></a>1.集群项目的建立</h2><p><strong><em>项目路径要为网络路径</em></strong></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907171142785.png" alt="image-20230907171142785"></p>
<p><strong><em>引擎设置：</em></strong></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907171421385.png" alt="image-20230907171421385"></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907171459799.png" alt="image-20230907171459799"></p>
<p><strong><em>其余和非集群类似</em></strong></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907171558691.png" alt="image-20230907171558691"></p>
<h2 id="2-特殊处理方法（特殊问题）"><a href="#2-特殊处理方法（特殊问题）" class="headerlink" title="2.特殊处理方法（特殊问题）"></a>2.特殊处理方法（特殊问题）</h2><h3 id="2-1-带宽限制"><a href="#2-1-带宽限制" class="headerlink" title="2.1.带宽限制"></a>2.1.带宽限制</h3><p><strong><em>集群所有的机器都会在文件存储机器上面读写，因此有一定的带宽限制，开的集群机器数目不能太多，可以适当超过带宽限制一点点</em></strong></p>
<p><img src="/2023/09/07/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/ContextCapture%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/image-20230907172028754.png" alt="image-20230907172028754"></p>
<h2 id="2-2-项目太大，导致提交项目后有一定的问题"><a href="#2-2-项目太大，导致提交项目后有一定的问题" class="headerlink" title="2.2.项目太大，导致提交项目后有一定的问题"></a>2.2.项目太大，导致提交项目后有一定的问题</h2><p>分tiles提交，一次只提交一部分tiles</p>
]]></content>
      <categories>
        <category>三维建模</category>
      </categories>
      <tags>
        <tag>ContextCapture</tag>
      </tags>
  </entry>
  <entry>
    <title>参考文献迁移</title>
    <url>/2025/07/27/latex/%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>当你不想在新文件夹里再跑一次 BibTeX，只想把已经“编译好”的参考文献带过去(适用于保持回复信中的参考文献顺序和文章中的一致)，你至少要拷以下几个文件：</p>
<ol>
<li>.bbl  这是 BibTeX 运行后生成的含所有条目的正文文件，LaTeX 在第二轮编译时会直接把它当作 <code>.tex</code> 插入。</li>
<li>.bst 这是你用来格式化参考文献的样式文件，如果目标工程里还没有，就要一并拷过去。</li>
<li>.bib 如果目标工程以后还要对条目做增删改，或者要重新跑 BibTeX，就也把原始的 <code>.bib</code> 带上。</li>
<li>.aux 只有当你要完全复刻交叉引用编号或者要保证引用顺序完全一致时才需要，一般不必。</li>
</ol>
]]></content>
      <categories>
        <category>latex</category>
      </categories>
      <tags>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>PhotoScan三维重建及坐标转换</title>
    <url>/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="对齐图片（投影后）"><a href="#对齐图片（投影后）" class="headerlink" title="对齐图片（投影后）"></a>对齐图片（投影后）</h1><h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><p><img src="/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/image-20230416114600655.png" alt="image-20230416114600655"></p>
<p><strong><em>全景图片一张可以投影为若干张普通图片，在PhotoScan中可以将一张全景图片所投影出的图片设置为一个组，对其加以约束，会使得图片对齐效果更好</em></strong></p>
<h2 id="图片分组"><a href="#图片分组" class="headerlink" title="图片分组"></a>图片分组</h2><ul>
<li><strong>首先选中一组图片，将其添加到一个图片组中</strong></li>
</ul>
<p><img src="/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/image-20230416115019165.png" alt="image-20230416115019165"></p>
<p><img src="/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/image-20230416115131493.png" alt="image-20230416115131493"></p>
<ul>
<li><strong>保存后项目文件夹下会有一下红线圈出的内容</strong></li>
</ul>
<p><img src="/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/image-20230416115256851.png" alt="image-20230416115256851"></p>
<p>进入对应的chunk文件夹下</p>
<p><img src="/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/image-20230416115349659.png" alt="image-20230416115349659"></p>
<ul>
<li><strong>解压chunk.zip得到doc.xml文件</strong></li>
</ul>
<p>doc.xml内容如图所示，其中包含了我们预设的group，我们只需要将其他camera也组织成group格式就可以分组成功</p>
<p><img src="/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/image-20230416120430188.png" alt="image-20230416120430188"></p>
<ul>
<li><strong>现将剩余的camera组织为group格式，并输出到txt中，将txt中的结果复制到doc.xml中替换原来的内容</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">photoScanNewChunk</span>():</span><br><span class="line">    trunk_xml_path = <span class="string">&quot;D:/anbo_my/test.files/0/doc.xml&quot;</span></span><br><span class="line">    new_trunk_xml_path = <span class="string">&quot;D:/anbo_my/test.files/0/group.txt&quot;</span></span><br><span class="line">    tree = ET.parse(trunk_xml_path)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    cameras_s = root.findall(<span class="string">&quot;cameras&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> cameras <span class="keyword">in</span> cameras_s:</span><br><span class="line">        camera_s = cameras.findall(<span class="string">&quot;camera&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(new_trunk_xml_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(camera_s)/<span class="number">6</span>)):</span><br><span class="line">                f.write(<span class="string">&#x27;    &lt;group id=&quot;&#x27;</span> + <span class="built_in">str</span>(i+<span class="number">1</span>) + <span class="string">&#x27;&quot; label=&quot;Group &#x27;</span> + <span class="built_in">str</span>(i + <span class="number">2</span>) + <span class="string">&#x27;&quot; type=&quot;station&quot;&gt;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="comment"># 这里的6是每一组的图像数目</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">                    camera = camera_s[i*<span class="number">6</span>+j]</span><br><span class="line">                    f.write(<span class="string">&#x27;      &lt;camera id=&quot;&#x27;</span> + <span class="built_in">str</span>(camera.attrib.get(<span class="string">&quot;id&quot;</span>))+<span class="string">&#x27;&quot; sensor_id=&quot;0&quot; label=&quot;&#x27;</span>+camera.attrib.get(<span class="string">&quot;label&quot;</span>)+<span class="string">&#x27;&quot;/&gt;&#x27;</span>+ <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                f.write(<span class="string">&#x27;    &lt;/group&gt;&#x27;</span>+ <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>注意更改id、label和type的值</p>
<p><img src="/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/image-20230416120313547.png" alt="image-20230416120313547"></p>
<ul>
<li><strong>重新打开项目文件</strong></li>
</ul>
<p><img src="/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/image-20230416120711094.png" alt="image-20230416120711094"></p>
<h2 id="对齐图片"><a href="#对齐图片" class="headerlink" title="对齐图片"></a>对齐图片</h2><p>Workflow→Align Photos</p>
<p><strong>根据需求更改精度之类的东西</strong></p>
<p><img src="/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/image-20230416121056281.png" alt="image-20230416121056281"></p>
<p>如果对齐成功，就会像下面一样只有一个component，而如果对齐失败就会出现多个component这时就需要其他方法去改进优化</p>
<p><img src="/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/image-20230416121220687.png" alt="image-20230416121220687"></p>
<h1 id="对齐图片（全景图片直接处理）"><a href="#对齐图片（全景图片直接处理）" class="headerlink" title="对齐图片（全景图片直接处理）"></a>对齐图片（全景图片直接处理）</h1><ul>
<li><p><strong>除了按上述将投影后的图片进行对齐及后续处理，还可以直接使用全景图片进行操作</strong></p>
<ul>
<li><p>全景图片数量更少（一张全景图片会投影为若干张普通图片），因此处理速率更快</p>
</li>
<li><p>出现多个component的概率更小</p>
</li>
<li><p>但可能也会出现其他问题</p>
</li>
</ul>
</li>
<li><p><strong>由于是全景图片，因此不存在分group的情况，当然也可以将比较靠近的若干图片分为一组</strong></p>
</li>
<li><strong>注意导入图片后要有一个步骤告诉软件我们正在使用全景图片</strong><ul>
<li>Tools→Camera Calibration</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/15/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/PhotoScan%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%8F%8A%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/image-20230416121932890.png" alt="image-20230416121932890"></p>
<ul>
<li><strong>其余步骤与之前相似，得到align后的结果</strong></li>
</ul>
]]></content>
      <categories>
        <category>室内定位</category>
      </categories>
      <tags>
        <tag>Photoscan/Metashape</tag>
      </tags>
  </entry>
  <entry>
    <title>空地融合空三</title>
    <url>/2025/07/31/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%A9%BA%E5%9C%B0%E8%9E%8D%E5%90%88%E7%A9%BA%E4%B8%89/</url>
    <content><![CDATA[<h1 id="一、数据准备"><a href="#一、数据准备" class="headerlink" title="一、数据准备"></a>一、数据准备</h1><p>无人机数据</p>
<p> <img src="/2025/07/31/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%A9%BA%E5%9C%B0%E8%9E%8D%E5%90%88%E7%A9%BA%E4%B8%89/无人机数据图片.png" alt="无人机数据图片"></p>
<p>手持扫码仪数据</p>
<p><img src="/2025/07/31/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%A9%BA%E5%9C%B0%E8%9E%8D%E5%90%88%E7%A9%BA%E4%B8%89/手持扫描仪数据.png" alt="手持扫描仪数据"></p>
<h1 id="二、无人机数据处理"><a href="#二、无人机数据处理" class="headerlink" title="二、无人机数据处理"></a>二、无人机数据处理</h1>]]></content>
      <tags>
        <tag>三维重建</tag>
        <tag>空地融合</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/CSS/</url>
    <content><![CDATA[<h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><ul>
<li>内联样式（元素的style属性中）</li>
<li>内部样式表（HTML的style元素中）</li>
<li>外部样式表（.css文件中，通过link元素导入）</li>
</ul>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p><strong><em>text-decoration：</em></strong>none(无装饰线)、underline(下划线)、overline(上划线)、through(中划线/删除线)</p>
<p><strong><em>text-transform：</em></strong>capitaliza(每个单词首字母大写)、uppercase(每个单词字符变为大写)、lowercase(每个单词字符变小写)、none(没有影响)</p>
<p><strong><em>text-indent：</em></strong>（em/px）第一行内容的缩进——em是当前文字的大小，2em就是两个文字</p>
<p><strong><em>text-align：</em></strong>left(左对齐)、right(右对齐)、center(居中对齐)、justify(两端对齐)</p>
<ul>
<li>行内级元素的对齐方式</li>
<li>display:inline与width、height不能同时设置，行内级元素没有宽高（高度为line-height）</li>
</ul>
<p><strong><em>letter-spacing/word-spacing：</em></strong>分别设置字母、单词之间的间距（默认是0，可以为负数）</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong><em>font-size：</em></strong>字体大小</p>
<ul>
<li>具体数值加单位：100px、1em（em是父元素计算后的font-size）</li>
<li>百分比：基于父元素font-size计算</li>
</ul>
<p><strong><em>font-family：</em></strong>字体名称（一般设置一个，继承下去）</p>
<p><strong><em>font-wight：</em></strong>加粗 100|200|300|400|500|600|700|800|900   normal是400   bold是700</p>
<p><strong><em>font-style：</em></strong>斜体 normal(常规显示)、italic(用字体的斜体显示)、oblique(文本倾斜显示)</p>
<p><strong><em>font-variant：</em></strong>normal(常规显示)、small-caps(小写字母替换为缩小后的大写字母)</p>
<p><strong><em>line-height☆：</em></strong></p>
<ul>
<li>一行文字所占的高度</li>
<li>两行文字基线之间的间距</li>
<li><p>基线：与小写字母x最底部对齐的线</p>
</li>
<li><p>line-height实现文字垂直居中：line-height=height</p>
</li>
</ul>
<p><strong><em>display：</em></strong>block、inline（不可以随意设置宽高）、inline-block、flex</p>
<p>元素隐藏方法：</p>
<ul>
<li><strong>display:none</strong>；   元素不显示出来，不占据空间（和不存在一样）</li>
<li><strong>visivility:hidden;</strong>   元素不可见，但占据空间</li>
<li><strong>rgba设置a为0</strong>   设置alpha值，透明度，不会影响子元素</li>
<li><strong>opacity设置为0</strong>   会影响所有的子元素</li>
</ul>
<p>注：raba和opacity设置时，文字根据opacity显示</p>
<h2 id="常见选择器"><a href="#常见选择器" class="headerlink" title="常见选择器"></a>常见选择器</h2><ul>
<li>!important：10000</li>
<li>内联样式：1000</li>
<li>id选择器：100</li>
<li>类选择器、属性选择器、伪类：10</li>
<li>元素选择器、伪元素：1</li>
<li>通配符：0</li>
</ul>
<p>可以简单认为：选择器查询到的结果越多，权重越低</p>
<h3 id="css设置不生效："><a href="#css设置不生效：" class="headerlink" title="css设置不生效："></a>css设置不生效：</h3><ul>
<li>选择器优先级太低</li>
<li>选择器没选中对应的元素</li>
<li>css使用形式不对（例如行内级元素的宽高、被同类型css属性覆盖）</li>
</ul>
<h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p><strong><em>宽高：</em></strong>width/height、min-height/max-height、max-width/min-height(移动端适配)</p>
<p><strong><em>padding：</em></strong>padding-top、padding-right、padding-bottom、padding-left</p>
<ul>
<li>10px 20px 30px 40px  分别对应：top、right、bottom、left</li>
<li>10px 20px 30px   缺少left，left使用right的值</li>
<li>10px 20px  缺少bottom、left分别使用top、right的值</li>
<li>10px  其余值都用这个值</li>
</ul>
<p><strong><em>border：</em></strong></p>
<ul>
<li>border-top-width、border-right-width、border-bottom-width、border-left-width</li>
<li>border-top-color、border-right-color、border-bottom-color、border-left-color</li>
<li>border-top-style、border-right-style、border-bottom-style、border-left-style</li>
<li>border-top、border-right、border-bottom、border-left</li>
<li>border-radius</li>
</ul>
<p>注：同样可以用border属性来进行缩写</p>
<p><strong><em>out-line:</em></strong></p>
<p>外轮廓不占用空间、border占用空间，外轮廓默认显示在border的外面</p>
<ul>
<li>outline-width: 外轮廓的宽度 </li>
<li>outline-style：取值跟border的样式一样，比如solid、dotted等 </li>
<li>outline-color: 外轮廓的颜色 </li>
<li>outline：outline-width、outline-style、outline-color的简写属性，跟border用法类似</li>
</ul>
<p><strong>作用：</strong>去除a元素，input元素的focus轮廓效果</p>
<p><strong><em>margin：</em></strong>与padding值的设置类似</p>
<h2 id="margin的上下传递（左右不传递）——父子元素"><a href="#margin的上下传递（左右不传递）——父子元素" class="headerlink" title="margin的上下传递（左右不传递）——父子元素"></a>margin的上下传递（左右不传递）——父子元素</h2><h3 id="margin-top传递"><a href="#margin-top传递" class="headerlink" title="margin-top传递"></a>margin-top传递</h3><p><strong><em>html代码：</em></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>哈哈哈哈<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong><em>样式设置：</em></strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果块级元素的顶部线和父元素的顶部线重叠，那么这个块级元素的margin-top值会传递给父元素</li>
</ul>
<p><img src="/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/CSS/image-20230325163555417.png" alt="image-20230325163555417"></p>
<p>如果没有折叠，应该是块级元素与父元素组件有间隔，但实际上margin-top值传递给了父元素</p>
<h3 id="margin-bottom传递"><a href="#margin-bottom传递" class="headerlink" title="margin-bottom传递"></a>margin-bottom传递</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果块级元素的底部线和父元素的底部线重写，并且父元素的高度是auto，那么这个块级元素的margin-bottom值会传递给父元素</li>
</ul>
<p><img src="/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/CSS/image-20230325163706773.png" alt="image-20230325163706773"></p>
<p>如果没有折叠，应该是块级元素与父元素组件有间隔，但实际上margin-bottom值传递给了父元素</p>
<h3 id="防止margin传递"><a href="#防止margin传递" class="headerlink" title="防止margin传递"></a>防止margin传递</h3><ul>
<li>给父元素设置padding-top\padding-bottom （必须额外添加padding）</li>
<li>给父元素设置border   （有时候boder影响样式，设置boder透明依然会占据空间）</li>
<li>触发BFC: 设置overflow为auto</li>
</ul>
<h2 id="margin的上下折叠——兄弟父子都有"><a href="#margin的上下折叠——兄弟父子都有" class="headerlink" title="margin的上下折叠——兄弟父子都有"></a>margin的上下折叠——兄弟父子都有</h2><ul>
<li>垂直方向上相邻的2个margin（margin-top、margin-bottom）有可能会合并为1个margin，这种现象叫做collapse（折叠）</li>
<li>水平方向上的margin（margin-left、margin-right）永远不会collapse</li>
<li>折叠后最终值的计算规则：  两个值进行比较，取较大的值</li>
<li>防止上下折叠：只设置其中一个元素的margin</li>
</ul>
<p><img src="/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/CSS/image-20230325164329528.png" alt="image-20230325164329528"></p>
<h1 id="元素水平居中方案"><a href="#元素水平居中方案" class="headerlink" title="元素水平居中方案"></a>元素水平居中方案</h1><p><strong><em>父元素一般为块级元素、inline-block：</em></strong></p>
<ul>
<li>行内级元素：text-align:center</li>
<li>块级元素：margin:0 auto</li>
</ul>
<h1 id="元素的宽度公式："><a href="#元素的宽度公式：" class="headerlink" title="元素的宽度公式："></a>元素的宽度公式：</h1><p>元素实际占用宽度 = border + padding + width</p>
<p>元素实际占用高度 = border + padding + height</p>
<h2 id="普通块级元素"><a href="#普通块级元素" class="headerlink" title="普通块级元素"></a>普通块级元素</h2><ul>
<li><p>父元素宽度 = 子元素宽度+margin-left+margin-right</p>
</li>
<li><p>父元素高度 = 子元素高度+margin-top+margin-bottom</p>
</li>
</ul>
<h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><ul>
<li>父元素宽高知道、margin-left，margin-right设置为0，则子元素宽度auto为赋值为父元素宽度——高度不适用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.context</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;context&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/CSS/image-20230420200031708.png" alt="image-20230420200031708"></p>
<ul>
<li><p>父元素宽高知道，子元素宽度知道，margin-left，margin-right设置为auto会自动对半分，则可以水平居中——只针对block生效</p>
</li>
<li><p>少在高度上使用这个公式，因为浏览器对margin-top，margin-bottom的处理有些特殊</p>
</li>
</ul>
<h2 id="绝对定位元素（absolute-fixed）"><a href="#绝对定位元素（absolute-fixed）" class="headerlink" title="绝对定位元素（absolute/fixed）"></a>绝对定位元素（absolute/fixed）</h2><ul>
<li><p>定位参照对象的宽度 = left + right + margin-left + margin-right + 绝对定位元素的实际占用宽度</p>
</li>
<li><p>定位参照对象的高度 = top + bottom + margin-top + margin-bottom + 绝对定位元素的实际占用高度</p>
</li>
</ul>
<h3 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h3><ul>
<li>父元素宽高知道，子元素宽度知道，left 、right 、 margin-left 、 margin-right均设置为0，则子元素高度auto为赋值为父元素宽度——宽度同样使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.context</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;context&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/CSS/image-20230420201531432.png" alt="image-20230420201531432"></p>
<ul>
<li>父元素宽高知道，子元素宽高知道，left、right设置为0，margin-left，margin-right设置为auto会自动对半分——高度同样适用</li>
</ul>
<h1 id="CSS中元素的定位"><a href="#CSS中元素的定位" class="headerlink" title="CSS中元素的定位"></a>CSS中元素的定位</h1><p><strong><em>标准流：</em></strong>默认情况下，元素都是按照normal flow（标准流、常规流、正常流、文档流【document flow】）进行排布</p>
<ul>
<li>从左到右、从上到下按顺序摆放好</li>
<li>默认情况下，互相之间不存在层叠现象</li>
<li>标准流可以用margin-padding进行位置的调整<ul>
<li>设置一个元素的margin或者padding，通常会影响到标准流中其他元素的定位效果</li>
<li>不便于实现元素层叠的效果</li>
</ul>
</li>
</ul>
<h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><h3 id="默认值（static）："><a href="#默认值（static）：" class="headerlink" title="默认值（static）："></a>默认值（static）：</h3><ul>
<li>元素按照normal flow布局</li>
<li>left 、right、top、bottom没有任何作用</li>
</ul>
<h2 id="相对定位（relative）"><a href="#相对定位（relative）" class="headerlink" title="相对定位（relative）"></a>相对定位（relative）</h2><ul>
<li>元素按照normal flow布局</li>
<li>可以通过left、right、top、bottom进行定位<ul>
<li>定位参照对象是元素自己原来的位置</li>
</ul>
</li>
<li>left、right、top、bottom用来设置元素的具体位置，对元素的作用如下图所示</li>
<li><strong><em>应用场景：</em></strong>在不影响其他元素位置的前提下，对当前元素位置进行微调</li>
</ul>
<h2 id="固定定位（fixed）"><a href="#固定定位（fixed）" class="headerlink" title="固定定位（fixed）"></a>固定定位（fixed）</h2><ul>
<li>元素脱离normal flow（脱离标准流、脱标）</li>
<li>可以通过left、right、top、bottom进行定位</li>
<li>定位参照对象是视口（viewport）</li>
<li>当画布滚动时，固定不动</li>
</ul>
<h2 id="绝对定位（absolute）："><a href="#绝对定位（absolute）：" class="headerlink" title="绝对定位（absolute）："></a>绝对定位（absolute）：</h2><ul>
<li>元素脱离normal flow（脱离标准流、脱标）——脱标前的元素不变，脱标元素会放在之前的元素后面，但是后面的元素会当脱标元素不存在（不更改top等的值）</li>
<li>可以通过left、right、top、bottom进行定位<ul>
<li>定位参照对象是最邻近的定位祖先元素</li>
<li>如果找不到这样的祖先元素，参照对象是视口</li>
</ul>
</li>
<li>定位元素（positioned element）<ul>
<li>position值不为static的元素</li>
<li>也就是position值为relative、absolute、fixed的元素</li>
</ul>
</li>
</ul>
<h3 id="position为absolute-fixed元素的特点（绝对定位元素）"><a href="#position为absolute-fixed元素的特点（绝对定位元素）" class="headerlink" title="position为absolute/fixed元素的特点（绝对定位元素）"></a>position为absolute/fixed元素的特点（绝对定位元素）</h3><ul>
<li><p>可以随意设置宽高——position为relative的不能</p>
</li>
<li><p>宽高默认由内容决定</p>
</li>
<li><p>不再受标准流的约束 </p>
<ul>
<li><p>不再严格按照从上到下、从左到右排布 </p>
</li>
<li><p>不再严格区分块级(block)、行内级(inline)，行内块级(inline-block)的很多特性都会消失——同样position为relative的不能</p>
</li>
</ul>
</li>
<li><p>不再给父元素汇报宽高数据——不会撑起父元素，如下面代码的div高度会为空</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>脱标元素内部默认还是按照标准流布局</li>
</ul>
<h2 id="粘性定位（sticky）"><a href="#粘性定位（sticky）" class="headerlink" title="粘性定位（sticky）"></a>粘性定位（sticky）</h2><ul>
<li>可以看做是相对定位和固定(绝对)定位的结合体</li>
<li>它允许被定位的元素表现得像相对定位一样，直到它滚动到某个阈值点</li>
<li>它允许被定位的元素表现得像相对定位一样，直到它滚动到某个阈值点</li>
<li>sticky是相对于最近的滚动祖先包含滚动视口的(</li>
</ul>
<h1 id="浮动float"><a href="#浮动float" class="headerlink" title="浮动float"></a>浮动float</h1><p><strong><em>以前多列布局的常用方案</em></strong></p>
<ul>
<li>脱离标准流</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript属性对象增强</title>
    <url>/2023/03/26/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/JavaScript%E5%B1%9E%E6%80%A7%E5%AF%B9%E8%B1%A1%E5%A2%9E%E5%BC%BA/</url>
    <content><![CDATA[<h1 id="对象属性操作的控制"><a href="#对象属性操作的控制" class="headerlink" title="对象属性操作的控制"></a>对象属性操作的控制</h1><ul>
<li><strong>Object.defineProperty</strong>可以对对象的属性加以限制，例如不能通过delete删除，不能通过for-in/Object.keys遍历</li>
<li><strong>Object.defineProperty</strong>方法会直接在一个对象上定义一个新的属性，或者修改一个对象的现有属性，并返回该对象</li>
</ul>
<p><strong><em>Object.defineProperty参数：</em></strong>Object.defineProperty(obj, prop, descriptor)</p>
<ul>
<li>obj：要定义的对象</li>
<li>prop：要定义或修改的属性的名称或Symbol</li>
<li>descriptor：要定义或修改的属性描述符</li>
</ul>
<h2 id="属性描述符分类"><a href="#属性描述符分类" class="headerlink" title="属性描述符分类"></a>属性描述符分类</h2><p><img src="/2023/03/26/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/JavaScript%E5%B1%9E%E6%80%A7%E5%AF%B9%E8%B1%A1%E5%A2%9E%E5%BC%BA/image-20230327092658898.png" alt="image-20230327092658898"></p>
<p><strong><em>Configuratble：</em></strong>属性是否可以通过delete删除属性，是否可以修改它的特性，或者是否可以将它修改为存取属性描述符</p>
<ul>
<li>通过对象定义某个属性，其Configurable为true</li>
<li>通过属性描述符定义属性时，属性的Configurable默认为false</li>
</ul>
<p><strong><em>Enumerable：</em></strong>属性是否可以通过for-in或者Object.keys()返回属性</p>
<ul>
<li>通过对象定义时，属性的Enumerable为true</li>
<li>通过属性描述符定义属性时，属性的Enumerable默认为false</li>
</ul>
<p><strong><em>Writable：</em></strong>属性是否可以修改值</p>
<ul>
<li>通过对象定义时，属性的Writable为true</li>
<li>通过属性描述符定义属性时，属性的Writable默认为false</li>
</ul>
<p><strong><em>value：</em></strong>属性的value值，读取属性会返回该值，修改属性时，会对其进行更改</p>
<ul>
<li>默认情况下这个值是undefined</li>
</ul>
<p><strong><em>get：</em></strong>获取属性时会执行的函数，默认为undefined</p>
<p><strong><em>set：</em></strong>设置属性时会执行的函数，默认为undefined</p>
<p>注：get/set与value/Writable不可共存</p>
<h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><p>同时定义多个属性：Object.defineProperties()</p>
<p><img src="/2023/03/26/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/JavaScript%E5%B1%9E%E6%80%A7%E5%AF%B9%E8%B1%A1%E5%A2%9E%E5%BC%BA/image-20230327093656890.png" alt="image-20230327093656890"></p>
<p><strong><em>获取对象的属性描述符：</em></strong></p>
<ul>
<li>getOwnPropertyDescriptor</li>
<li>getOwnPropertyDescriptors</li>
</ul>
<p><strong><em>禁止对象扩充新属性：</em></strong>preventExtensions  Object.preventExtensions(obj)</p>
<ul>
<li>给一个对象添加新的属性会失败</li>
</ul>
<p><strong><em>密封属性，不允许配置和删除属性：</em></strong>seal  Object.seal(obj)</p>
<ul>
<li>实际上是调用preventExtensions</li>
<li>将现有属性的Configurable设置为false</li>
</ul>
<p><strong><em>冻结属性，不允许修改现有属性：</em></strong>freeze   Object.freeze(obj)</p>
<p>实际上是调用seal</p>
<p>将现有属性的Writable设置为false</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript运行原理</title>
    <url>/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/JavaScript%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p><strong><em>浏览器内核（以webkit为例）：</em></strong>WebCore负责解析HTML、布局、渲染等；JavaScriptCore：解析、执行JavaScript代码</p>
<p><strong><em>ECMAScript3：</em></strong>用这个来学习JavaScript执行、作用域、作用域链、闭包等概念</p>
<p><strong><em>ECMAScript5：</em></strong>用这个来学习块级作用域、let、const等概念</p>
<p>两者概念描述不一样，整体思路一致</p>
<h1 id="V8引擎的执行原理"><a href="#V8引擎的执行原理" class="headerlink" title="V8引擎的执行原理"></a>V8引擎的执行原理</h1><p>V8是用C++编写的开源高性能JavaScript和WebAssembly引擎，可以用于Chrome和Node.js</p>
<p><img src="/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/JavaScript%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230323184747752.png" alt="image-20230323184747752"></p>
<p><strong><em>Parse：</em></strong>将JavaScript代码转换为AST（抽象语法树）——函数在没调用的时候，不会被转换为抽象语法树</p>
<p><strong><em>Ignition：</em></strong>将AST转换为字节码</p>
<p><strong><em>TurboFan：</em></strong>将字节码编译为可以直接运行的机器码</p>
<ul>
<li>如果一个函数被多次调用，就会被标记为热点函数，就会被TurboFan转换为机器码，提高代码的执行性能</li>
<li>机器码也会被还原为ByteCode，如果后续执行函数的过程中，类型发生了变化，之前的机器码不能进行准确的运算，就会逆向转换为字节码</li>
</ul>
<h2 id="JavaScript执行过程"><a href="#JavaScript执行过程" class="headerlink" title="JavaScript执行过程"></a>JavaScript执行过程</h2><p><strong><em>执行上下文栈（ECS）：</em></strong>js引擎内部有一个执行上下文栈，是执行代码的调用栈</p>
<p><strong><em>全局执行上下文：</em></strong>全局代码块为了执行会生成一个全局执行上下文（GEC），并放入ECS中</p>
<p><strong><em>函数执行上下文：</em></strong>执行到一个函数值，会根据函数体创建一个函数执行上下文（FEC），并放入到ECS中</p>
<p><strong><em>AO对象：</em></strong>当进入一个函数执行上下文时，会创建一个AO对象，AO对象使用arguments作为初始化，初始值是传入的参数</p>
<p><strong><em>VO对象：</em></strong>每一个执行上下文都会关联一个VO（Variable Object）对象，变量和函数的声明会被添加到这个VO对象中</p>
<p><strong><em>注：</em></strong>全局上下文的VO对象就是GO、函数执行上下文的VO对象是AO</p>
<h3 id="初始化全局对象"><a href="#初始化全局对象" class="headerlink" title="初始化全局对象"></a>初始化全局对象</h3><p>js在执行代码前，会在堆内存中创建一个全局对象：Global Object（GO）</p>
<ul>
<li>该对象所有的作用域（scope）都可以访问； </li>
<li>里面会包含Date、Array、String、Number、setTimeout、setInterval等等； </li>
<li>其中还有一个window属性指向自己；</li>
</ul>
<p>在parser转成AST的过程中，会将全局定义的变量、函数等放入GlobalObject中，但不会赋值（变量的作用域提升）</p>
<ul>
<li>JavaScript可以在变量声明前访问，但是值是undefined，浏览器会对函数进行特殊处理，使得其可以在定义前调用</li>
</ul>
<p>在代码执行过程中，对变量赋值或者执行其他的函数</p>
<p>全局代码执行前：</p>
<p><img src="/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/JavaScript%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230323191418551.png" alt="image-20230323191418551"></p>
<p>全局代码执行后：</p>
<p><img src="/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/JavaScript%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230323191040277.png" alt="image-20230323191040277"></p>
<p>函数执行前：</p>
<p><img src="/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/JavaScript%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230323191504578.png" alt="image-20230323191504578"></p>
<p>函数执行后：</p>
<p><img src="/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/JavaScript%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230323191448418.png" alt="image-20230323191448418"></p>
<h1 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h1><p><strong><em>作用域链：</em></strong>当进入到一个执行上下文时，执行上下文会关联一个作用域链，并根据代码类型，添加一系列的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">age</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = <span class="title function_">foo</span>(<span class="number">18</span>)</span><br><span class="line"><span class="title function_">baz</span>()</span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/23/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/JavaScript%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230323192141405.png" alt="image-20230323192141405"></p>
<ul>
<li>其作用域链中有两个，分别是foo的作用域、全局作用域</li>
</ul>
<p>注：作用域链是在函数声明是产生的，与调用时刻无关</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS元素的定位与浮动</title>
    <url>/2023/04/20/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/CSS%E5%85%83%E7%B4%A0%E7%9A%84%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>React与Redux</title>
    <url>/2023/03/30/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E4%B8%8ERedux/</url>
    <content><![CDATA[<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><h2 id="为什么要使用Redux"><a href="#为什么要使用Redux" class="headerlink" title="为什么要使用Redux"></a>为什么要使用Redux</h2><ul>
<li>JavaScript开发的应用程序，已经变得越来越复杂了<ul>
<li>JavaScript需要管理的状态越来越多，越来越复杂</li>
<li>这些状态包括服务器返回的数据、缓存数据、用户操作产生的数据等等，也包括一些UI的状态，比如某些元素是否被选中，是否显示 加载动效，当前分页</li>
</ul>
</li>
<li>管理不断变化的state是非常困难的<ul>
<li>状态之间相互会存在依赖，一个状态的变化会引起另一个状态的变化，View页面也有可能会引起状态的变化</li>
<li>当应用程序复杂时，state在什么时候，因为什么原因而发生了变化，发生了怎么样的变化，会变得非常难以控制和追踪</li>
</ul>
</li>
<li>React是在视图层帮助我们解决了DOM的渲染过程，但是State依然是留给我们自己来管理<ul>
<li>无论是组件定义自己的state，还是组件之间的通信通过props进行传递；也包括通过Context进行数据之间的共享</li>
<li>React主要负责帮助我们管理视图，state如何维护最终还是我们自己来决定</li>
</ul>
</li>
<li>React主要负责帮助我们管理视图，state如何维护最终还是我们自己来决定</li>
<li>Redux除了和React一起使用之外，它也可以和其他界面库一起来使用（比如Vue），并且它非常小（包括依赖在内，只有2kb）</li>
</ul>
<h2 id="Redux三大原则"><a href="#Redux三大原则" class="headerlink" title="Redux三大原则"></a>Redux三大原则</h2><ul>
<li><strong>单一数据源</strong><ul>
<li>整个应用程序的state被存储在一颗object tree中，并且这个object tree只存储在一个  store 中</li>
<li>Redux并没有强制让我们不能创建多个Store，但是那样做并不利于数据的维护</li>
<li>单一的数据源可以让整个应用程序的state变得方便维护、追踪、修改</li>
</ul>
</li>
<li><strong>State是只读的</strong><ul>
<li>唯一修改State的方法一定是触发action，不要试图在其他地方通过任何的方式来修改State</li>
<li>这样就确保了View或网络请求都不能直接修改state，它们只能通过action来描述自己想要如何修改state</li>
<li>这样可以保证所有的修改都被集中化处理，并且按照严格的顺序来执行，所以不需要担心race condition（竟态）的问题</li>
</ul>
</li>
<li>使用纯函数来执行修改、<ul>
<li>通过reducer将  旧state和  actions联系在一起，并且返回一个新的State</li>
<li>随着应用程序的复杂度增加，我们可以将reducer拆分成多个小的reducers，分别操作不同state tree的一部分</li>
<li>但是所有的reducer都应该是纯函数，不能产生任何的副作用</li>
</ul>
</li>
</ul>
<h2 id="Redux项目搭建与使用"><a href="#Redux项目搭建与使用" class="headerlink" title="Redux项目搭建与使用"></a>Redux项目搭建与使用</h2><ul>
<li><p>安装redux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install redux --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个对象，作为我们要保存的状态</p>
</li>
<li><p>创建Store来存储这个state</p>
<ul>
<li><p>创建store时必须创建reducer</p>
</li>
<li><p>我们可以通过  store.getState 来获取当前的state</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createStore &#125; = <span class="built_in">require</span>(<span class="string">&quot;redux&quot;</span>)</span><br><span class="line"><span class="comment">// 初始化数据——要保存的状态</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;ouwenwu&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义reducer函数：纯函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数1：store中目前报错的state——在createStore时会调用reducer一次，此时参数state为undefined，因此需要为其定义一个初始值，即我们的初始化数据</span></span><br><span class="line"><span class="comment"> * 参数2：传入的action</span></span><br><span class="line"><span class="comment"> * 返回值：返回值会作为store之后存储的state</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state=initialState,action</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reducer&quot;</span>,state,action)</span><br><span class="line">    <span class="comment">// 这里使用switch更好</span></span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;change_name&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state,<span class="attr">name</span>:action.<span class="property">name</span>&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;add_age&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state,<span class="attr">age</span>:state.<span class="property">age</span>+action.<span class="property">age</span>&#125;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建store</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = store</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过action来修改state</p>
<ul>
<li>通过dispatch来派发action</li>
<li>通常action中都会有type属性，也可以携带其他的数据</li>
</ul>
</li>
<li><p>修改reducer中的处理代码</p>
<ul>
<li>这里一定要记住，reducer是一个纯函数，不需要直接修改state</li>
<li>后面我会讲到直接修改state带来的问题</li>
</ul>
</li>
<li><p>可以在派发action之前，监听store的变化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store=<span class="built_in">require</span>(<span class="string">&quot;./store&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启store订阅——这个订阅是在派发action之前订阅的，会在store所监听的state修改时调用</span></span><br><span class="line"><span class="keyword">const</span> unsubscribe = store.<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;订阅数据发生变化&quot;</span>,store.<span class="title function_">getState</span>())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// actionFunction——将action抽取为函数，那么后面每次需要创建action不用手动编写，调用函数生成</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeNameAction</span> = (<span class="params">name</span>)=&gt;(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;change_name&quot;</span>,</span><br><span class="line">    name</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addAgeAction</span> = (<span class="params">age</span>)=&gt;(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;add_age&quot;</span>,</span><br><span class="line">    age</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 修改store中的数据：必须action——手动写action</span></span><br><span class="line"><span class="keyword">const</span> nameAction =&#123;<span class="attr">type</span>:<span class="string">&quot;change_name&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;kobe&quot;</span>&#125;</span><br><span class="line">store.<span class="title function_">dispatch</span>(nameAction)</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">changeNameAction</span>(<span class="string">&quot;kebi1&quot;</span>))</span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line"><span class="title function_">unsubscribe</span>()</span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&quot;add_age&quot;</span>,<span class="attr">age</span>:<span class="number">1</span>&#125;)</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">addAgeAction</span>(<span class="number">1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出<img src="/2023/03/30/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E4%B8%8ERedux/image-20230330092932419.png" alt="image-20230330092932419"></p>
</li>
</ul>
<h3 id="Redux项目抽取"><a href="#Redux项目抽取" class="headerlink" title="Redux项目抽取"></a>Redux项目抽取</h3><p><strong><em>如果我们将所有的逻辑代码写到一起，那么当redux变得复杂时代码就难以维护</em></strong></p>
<ul>
<li><p>store/index.js文件——利用reducer创建store</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span></span><br><span class="line"><span class="comment">//创建store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer)</span><br></pre></td></tr></table></figure>
</li>
<li><p>store/reducer.js文件——reducer函数和state默认值\</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;ouwenwu&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义reducer函数：纯函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数1：store中目前报错的state</span></span><br><span class="line"><span class="comment"> * 参数2：传入的action</span></span><br><span class="line"><span class="comment"> * 返回值：返回值会作为store之后存储的state</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state=initialState,action</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reducer&quot;</span>,state,action)</span><br><span class="line">    <span class="comment">// 这里使用switch更好</span></span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> actionType.<span class="property">CHANGE_NAME</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state,<span class="attr">name</span>:action.<span class="property">name</span>&#125;</span><br><span class="line">        <span class="keyword">case</span> actionType.<span class="property">ADD_AGE</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state,<span class="attr">age</span>:state.<span class="property">age</span>+action.<span class="property">age</span>&#125;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure>
</li>
<li><p>store/actionCreator.js文件——将store要派发的action，抽取成函数放在此处</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">changeNameAction</span> = (<span class="params">name</span>)=&gt;(&#123;</span><br><span class="line">    <span class="attr">type</span>:actionType.<span class="property">CHANGE_NAME</span>,</span><br><span class="line">    name</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addNameAge</span> = (<span class="params">age</span>)=&gt;(&#123;</span><br><span class="line">    <span class="attr">type</span>:actionType.<span class="property">ADD_AGE</span>,</span><br><span class="line">    age</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>store/constants.js文件——常量文件，将action中的type抽取出来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">CHANGE_NAME</span> = <span class="string">&quot;change_name&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ADD_AGE</span> = <span class="string">&quot;add_age&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Redux与React融合"><a href="#Redux与React融合" class="headerlink" title="Redux与React融合"></a>Redux与React融合</h3><p><img src="/2023/03/30/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E4%B8%8ERedux/image-20230330102727040.png" alt="image-20230330102727040"></p>
<p><strong><em>redux配置代码如上所述</em></strong></p>
<p><strong><em>jsx代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store/index.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; changeNameAction, addAgeAction &#125; <span class="keyword">from</span> <span class="string">&quot;./store/actionCreator&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="comment">// 初始化值使用store中的初始化变量</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">name</span>:store.<span class="title function_">getState</span>().<span class="property">name</span>,</span><br><span class="line">            <span class="attr">age</span>:store.<span class="title function_">getState</span>().<span class="property">age</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加载页面前订阅store，使得其更改时调用对应的函数改变state引起页面的刷新</span></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">unsubScribe</span> = store.<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> state = store.<span class="title function_">getState</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>:state.<span class="property">name</span>,</span><br><span class="line">                <span class="attr">age</span>:state.<span class="property">age</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 页面卸载前取消订阅</span></span><br><span class="line">    <span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">unsubScribe</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">changeName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="title function_">changeNameAction</span>(<span class="string">&quot;www&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="title function_">addAgeAction</span>(<span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name,age&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.changeName()&#125;&#125;&gt;改变名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.addAge()&#125;&#125;&gt;age+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;age&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<h1 id="react-redux的使用"><a href="#react-redux的使用" class="headerlink" title="react-redux的使用"></a>react-redux的使用</h1><ul>
<li><p><strong><em>index.js（整个react的入口）：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写REACT代码，通过REACT渲染内容</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里的Provider实际上是基于Context实现的，用它包裹App及其子组件可以使用传入的stero</span></span><br><span class="line"><span class="comment">         * stero在底层是通过value实现的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><em>App.js代码（获取stero并使用代码）：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addAgeAction &#125; <span class="keyword">from</span> <span class="string">&quot;./store/actionCreator&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addAgeByButton</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// store.dispatch(addAgeAction(1))</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">addAge</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.addAgeByButton()&#125;&#125;&gt;age+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相当于添加监听，会把stero中的state中的对应属性添加到props中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="comment">// 需要用哪些就使用哪些，会将这个返回对象和本来的props合并</span></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">age</span>:state.<span class="property">age</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置dispatch，会把return中的函数放到this.pros中去，通过调用这个函数可以发送action给stero</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="title function_">addAge</span>(<span class="params">age</span>)&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">addAgeAction</span>(age))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// connect()返回值是一个高阶函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * connect()参数1：store中的哪些数据需要映射到这个组件的props——函数</span></span><br><span class="line"><span class="comment"> * connect()参数2：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><em>stero的代码，index.js/constants.js/actionCreate.js/reducer.js依然像上方写的一样</em></strong></p>
</li>
</ul>
<h2 id="redux异步处理"><a href="#redux异步处理" class="headerlink" title="redux异步处理"></a>redux异步处理</h2><p><strong><em>react获取网络请求：</em></strong></p>
<ul>
<li><p>componentDidMount中发起网络请求，并在结束后赋值给state</p>
<ul>
<li>这种方式数据管理和react耦合性高，和redux的要求不符</li>
</ul>
</li>
<li><p>通过redux获取网络请求，由jsx组件中发起action，在action中获取数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 由于网络请求通常是异步的，函数的return中不能直接获得网络请求的值，因此普通的action是不能实现异步的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">netWorkAction</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&quot;oww&quot;</span>)</span><br><span class="line">        &#125;,<span class="number">5000</span>)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">type</span>:actionType.<span class="property">CHANGE_NAME</span>,</span><br><span class="line">            <span class="attr">name</span>:res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>redux-thunk中间件技术</p>
<ul>
<li><p>安装redux-thunk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-thunk --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置react可以使用thunk，thunk允许dispatch一个函数，之后会自动执行这个函数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, combineReducers, createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&quot;./countStore/reducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> homeReducer <span class="keyword">from</span> <span class="string">&quot;./homeStore/reducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">    <span class="attr">age</span>:countReducer,</span><br><span class="line">    <span class="attr">name</span>:homeReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// combineReducers的底层实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducerByUs</span>(<span class="params">state = &#123;&#125;, action</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第一次执行时（createStore），传入undefined，得到的是默认值对象</span></span><br><span class="line"><span class="comment">         * 后续执行时，每次传入上次的state，得到正确值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="attr">age</span>:<span class="title function_">countReducer</span>(state.<span class="property">age</span>, action),</span><br><span class="line">        <span class="attr">name</span>:<span class="title function_">homeReducer</span>(state.<span class="property">name</span>,action)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 包裹中间件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer,<span class="title function_">applyMiddleware</span>(thunk))</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<p>action代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">netWorkAction</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dispatch foo&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params">dispatch, getState</span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">&quot;oww&quot;</span>)</span><br><span class="line">            &#125;,<span class="number">5000</span>)</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">changeNameAction</span>(res))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> foo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>jsx中发起dispatch代码</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addAgeAction &#125; <span class="keyword">from</span> <span class="string">&quot;./store/countStore&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; netWorkAction &#125; <span class="keyword">from</span> <span class="string">&quot;./store/homeStore&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addAgeByButton</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// store.dispatch(addAgeAction(1))</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">addAge</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">changeName</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.addAgeByButton()&#125;&#125;&gt;changeinfo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于添加监听，会把stero中的state中的对应属性添加到props中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="comment">// 需要用哪些就使用哪些，会将这个返回对象和本来的props合并</span></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">age</span>:state.<span class="property">age</span>.<span class="property">age</span>,</span><br><span class="line">        <span class="attr">name</span>:state.<span class="property">name</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置dispatch，会把return中的函数放到this.pros中去，通过调用这个函数可以发送action给stero</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="title function_">addAge</span>(<span class="params">age</span>)&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">addAgeAction</span>(age))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">changeName</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">netWorkAction</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// connect()返回值是一个高阶函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * connect()参数1：store中的哪些数据需要映射到这个组件的props——函数</span></span><br><span class="line"><span class="comment"> * connect()参数2：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="redux代码拆分"><a href="#redux代码拆分" class="headerlink" title="redux代码拆分"></a>redux代码拆分</h2><p><strong><em>不拆分的reducer：</em></strong></p>
<ul>
<li>一个reducer处理多个页面的数据</li>
<li>将所有状态都放到reducer中进行管理，随着项目的日趋庞大，会造成代码臃肿</li>
</ul>
<p><strong><em>对reducer进行拆分：</em></strong></p>
<ul>
<li>将对不同页面的数据或造成抽取为不同的reducer</li>
<li>将多个reducer合并为一个</li>
</ul>
<h3 id="combineReducers函数"><a href="#combineReducers函数" class="headerlink" title="combineReducers函数"></a>combineReducers函数</h3><p>事实上，redux给我们提供了一个combineReducers函数可以方便的让我们对多个reducer进行合并</p>
<p><strong><em>页面一store代码：</em></strong></p>
<ul>
<li><p>actionCreator.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">changeNameAction</span> = (<span class="params">name</span>)=&gt;(&#123;</span><br><span class="line">    <span class="attr">type</span>:actionType.<span class="property">CHANGE_NAME</span>,</span><br><span class="line">    name</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>constants.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">CHANGE_NAME</span> = <span class="string">&quot;change_name&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> homeReducer <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一当初当前模块的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> homeReducer</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./actionCreator&quot;</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>reducer.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;ouwenwu&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义reducer函数：纯函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数1：store中目前报错的state</span></span><br><span class="line"><span class="comment"> * 参数2：传入的action</span></span><br><span class="line"><span class="comment"> * 返回值：返回值会作为store之后存储的state</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">homeReducer</span>(<span class="params">state=initialState,action</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reducer&quot;</span>,state,action)</span><br><span class="line">    <span class="comment">// 这里使用switch更好</span></span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> actionType.<span class="property">CHANGE_NAME</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state,<span class="attr">name</span>:action.<span class="property">name</span>&#125;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> homeReducer</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><em>页面一store代码：</em></strong></p>
<ul>
<li><p>actionCreator.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">changeNameAction</span> = (<span class="params">name</span>)=&gt;(&#123;</span><br><span class="line">    <span class="attr">type</span>:actionType.<span class="property">CHANGE_NAME</span>,</span><br><span class="line">    name</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>constants.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">CHANGE_NAME</span> = <span class="string">&quot;change_name&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> homeReducer <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一当初当前模块的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> homeReducer</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./actionCreator&quot;</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>reducer.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;ouwenwu&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义reducer函数：纯函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数1：store中目前报错的state</span></span><br><span class="line"><span class="comment"> * 参数2：传入的action</span></span><br><span class="line"><span class="comment"> * 返回值：返回值会作为store之后存储的state</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">homeReducer</span>(<span class="params">state=initialState,action</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reducer&quot;</span>,state,action)</span><br><span class="line">    <span class="comment">// 这里使用switch更好</span></span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> actionType.<span class="property">CHANGE_NAME</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state,<span class="attr">name</span>:action.<span class="property">name</span>&#125;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> homeReducer</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><em>页面二store代码：</em></strong></p>
<ul>
<li><p>actionCreator.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addAgeAction</span> = (<span class="params">age</span>)=&gt;(&#123;</span><br><span class="line">    <span class="attr">type</span>:actionType.<span class="property">ADD_AGE</span>,</span><br><span class="line">    age</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>constants.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ADD_AGE</span> = <span class="string">&quot;add_age&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> countReducer</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./actionCreator&quot;</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>reducer.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义reducer函数：纯函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数1：store中目前报错的state</span></span><br><span class="line"><span class="comment"> * 参数2：传入的action</span></span><br><span class="line"><span class="comment"> * 返回值：返回值会作为store之后存储的state</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countReducer</span>(<span class="params">state=initialState,action</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reducer&quot;</span>,state,action)</span><br><span class="line">    <span class="comment">// 这里使用switch更好</span></span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> actionType.<span class="property">ADD_AGE</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">age</span>,action.<span class="property">age</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;...state,<span class="attr">age</span>:state.<span class="property">age</span>+action.<span class="property">age</span>&#125;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> countReducer</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><em>合并两个store的代码：</em></strong></p>
<p><strong><em>index.js：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers, createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&quot;./countStore/reducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> homeReducer <span class="keyword">from</span> <span class="string">&quot;./homeStore/reducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">    <span class="attr">age</span>:countReducer,</span><br><span class="line">    <span class="attr">name</span>:homeReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// combineReducers的底层实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducerByUs</span>(<span class="params">state = &#123;&#125;, action</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第一次执行时（createStore），传入undefined，得到的是默认值对象</span></span><br><span class="line"><span class="comment">         * 后续执行时，每次传入上次的state，得到正确值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="attr">age</span>:<span class="title function_">countReducer</span>(state.<span class="property">age</span>, action),</span><br><span class="line">        <span class="attr">name</span>:<span class="title function_">homeReducer</span>(state.<span class="property">name</span>,action)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<p><strong><em>合并数据的使用：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addAgeAction &#125; <span class="keyword">from</span> <span class="string">&quot;./store/countStore&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addAgeByButton</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// store.dispatch(addAgeAction(1))</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">addAge</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.addAgeByButton()&#125;&#125;&gt;age+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相当于添加监听，会把stero中的state中的对应属性添加到props中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="comment">// 需要用哪些就使用哪些，会将这个返回对象和本来的props合并</span></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">		<span class="comment">// 这里获取到的stero为合并后的state，而合并后的state.age是一个reducer对象，因此要再加一个.age才能获取到真实值</span></span><br><span class="line">        <span class="attr">age</span>:state.<span class="property">age</span>.<span class="property">age</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置dispatch，会把return中的函数放到this.pros中去，通过调用这个函数可以发送action给stero</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="title function_">addAge</span>(<span class="params">age</span>)&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">addAgeAction</span>(age))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// connect()返回值是一个高阶函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * connect()参数1：store中的哪些数据需要映射到这个组件的props——函数</span></span><br><span class="line"><span class="comment"> * connect()参数2：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<h2 id="ReduxToolkit的使用（RTK）"><a href="#ReduxToolkit的使用（RTK）" class="headerlink" title="ReduxToolkit的使用（RTK）"></a>ReduxToolkit的使用（RTK）</h2><ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure>
</li>
<li><p>Redux Toolkit包旨在成为编写Redux逻辑的标准方式，从而解决上面提到的问题</p>
</li>
</ul>
<p><strong><em>Redux Toolkit的核心API主要是如下几个：</em></strong></p>
<ul>
<li><p><strong>configureStore：</strong>包装createStore以提供简化的配置选项和良好的默认值。它可以自动组合你的  slice reducer，添加你提供 的任何  Redux 中间件，redux-thunk默认包含，并启用  Redux DevTools Extension</p>
</li>
<li><p><strong>createSlice：</strong>接受reducer函数的对象、切片名称和初始状态值，并自动生成切片reducer，并带有相应的actions</p>
</li>
<li><strong>createAsyncThunk:</strong> 接受一个动作类型字符串和一个返回承诺的函数，并生成一个pending/fulfilled/rejected基于该承诺分 派动作类型的  thunk</li>
</ul>
<h3 id="createSlice代码"><a href="#createSlice代码" class="headerlink" title="createSlice代码"></a>createSlice代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createAsyncThunk &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="comment">// @reduxjs/toolkit的异步操作1</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * payload是在jsx中dispatch时传入的额外参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getNameAction1 = <span class="title function_">createAsyncThunk</span>(<span class="string">&quot;age/changeName&quot;</span>,<span class="title function_">async</span>(payload, stero)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;dispatch, getState&#125; = stero</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&quot;ouwenwu&quot;</span>)</span><br><span class="line">        &#125;,<span class="number">5000</span>)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>[</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title function_">changeName</span>(res))</span><br><span class="line">    ])</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// @reduxjs/toolkit的异步操作2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getNameAction = <span class="title function_">createAsyncThunk</span>(<span class="string">&quot;age/changeName&quot;</span>,<span class="title function_">async</span>(payload, stero)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;dispatch, getState&#125; = stero</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&quot;ouwenwu&quot;</span>)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> ageSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;ageSlice&quot;</span>,   <span class="comment">// 用户后面标记当前操作类型，与react中action的type类似——但是不再需要写出来各种type，而自动实现</span></span><br><span class="line">    <span class="comment">// 初始值</span></span><br><span class="line">    <span class="attr">initialState</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;oww&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 相当于之前的reducer函数，可以添加很多的函数，每一个函数都相当于一个原来的case</span></span><br><span class="line">    <span class="attr">reducers</span>:&#123;</span><br><span class="line">        <span class="title function_">addAge</span>(<span class="params">state, action</span>)&#123;</span><br><span class="line">            state.<span class="property">age</span> += action.<span class="property">payload</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(action)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">subAge</span>(<span class="params">state, action</span>)&#123;</span><br><span class="line">            state.<span class="property">age</span> -= action.<span class="property">payload</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(action)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">changeName</span>(<span class="params">state,action</span>)&#123;</span><br><span class="line">            state.<span class="property">name</span> = action.<span class="property">payload</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(action)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 监听异步dispatch</span></span><br><span class="line">    <span class="attr">extraReducers</span>:&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * getNameAction一个有三个状态</span></span><br><span class="line"><span class="comment">         * pending：action被发出，但是还没有最终的结果</span></span><br><span class="line"><span class="comment">         * fulfilled：获取到最终的结果（有返回值的结果）</span></span><br><span class="line"><span class="comment">         * rejected：执行过程中有错误或者抛出了异常</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        [getNameAction.<span class="property">fulfilled</span>](state, action)&#123;</span><br><span class="line">            state.<span class="property">name</span> = action.<span class="property">payload</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(action)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// createSlice是一个把参数穿进去，返回一个对象，包含之前的reducer、action等，使用方法和之前使用相同</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123;addAge, subAge, changeName&#125; = ageSlice.<span class="property">actions</span></span><br><span class="line"><span class="keyword">const</span> ageReucer = ageSlice.<span class="property">reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ageReucer</span><br></pre></td></tr></table></figure>
<h3 id="configureStore代码"><a href="#configureStore代码" class="headerlink" title="configureStore代码"></a>configureStore代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span></span><br><span class="line"><span class="keyword">import</span> ageReucer <span class="keyword">from</span> <span class="string">&quot;./countStore/ageSlice&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>:&#123;</span><br><span class="line">        <span class="attr">age</span>: ageReucer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<h3 id="jsx代码"><a href="#jsx代码" class="headerlink" title="jsx代码"></a>jsx代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addAge, subAge, getNameAction &#125; <span class="keyword">from</span> <span class="string">&quot;./store/countStore/ageSlice&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addAgeByButton</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">addAge</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">subAgeByButton</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">subAge</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">changeNameByButton</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">changeName</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.addAgeByButton()&#125;&#125;&gt;addAge<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.subAgeByButton()&#125;&#125;&gt;subAge<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.changeNameByButton()&#125;&#125;&gt;changeName<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于添加监听，会把stero中的state中的对应属性添加到props中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="comment">// 需要用哪些就使用哪些，会将这个返回对象和本来的props合并</span></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">name</span>:state.<span class="property">age</span>.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">age</span>:state.<span class="property">age</span>.<span class="property">age</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置dispatch，会把return中的函数放到this.pros中去，通过调用这个函数可以发送action给stero</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="title function_">addAge</span>(<span class="params">age</span>)&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">addAge</span>(age))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">subAge</span>(<span class="params">age</span>)&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">subAge</span>(age))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">changeName</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">getNameAction</span>(<span class="string">&quot;aaa&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// connect()返回值是一个高阶函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * connect()参数1：store中的哪些数据需要映射到这个组件的props——函数</span></span><br><span class="line"><span class="comment"> * connect()参数2：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React组件化开发</title>
    <url>/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="组件化开发（React二）"><a href="#组件化开发（React二）" class="headerlink" title="组件化开发（React二）"></a>组件化开发（React二）</h1><p><strong><em>组件化开发：</em></strong>如果把一个页面的所有处理逻辑放在一起，处理起来会很复杂，因此将一个页面拆分为不同的功能块</p>
<ul>
<li>一个完整的页面可以划分为很多个组件</li>
<li>每个组件都用于实现页面的一个功能</li>
<li>每一个组件又可以细分</li>
<li>组件本身又可以在很多地方复用</li>
</ul>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230324172119865.png" alt="image-20230324172119865"></p>
<p><strong><em>React组件：</em></strong></p>
<ul>
<li>类组件与函数组件</li>
<li>根据内部是否有状态需要维护：无状态组件、有状态组件（this.state，不考虑hooks的情况下函数组件是无状态组件，而类组件不定义this.state也可以看做无状态组件）</li>
<li>根据组件的不同职责：展示型组件、容器型组件</li>
</ul>
<p><strong><em>组件之间有重叠，但都是为了数据逻辑和UI展示的分离</em></strong></p>
<ul>
<li>函数组件、无状态组件、展示型组件主要关注UI的展示</li>
<li>类组件、有状态组件、容器型组件主要关注数据逻辑</li>
</ul>
<h1 id="类组件与函数组件"><a href="#类组件与函数组件" class="headerlink" title="类组件与函数组件"></a>类组件与函数组件</h1><h2 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h2><p><strong><em>定义要求：</em></strong>首字母大写、继承自React.Component、实现render函数</p>
<ul>
<li>constructor可选，在其中初始化数据</li>
<li>this.state中维护组件内部的数据</li>
<li>render是类组件<strong>唯一必须实现的方法</strong></li>
</ul>
<h2 id="函数组件（没有hooks的函数组件）"><a href="#函数组件（没有hooks的函数组件）" class="headerlink" title="函数组件（没有hooks的函数组件）"></a>函数组件（没有hooks的函数组件）</h2><ul>
<li>没有生命周期、会被挂载、没有生命周期函数</li>
<li>this关键字不能指向组件实例，因为没有组件实例</li>
<li>没有内部状态state</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>)</span><br></pre></td></tr></table></figure>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p><strong><em>生命周期：</em></strong>从创建到销毁的整个过程，了解生命周期在最合适的地方完成想要的功能</p>
<h2 id="React的生命周期、生命周期函数"><a href="#React的生命周期、生命周期函数" class="headerlink" title="React的生命周期、生命周期函数"></a>React的生命周期、生命周期函数</h2><ul>
<li>装载阶段：组件第一次在DOM树种被渲染的过程——装载完成：componentDidMount</li>
<li>更新阶段：组件状态发生变化，重新更新渲染的过程——更新完成：componentDidUpdate</li>
<li>卸载阶段：组件从DOM树种被移除的过程——即将移除：componentWillUnmount</li>
</ul>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230324173626696.png" alt="image-20230324173626696"></p>
<h3 id="各函数任务及时刻"><a href="#各函数任务及时刻" class="headerlink" title="各函数任务及时刻"></a>各函数任务及时刻</h3><p><strong><em>constructor：</em></strong></p>
<ul>
<li>不初始化state或不进行方法绑定，则可以不实现构造函数</li>
<li>作用一：给this.state赋值对象来初始化state</li>
<li>作用二：为事件绑定this——调用super()</li>
</ul>
<p><strong><em>componentDidMount：</em></strong></p>
<ul>
<li>组件挂载到DOM Tree后立马调用</li>
<li>作用一：进行依赖于DOM的操作</li>
<li>作用二：发送网络请求的最好位置</li>
<li>作用三：添加订阅</li>
</ul>
<p><strong><em>componentDidUpdate：</em></strong></p>
<ul>
<li>组件更新后立即调用，首次渲染不会执行这个方法</li>
<li>作用一：组件更新后，此处进行DOM相关操作</li>
<li>作用二：当更新前后props发送了变化，此处发送网络请求</li>
</ul>
<p><strong><em>componentWIllUnmount：</em></strong></p>
<ul>
<li>组件卸载及销毁之前直接调用</li>
<li>作用一：进行必要的清理操作</li>
<li>作用二：清除timer，取消网络请求或取消上面创建的订阅</li>
</ul>
<h3 id="不常用生命周期函数"><a href="#不常用生命周期函数" class="headerlink" title="不常用生命周期函数"></a>不常用生命周期函数</h3><ul>
<li>getDerivedStateFromProps：state 的值在任何 时候都依赖于 props时使用；该方法返回一个对象 来更新state</li>
<li>getSnapshotBeforeUpdate：在React更新DOM 之前回调的一个函数，可以获取DOM更新前的一 些信息（比如说滚动位置）</li>
<li>shouldComponentUpdate：该生命周期函数很 常用，但是我们等待讲性能优化时再来详细讲解</li>
</ul>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230324174415395.png" alt="image-20230324174415395"></p>
<h1 id="组件之间的通信"><a href="#组件之间的通信" class="headerlink" title="组件之间的通信"></a>组件之间的通信</h1><h2 id="父组件传值到子组件"><a href="#父组件传值到子组件" class="headerlink" title="父组件传值到子组件"></a>父组件传值到子组件</h2><ul>
<li>父组件通过 属性=值 的形式来传递给子组件数据</li>
<li>子组件通过props参数获取父组件传过来的值</li>
</ul>
<p><strong><em>默认值设置：</em></strong>ChildComponent.defaultProps</p>
<p><strong><em>参数类型设置：</em></strong>ChildComponent.propTypes    isRequired代表是否必须</p>
<p><strong><em>父组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&quot;./component/ChildComponent&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;I am your father!&quot;</span>,</span><br><span class="line">            <span class="attr">info</span>:<span class="string">&quot;You are my child!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;message,info&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">info</span> = <span class="string">&#123;info&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><strong><em>子组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PropTypes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ([</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>&#123;this.props.info&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>&#123;this.props.info2&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ChildComponent</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="attr">info</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ChildComponent</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">    <span class="attr">info</span>:<span class="string">&quot;Tell me who are you!&quot;</span>,</span><br><span class="line">    <span class="attr">info2</span>:<span class="string">&quot;You are my Dad!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChildComponent</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230324180859034.png" alt="image-20230324180859034"></p>
<h2 id="子组件传值到父组件"><a href="#子组件传值到父组件" class="headerlink" title="子组件传值到父组件"></a>子组件传值到父组件</h2><ul>
<li>通过props给子组件传递一个回调函数，在子组件中调用这个函数</li>
</ul>
<p><strong><em>父组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&quot;./component/ChildComponent&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;I am your father!&quot;</span>,</span><br><span class="line">            <span class="attr">info</span>:<span class="string">&quot;You are my child!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dataFromChild = <span class="keyword">function</span>(<span class="params">info</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">message</span>:info</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;message,info&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">info</span> = <span class="string">&#123;info&#125;</span> <span class="attr">dataFromChild</span> = <span class="string">&#123;(message)</span>=&gt;</span> this.dataFromChild(message)&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong><em>子组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PropTypes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    sendDataToFather = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">dataFromChild</span>(<span class="number">555</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ([</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onClick</span> = <span class="string">&#123;()</span>=&gt;</span>&#123;this.sendDataToFather()&#125;&#125;&gt;&#123;this.props.info&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>&#123;this.props.info2&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ChildComponent</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="attr">info</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ChildComponent</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">    <span class="attr">info</span>:<span class="string">&quot;Tell me who are you!&quot;</span>,</span><br><span class="line">    <span class="attr">info2</span>:<span class="string">&quot;You are my Dad!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChildComponent</span></span><br></pre></td></tr></table></figure>
<p>注：各个地方函数的使用要注意，是否需要this，一般传递过去的函数都是箭头函数，调用的函数一般为function</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">ChildComponent</span> info = &#123;info&#125; dataFromChild = &#123;<span class="function">(<span class="params">message</span>)=&gt;</span> <span class="variable language_">this</span>.<span class="title function_">dataFromChild</span>(message)&#125;/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">info</span> = <span class="string">&#123;info&#125;</span> <span class="attr">dataFromChild</span> = <span class="string">&#123;this.dataFromChild&#125;/</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>如果直接传递，那么函数的调用由React确定就不知道this是啥</p>
<p>传递过去箭头函数，那么我们不关心什么时候调用这个箭头函数，而箭头函数包含的是隐式绑定的this，所以调用的函数需要function，要不然找不到this</p>
<h2 id="React中实现插槽"><a href="#React中实现插槽" class="headerlink" title="React中实现插槽"></a>React中实现插槽</h2><p>为了使组件具有更好的通用性，组件的内容不能限制为固定的div、span等，因此父组件传元素到子组件中，使得元素类型可以多变</p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230324214907031.png" alt="image-20230324214907031"></p>
<h3 id="通过组件的children子元素实现（父像子传元素）"><a href="#通过组件的children子元素实现（父像子传元素）" class="headerlink" title="通过组件的children子元素实现（父像子传元素）"></a>通过组件的children子元素实现（父像子传元素）</h3><p><strong><em>子组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;children&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;children[0]&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;children[1]&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;children[2]&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChildComponent</span></span><br></pre></td></tr></table></figure>
<p><strong><em>父组件代码1：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&quot;./component/ChildComponent&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ChildComponent</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><strong><em>结果：</em></strong></p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230324215146004.png" alt="image-20230324215146004"></p>
<p><strong><em>更改父组件的子元素</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">ChildComponent</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">ChildComponent</span>&gt;</span><br></pre></td></tr></table></figure>
<p><strong><em>结果：</em></strong></p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230324215351358.png" alt="image-20230324215351358"></p>
<h3 id="通过props实现插槽（父向子传元素）"><a href="#通过props实现插槽（父向子传元素）" class="headerlink" title="通过props实现插槽（父向子传元素）"></a>通过props实现插槽（父向子传元素）</h3><ul>
<li>上面描述过通过props传值到子元素，props可以传的值不仅仅有JavaScript对象，React对象也可以作为参数传过去</li>
<li>可以避免通过children获取时索引不能精准的获取传入的元素</li>
</ul>
<p><strong><em>父组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&quot;./component/ChildComponent&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> spanJSX = <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        <span class="keyword">const</span> iJSX = <span class="language-xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">        <span class="keyword">const</span> buttonJSX = <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">spanJSX</span>=<span class="string">&#123;spanJSX&#125;</span> <span class="attr">iJSX</span> = <span class="string">&#123;iJSX&#125;</span> <span class="attr">buttonJSX</span>=<span class="string">&#123;buttonJSX&#125;/</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><strong><em>子组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;spanJSX,iJSX,buttonJSX&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;spanJSX&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;iJSX&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;buttonJSX&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChildComponent</span></span><br></pre></td></tr></table></figure>
<p><strong><em>结果：</em></strong></p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230324220143962.png" alt="image-20230324220143962"></p>
<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><ul>
<li>上面两种插槽方法子组件接受到的都是有父组件写死的元素，但某些时候在子组件中需要根据状态更改组件的内容</li>
<li>所以需要实现元素类型父组件决定，数据或状态子组件决定</li>
<li>类似于这种由父组件子组件共同协作完成的，通常使用传递函数实现</li>
</ul>
<p><strong><em>父组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&quot;./component/ChildComponent&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">itemtyPE</span> = <span class="string">&#123;item</span>=&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#125;/&gt;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p>子组件代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;itemtyPE&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">const</span> message = <span class="string">&quot;哈哈哈&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;itemtyPE(message)&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChildComponent</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230325112140472.png" alt="image-20230325112140472"></p>
<h2 id="非直接父子组件的通信"><a href="#非直接父子组件的通信" class="headerlink" title="非直接父子组件的通信"></a>非直接父子组件的通信</h2><p><strong><em>常见方法：</em></strong></p>
<ul>
<li>通过props属性自上而下传递</li>
<li>但是对于某些数据需要在多个组件中共享（如地区、用户信息等等）</li>
<li>如果在顶层App定义这些信息，一层层传递下去，对于一些中间层不需要这些数据的组件来说，是一种冗余的<strong>操作</strong></li>
</ul>
<p><strong><em>Context方法：</em></strong></p>
<ul>
<li>context提供了一种在组件之间共享值的方法，而不必显示的通过树的逐层传递props</li>
<li>context的目的是共享对于组件树来说是“全局的数据”，如当前用户、主题</li>
</ul>
<h3 id="注册Context"><a href="#注册Context" class="headerlink" title="注册Context"></a>注册Context</h3><p>由于后续会在多个组件中用到这个Context1，所以将Context1的注册放到一个js文件中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context1</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Context1</span></span><br></pre></td></tr></table></figure>
<h3 id="Context值的设置"><a href="#Context值的设置" class="headerlink" title="Context值的设置"></a>Context值的设置</h3><p><strong><em>父组件设置：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&quot;./component/ChildComponent&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context1</span> <span class="keyword">from</span> <span class="string">&quot;./context/Context1&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 通过COntext1.Provider 包围要传递值的子组件，那么这个子组件及其后代组件都可以获取到传递的值</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Context1.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;color:</span>&quot;<span class="attr">red</span>&quot;,<span class="attr">size:18</span>&#125;&#125;&gt;</span>  </span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ChildComponent</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Context1.Provider</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<h3 id="Context值的获取"><a href="#Context值的获取" class="headerlink" title="Context值的获取"></a>Context值的获取</h3><p><strong><em>后代类组件Context值的获取：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context1</span> <span class="keyword">from</span> <span class="string">&#x27;../context/Context1&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GrandsonComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./GrandsonComponent&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:this.context.color&#125;&#125;</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">GrandsonComponent</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ChildComponent</span>.<span class="property">contextType</span> = <span class="title class_">Context1</span> <span class="comment">// 通过设置contextType为this.context指定Context，然后通过this.context获取值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChildComponent</span></span><br></pre></td></tr></table></figure>
<p><strong><em>后代函数组件Context值获取：</em></strong></p>
<p>由于函数组件中没有this，所以不能够使用上面类组件获取值的方法，使用Context.Consumer获取值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Context1</span> <span class="keyword">from</span> <span class="string">&quot;../context/Context1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">GrandsonFunComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Context1.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">                value=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                    return <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:value.color&#125;&#125;</span>&gt;</span>函数孙子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Context1.Consumer</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">GrandsonFunComponent</span></span><br></pre></td></tr></table></figure>
<h3 id="多个Context的注册与获取"><a href="#多个Context的注册与获取" class="headerlink" title="多个Context的注册与获取"></a>多个Context的注册与获取</h3><p><strong><em>注册第二个Context：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context2</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Context2</span></span><br></pre></td></tr></table></figure>
<p><strong><em>单组件设置多Context：</em></strong></p>
<p>父组件采用Context嵌套的方法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&quot;./component/ChildComponent&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context1</span> <span class="keyword">from</span> <span class="string">&quot;./context/Context1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context2</span> <span class="keyword">from</span> <span class="string">&quot;./context/Context2&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Context2.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;color:</span>&quot;<span class="attr">blue</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Context1.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;color:</span>&quot;<span class="attr">red</span>&quot;,<span class="attr">size:18</span>&#125;&#125;&gt;</span> </span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ChildComponent</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Context1.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Context2.Provider</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><strong><em>后代组件获取多Context：</em></strong></p>
<p>通过设置contextType与Context.Consumer组合获取多个Context</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context1</span> <span class="keyword">from</span> <span class="string">&#x27;../context/Context1&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context2</span> <span class="keyword">from</span> <span class="string">&#x27;../context/Context2&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GrandsonComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./GrandsonComponent&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GrandsonFunComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./GrandsonFunComponent&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:this.context.color&#125;&#125;</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Context2.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;</span></span><br><span class="line"><span class="language-xml">                        value=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                            return <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:value.color&#125;&#125;</span>&gt;</span>子组件2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        &#125;</span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Context2.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">GrandsonComponent</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">GrandsonFunComponent</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ChildComponent</span>.<span class="property">contextType</span> = <span class="title class_">Context1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChildComponent</span></span><br></pre></td></tr></table></figure>
<h3 id="Context默认值的使用"><a href="#Context默认值的使用" class="headerlink" title="Context默认值的使用"></a>Context默认值的使用</h3><p>使用了Context但不是Context.Provider的后代元素</p>
<p><strong><em>Context的注册（带默认值）：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context1</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;<span class="attr">color</span>:<span class="string">&quot;green&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Context1</span></span><br></pre></td></tr></table></figure>
<p><strong><em>Context的设置：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&quot;./component/ChildComponent&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context1</span> <span class="keyword">from</span> <span class="string">&quot;./context/Context1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context2</span> <span class="keyword">from</span> <span class="string">&quot;./context/Context2&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Context2.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;color:</span>&quot;<span class="attr">blue</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Context1.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;color:</span>&quot;<span class="attr">red</span>&quot;,<span class="attr">size:18</span>&#125;&#125;&gt;</span> </span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ChildComponent</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Context1.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Context2.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ChildComponent</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><strong><em>Context的获取：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context1</span> <span class="keyword">from</span> <span class="string">&#x27;../context/Context1&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context2</span> <span class="keyword">from</span> <span class="string">&#x27;../context/Context2&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GrandsonComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./GrandsonComponent&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GrandsonFunComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./GrandsonFunComponent&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:this.context.color&#125;&#125;</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">GrandsonComponent</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">GrandsonFunComponent</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ChildComponent</span>.<span class="property">contextType</span> = <span class="title class_">Context1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChildComponent</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230325122726808.png" alt="image-20230325122726808"></p>
<h2 id="任意组件之间的通信——事件总线（EventBus）"><a href="#任意组件之间的通信——事件总线（EventBus）" class="headerlink" title="任意组件之间的通信——事件总线（EventBus）"></a>任意组件之间的通信——事件总线（EventBus）</h2><p><a href>事件总线实现</a></p>
<h1 id="setState的细节原理"><a href="#setState的细节原理" class="headerlink" title="setState的细节原理"></a>setState的细节原理</h1><p><strong><em>为什么要setState：</em></strong>React没有数据劫持，直接更改this.state时，React不知道数据已经发生了变化，需要通过this.setState()来告知React数据发生了变化，需要刷新页面</p>
<h2 id="setState的异步-同步"><a href="#setState的异步-同步" class="headerlink" title="setState的异步/同步"></a>setState的异步/同步</h2><p>一般情况下，setSTate是异步的</p>
<p><strong><em>设置为异步的原因：</em></strong></p>
<ul>
<li>可以显著提升性能，如果每次调用setState都进行一次更新，那么render会频繁的调用，界面重新渲染，这样效率很低（可以联系到回流-重绘），因此设置为异步获取到数据的多次更新，之后批量更新</li>
<li>如果同步更新了state，但还没执行render函数，那么state与子组件的props不能保持同步，可能出现若干问题</li>
</ul>
<p><strong><em>setState批量更新方法</em></strong></p>
<ul>
<li>获取到一系列setState的更新值，按先后顺序把旧的state与新的state合并（添加新的属性、更新改变了的属性），在最后将合并好的state赋值给this.state并刷新到页面上（SCU优化）</li>
<li><strong><em>注意：</em></strong>先合并再赋值给this.state</li>
</ul>
<h3 id="异步结果的获取："><a href="#异步结果的获取：" class="headerlink" title="异步结果的获取："></a>异步结果的获取：</h3><p>既然是异步，那么我们便不知道更新啥时候结束，但有些时候又想在更新结束后进行一定的操作，这个操作应该在哪里进行？</p>
<h4 id="方法一：setState的回调函数"><a href="#方法一：setState的回调函数" class="headerlink" title="方法一：setState的回调函数"></a>方法一：setState的回调函数</h4><ul>
<li>setState接受两个参数：新的state+回调函数</li>
<li>回调执行顺序：render-&gt;componentDidUpdate（因此也可以在这个生命周期函数中对更新结束后的值操作）-&gt;setState回调</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">            <span class="attr">counter</span>:<span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">buttonClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">counter</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span> + <span class="number">1</span></span><br><span class="line">        &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setState回调&quot;</span>,<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">counter</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span> + <span class="number">1</span></span><br><span class="line">        &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setState回调&quot;</span>,<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">counter</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span> + <span class="number">1</span></span><br><span class="line">        &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setState回调&quot;</span>,<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">componentDidUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;componentDidUpdate&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;render&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> &#123; counter &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;counter&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.buttonClick()&#125;&#125;&gt;更新state<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230327111305434.png" alt="image-20230327111305434"></p>
<p>注：</p>
<ul>
<li>多次setState合并，一次render，一次componentDidUpdate，多次回调</li>
<li>这里多次一个提交了3次+1，但是最后结果只加了1，是因为this.state会在多次提交的state与原始state合并结束后再赋值给this.state，也就是这里获取到的this.state每次都是初始值3，相当于提交了3次 counter=4</li>
</ul>
<p><strong><em>this.setState的第一个参数也可以是一个函数：</em></strong></p>
<ul>
<li>返回值是要更改的值</li>
<li>参数是已经合并后的state而不是this.state</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">            <span class="attr">counter</span>:<span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">buttonClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeOut宏任务&quot;</span>)</span><br><span class="line">        &#125;,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise微任务&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setState&quot;</span>,state)</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">counter</span>:state.<span class="property">counter</span>+<span class="number">1</span>&#125;</span><br><span class="line">        &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setState回调&quot;</span>,<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">counter</span>:state.<span class="property">counter</span>+<span class="number">1</span>&#125;</span><br><span class="line">        &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setState回调&quot;</span>,<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">counter</span>:state.<span class="property">counter</span>+<span class="number">1</span>&#125;</span><br><span class="line">        &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setState回调&quot;</span>,<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">componentDidUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;componentDidUpdate&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;render&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> &#123; counter &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;counter&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.buttonClick()&#125;&#125;&gt;更新state<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p>执行顺序为：this.setState第一个参数函数-&gt;render-&gt;componentDidUpdate-&gt;this回调</p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230327112819884.png" alt="image-20230327112819884"></p>
<p>注：</p>
<ul>
<li>多次setState合并，一次render，一次componentDidUpdate，多次回调</li>
<li>setState函数执行、render、componentDidUpdate执行都是在微任务后，宏任务前，因此前面的函数应该都是放在微任务队列中</li>
<li>提交3次+1，最后得到的结果也和预期相同，因为将3次setState的第一个参数函数放入微任务队列中，在原来的state基础上进行更改，然后合并，得到新的state，在调用下一个微任务setState时，用前面合并好的state作为参数，再进行更改与合并操作</li>
<li>虽然setState中是在微任务中分3次调用，但setState的回调是在完成componentDidUpdate再放入微队列中，此时this.state已经更改为最后值，所以获取到的都是最后结果</li>
</ul>
<p><strong><em>回调的好处：</em></strong></p>
<ul>
<li>在数据更改后处理一些state的逻辑</li>
<li>回调函数会把之前的state和props传入进来</li>
<li>由于setState是一个异步函数，所以对更新后值的处理要放入回调中</li>
</ul>
<h4 id="方法二：组件的生命周期函数componentDidUpdate"><a href="#方法二：组件的生命周期函数componentDidUpdate" class="headerlink" title="方法二：组件的生命周期函数componentDidUpdate"></a>方法二：组件的生命周期函数componentDidUpdate</h4><p>上面已讲</p>
<h3 id="setState的同步"><a href="#setState的同步" class="headerlink" title="setState的同步"></a>setState的同步</h3><ul>
<li>React18之前，在组件生命周期和React合成事件中，setState是异步</li>
<li>React18之前，在setTimeout或者原生dom事件中，setState是同步</li>
</ul>
<p>注：</p>
<ul>
<li>由React去决定运行时机的大多是异步</li>
<li>由setTimeout/或者原生Dom的响应函数中调用这种用户编写决定运行时机的一般是同步</li>
</ul>
<p><strong><em>React18之后，setState默认都是异步的</em></strong></p>
<h4 id="React18之后获取同步的setState"><a href="#React18之后获取同步的setState" class="headerlink" title="React18之后获取同步的setState"></a>React18之后获取同步的setState</h4><p>使用特殊的flushSync操作</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;flushSync&#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">            <span class="attr">counter</span>:<span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">buttonClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeOut宏任务&quot;</span>)</span><br><span class="line">        &#125;,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise微任务&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="title function_">flushSync</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setState&quot;</span>,state)</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">counter</span>:state.<span class="property">counter</span>+<span class="number">1</span>&#125;</span><br><span class="line">            &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setState回调&quot;</span>,<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">counter</span>:state.<span class="property">counter</span>+<span class="number">1</span>&#125;</span><br><span class="line">        &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setState回调&quot;</span>,<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">counter</span>:state.<span class="property">counter</span>+<span class="number">1</span>&#125;</span><br><span class="line">        &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setState回调&quot;</span>,<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">componentDidUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;componentDidUpdate&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;render&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> &#123; counter &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;counter&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.buttonClick()&#125;&#125;&gt;更新state<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230327114712050.png" alt="image-20230327114712050"></p>
<p>可以看到使用flushSync中的setState在微任务执行之前就已经运行，说明flushSync确实将setState更改为同步方式运行</p>
<h1 id="React的SCU优化"><a href="#React的SCU优化" class="headerlink" title="React的SCU优化"></a>React的SCU优化</h1><h2 id="React更新机制"><a href="#React更新机制" class="headerlink" title="React更新机制"></a>React更新机制</h2><p><strong><em>React渲染流程：</em></strong></p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230327115317127.png" alt="image-20230327115317127"></p>
<p><strong><em>React更新流程：</em></strong></p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230327120054249.png" alt="image-20230327120054249">                                                                                                                                                                                                                                                                                                                                            </p>
<p><strong>React在props或state发生改变时，会调用React的render方法，会创建一颗新树，React会基于新树与旧树的不同去判断如何有效的更新UI</strong></p>
<ul>
<li>如果两棵树进行完全比较更新，算法的时间复杂度为O(n^3)，n为树中元素的数量，开销太大，React的更新性能会变得低效</li>
</ul>
<h3 id="React对diff算法的优化："><a href="#React对diff算法的优化：" class="headerlink" title="React对diff算法的优化："></a>React对diff算法的优化：</h3><ul>
<li>同层节点之间相互比较，不会跨节点比较</li>
<li>不同类型的节点，产生不同的树结构</li>
<li>开发中，通过key来指定哪些节点在不同的渲染下保持稳定</li>
</ul>
<p><strong><em>keys的优化：</em></strong></p>
<ul>
<li>在最后位置插入数据，有无key意义不大</li>
<li>在前面插入数据，没有key，所有的li都需要更改，有key，后续的li只需要移动</li>
</ul>
<p><strong><em>key的注意事项：</em></strong></p>
<ul>
<li>key应该是唯一的</li>
<li>key不能使用随机数，每次render的随机数不同</li>
<li>不能使用index作为key，index在操作后也可能会改变，要使用一个不会随render改变的值</li>
</ul>
<h2 id="shouldComponentUpdate优化（即SCU优化）"><a href="#shouldComponentUpdate优化（即SCU优化）" class="headerlink" title="shouldComponentUpdate优化（即SCU优化）"></a>shouldComponentUpdate优化（即SCU优化）</h2><p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230327121337396.png" alt="image-20230327121337396"></p>
<ul>
<li>在上图中，如果App中值发生了改变，那么App的render函数会重新执行，而在App的执行过程中，会执行其所有子组件的render函数，都进行diff算法，性能很低</li>
<li>子组件调用render函数应该有一个前提——依赖的数据state/props发生改变，此时才调用render函数</li>
</ul>
<h3 id="shouldComponentUpdate函数"><a href="#shouldComponentUpdate函数" class="headerlink" title="shouldComponentUpdate函数"></a>shouldComponentUpdate函数</h3><ul>
<li>参数：nextProps（修改后的pros）、nextState（修改之后的state）</li>
<li>返回值：true（调用render方法）、false（不调用render方法）、默认返回true（只要state改变就会调用render方法）</li>
</ul>
<p>在值发生变化时，就可以在shouldComponentUpdate监听自己的state和props是否发生变化从而觉得是否进行render</p>
<h3 id="类组件PureComponent"><a href="#类组件PureComponent" class="headerlink" title="类组件PureComponent"></a>类组件PureComponent</h3><p>继承自PureComponent自动实现了SCU优化，不需要自己去编写shouldComponentUpdate函数</p>
<p>如果使用Component，只要调用setState就会执行render函数，而PureComponent会帮我们实现比较setState后state是否改变，如果改变才执行render</p>
<h4 id="不可变数据的力量"><a href="#不可变数据的力量" class="headerlink" title="不可变数据的力量"></a>不可变数据的力量</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;flushSync&#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">            <span class="attr">books</span>:[</span><br><span class="line">                &#123;<span class="attr">name</span>:<span class="string">&quot;aaa&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">name</span>:<span class="string">&quot;bbb&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">name</span>:<span class="string">&quot;ccc&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">name</span>:<span class="string">&quot;ddd&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addNewBook</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> newBook = &#123;<span class="attr">name</span>:<span class="string">&quot;eee&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;render&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> &#123; books &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;books.map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                        return(</span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>name:&#123;item.name&#125;-count:&#123;item.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        )</span></span><br><span class="line"><span class="language-xml">                    &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span>=&gt;</span>this.addNewBook()&#125;&gt;添加新书<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p>上述在setState中没进行任何操作，但render依然会执行，而改成PureComponent时不会执行</p>
<p><strong><em>PureComponent中render执行要求：</em></strong></p>
<ul>
<li>PureComponent在比较时底层会使用shallowEqual方法，shallowEqual是一种浅层比较，如果比较的两个对象是同一个，则不会调用render，即使this.state发生了改变，也不会调用render</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">        <span class="attr">books</span>:[</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&quot;aaa&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&quot;bbb&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&quot;ccc&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&quot;ddd&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addNewBook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> newBook = &#123;<span class="attr">name</span>:<span class="string">&quot;eee&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">books</span>.<span class="title function_">push</span>(newBook)</span><br><span class="line">    <span class="keyword">const</span> books = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">books</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">books</span>:books</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果要想在这种情况下调用render，可以利用books创建一个新的对象，用这个对象去更改state，在这种情况下，即使未更改this.state的，也会调用render</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">        <span class="attr">books</span>:[</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&quot;aaa&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&quot;bbb&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&quot;ccc&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&quot;ddd&quot;</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addNewBook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> books = [...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">books</span>]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">books</span>:books</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数组件memo"><a href="#函数组件memo" class="headerlink" title="函数组件memo"></a>函数组件memo</h3><p>函数由于不能继承于PureComponent，可以使用memo替代，即用memo包裹原来的函数组件</p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230327131630892.png" alt="image-20230327131630892"></p>
<h1 id="获取原生DOM或获取组件"><a href="#获取原生DOM或获取组件" class="headerlink" title="获取原生DOM或获取组件"></a>获取原生DOM或获取组件</h1><p>在React的开发模式中，通常情况下不需要、也不建议直接操作DOM原生，但是某些特殊的情况，确实需要获取到DOM进行某些操作：</p>
<ul>
<li>管理焦点，文本选择或媒体播放； </li>
<li>触发强制动画； </li>
<li>集成第三方  DOM 库； </li>
<li>我们可以通过refs获取DOM；</li>
</ul>
<h2 id="通过refs获取DOM的方式："><a href="#通过refs获取DOM的方式：" class="headerlink" title="通过refs获取DOM的方式："></a>通过refs获取DOM的方式：</h2><ul>
<li><strong><em>传入字符串：</em></strong>使用时通过 this.refs.传入的字符串 格式获取对应的元素</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addNewBook</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">button</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span>=&gt;</span>this.addNewBook()&#125; ref=&quot;button&quot;&gt;查看DOM<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong><em>传入一个对象：</em></strong>通过React.createRef()方式创建一个对象，使用使用对象的current属性来访问DOM</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">titleRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addNewBook</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">titleRef</span>.<span class="property">current</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span>=&gt;</span>this.addNewBook()&#125; ref=&#123;this.titleRef&#125;&gt;查看DOM<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong><em>传入一个函数：</em></strong>该函数会在DOM被挂载时回调，回调函数会传入一个元素对象，我们可以访问并保存</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">titleRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;(e)</span>=&gt;</span>&#123;console.log(e)&#125;&#125;&gt;查看DOM<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<h2 id="通过refs获取组件的方式："><a href="#通过refs获取组件的方式：" class="headerlink" title="通过refs获取组件的方式："></a>通过refs获取组件的方式：</h2><p><strong><em>针对类组件：</em></strong></p>
<ul>
<li>上面的ref同样可以加在子组件上，获取得到子组件的实例，就可以在父组件中获取子组件对子组件的函数、变量进行操作</li>
</ul>
<p><strong><em>针对函数组件：</em></strong></p>
<ul>
<li>函数组件由于没有实例，是不可能获取到它的</li>
<li>但是在某些情况，想获取得到函数实例中的某个DOM元素，可以使用foreardRef</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; forwardRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HelloWorld</span> = <span class="title function_">forwardRef</span>(<span class="keyword">function</span>(<span class="params">props, ref</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">HelloWorldRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">ref</span> = <span class="string">&#123;this.HelloWorldRef&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;console.log(this.HelloWorldRef.current)&#125;&#125;&gt;查看DOM<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<h1 id="受控组件与非受控组件"><a href="#受控组件与非受控组件" class="headerlink" title="受控组件与非受控组件"></a>受控组件与非受控组件</h1><ul>
<li>HTML中，表单元素（input、textarea、select）通常会自己维护state并根据用户的输入进行更新</li>
<li>React中，可变状态通常保存在组件的state属性中，并且只能通过setState来更新</li>
<li>在JSX中，如果给表单元素设置了value属性，显示this.state.value的值，那么表单元素就不会自己维护state，其state来源于React的state，因此当设置了value属性后，input元素输入后输入框里的东西不会变化，相当于未输入</li>
<li>此时只能给input元素添加onChange(e)监听，从而在监听函数中使用输入的值在setState中更改value的值，使得页面刷新</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; forwardRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&quot;oww&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inputChange</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">username</span>:e.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&#123;username&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>=&gt;</span>&#123;this.inputChange(e)&#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<h2 id="计算属性名"><a href="#计算属性名" class="headerlink" title="计算属性名"></a>计算属性名</h2><p>当对多个表单元素变成受控元素时，其更新需要多个监听，此时可用计算属性名将这些监听抽取到一个函数中</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; forwardRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&quot;oww&quot;</span>,</span><br><span class="line">            <span class="attr">password</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inputChange</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[e.<span class="property">target</span>.<span class="property">name</span>]:e.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;username&#125;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>=&gt;</span>&#123;this.inputChange(e)&#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;password&#125;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>=&gt;</span>&#123;this.inputChange(e)&#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<h2 id="checkbox表单多选监听"><a href="#checkbox表单多选监听" class="headerlink" title="checkbox表单多选监听"></a>checkbox表单多选监听</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">            <span class="attr">hobbies</span>:[</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&quot;sing&quot;</span>,<span class="attr">text</span>:<span class="string">&quot;唱&quot;</span>,<span class="attr">checked</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&quot;jump&quot;</span>,<span class="attr">text</span>:<span class="string">&quot;跳&quot;</span>,<span class="attr">checked</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&quot;rap&quot;</span>,<span class="attr">text</span>:<span class="string">&quot;rap&quot;</span>,<span class="attr">checked</span>:<span class="literal">false</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inputChange</span>(<span class="params">e,index</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> hobbies = [...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">hobbies</span>]</span><br><span class="line">        hobbies[index].<span class="property">checked</span> = e.<span class="property">target</span>.<span class="property">checked</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">hobbies</span>:hobbies</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;hobbies&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>爱好列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;hobbies.map((item, index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                    return (</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&#123;item.id&#125;</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>= <span class="string">&#123;item.id&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;item.checked&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>=&gt;</span>this.inputChange(e,index)&#125;/&gt;&#123;item.text&#125;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    )</span></span><br><span class="line"><span class="language-xml">                &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<h2 id="select多选"><a href="#select多选" class="headerlink" title="select多选"></a>select多选</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">            <span class="attr">fruits</span>:[</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&quot;apple&quot;</span>,<span class="attr">text</span>:<span class="string">&quot;苹果&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&quot;banana&quot;</span>,<span class="attr">text</span>:<span class="string">&quot;香蕉&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&quot;orange&quot;</span>,<span class="attr">text</span>:<span class="string">&quot;橘子&quot;</span>&#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">checked</span>:[<span class="string">&quot;apple&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">selectChange</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> checked = <span class="title class_">Array</span>.<span class="title function_">from</span>(e.<span class="property">target</span>.<span class="property">selectedOptions</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">value</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">checked</span>:checked</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;fruits,checked&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>爱好列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span> <span class="attr">value</span>=<span class="string">&#123;checked&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>this.selectChange(e)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                    &#123;fruits.map(item=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#123;item.id&#125;</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<h1 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h1><p><strong><em>高阶函数：</em></strong>满足下列一个条件</p>
<ul>
<li>接受一个函数或多个函数作为输入</li>
<li>输出一个函数</li>
</ul>
<p><strong><em>高阶组件（Higher-Order Components、HOC）：</em></strong></p>
<ul>
<li>高阶组件的参数为组件，返回值为新组件的函数</li>
<li>高阶组件本身不是一个组件，而是一个函数</li>
</ul>
<p><strong><em>高阶组件不是React的API，而是基于React组合特性而形成的一种设计模式</em></strong></p>
<h2 id="高阶组件应用——props的增强"><a href="#高阶组件应用——props的增强" class="headerlink" title="高阶组件应用——props的增强"></a>高阶组件应用——props的增强</h2><p><strong><em>HOC代码：</em></strong>高阶函数包裹代码</p>
<p>例如本代码可以将用户信息封装传给子组件，不需要像上面的父向子传值，在子组件中写其他代码</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enhanceProps</span>(<span class="params">WrapperCpn, otherProps</span>)&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UserComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span>&#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">super</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">                <span class="attr">userinfo</span>:&#123;</span><br><span class="line">                    <span class="attr">username</span>:<span class="string">&quot;ouwenwu&quot;</span>,</span><br><span class="line">                    <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrapperCpn</span> &#123;<span class="attr">...this.state.userinfo</span>&#125; &#123;<span class="attr">...otherProps</span>&#125;/&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">UserComponent</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> enhanceProps</span><br></pre></td></tr></table></figure>
<p><strong><em>父组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&quot;./component/ChildComponent&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> enhanceProps <span class="keyword">from</span> <span class="string">&quot;./HOC/HOC&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">EnhancePropsCpn</span> = <span class="title function_">enhanceProps</span>(<span class="title class_">ChildComponent</span>,&#123;<span class="attr">color</span>:<span class="string">&quot;blue&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">EnhancePropsCpn</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><strong><em>子组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:this.props.color&#125;&#125;</span>&gt;</span>username:&#123;this.props.username&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChildComponent</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230327211035646.png" alt="image-20230327211035646"></p>
<h2 id="高阶组件应用——Context的共享"><a href="#高阶组件应用——Context的共享" class="headerlink" title="高阶组件应用——Context的共享"></a>高阶组件应用——Context的共享</h2><p><strong><em>HOC代码：</em></strong>HOC可以返回类组件也可以返回函数组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context1</span> <span class="keyword">from</span> <span class="string">&quot;../context/Context1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enhanceProps</span>(<span class="params">WrapperCpn</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">props</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Context1.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                    value=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">WrapperCpn</span> &#123;<span class="attr">...value</span>&#125; &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Context1.Consumer</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> enhanceProps</span><br></pre></td></tr></table></figure>
<p><strong><em>父组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&quot;./component/ChildComponent&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context1</span> <span class="keyword">from</span> <span class="string">&quot;./context/Context1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> enhanceProps <span class="keyword">from</span> <span class="string">&quot;./HOC/HOC&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">EnhancePropsCpn</span> = <span class="title function_">enhanceProps</span>(<span class="title class_">ChildComponent</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Context1.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;color:</span>&quot;<span class="attr">red</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">EnhancePropsCpn</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Context1.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><strong><em>子组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:this.props.color&#125;&#125;</span>&gt;</span>username:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChildComponent</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230327212419080.png" alt="image-20230327212419080"></p>
<p>注：可以看出对Context不再需要在每一个子组件中写之前提到的获取Context的方法，只需要将所有需要该Context的子组件包裹在高阶组件之中</p>
<h2 id="高阶组件应用——渲染判断定权"><a href="#高阶组件应用——渲染判断定权" class="headerlink" title="高阶组件应用——渲染判断定权"></a>高阶组件应用——渲染判断定权</h2><p>与上面的主要差距为，会对传入的参数进行判断来决定返回哪个子组件</p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230327212646566.png" alt="image-20230327212646566"></p>
<h2 id="高阶组件应用——生命周期劫持"><a href="#高阶组件应用——生命周期劫持" class="headerlink" title="高阶组件应用——生命周期劫持"></a>高阶组件应用——生命周期劫持</h2><p>在高阶组件中劫持子组件的生命周期，在自己的生命周期中完成逻辑</p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20230327212743063.png" alt="image-20230327212743063"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>高阶组件的主要作用是提高代码的复用性。提高组件之间的复用</p>
<p><strong><em>缺陷：</em></strong></p>
<ul>
<li>HOC需要在原组件上进行包裹或者嵌套，如果大量使用HOC，将产生非常多的嵌套</li>
<li>HOC可以劫持props，在不遵从约定的情况下可能造成冲突</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React中的CSS</title>
    <url>/2023/03/28/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E4%B8%AD%E7%9A%84CSS/</url>
    <content><![CDATA[<h1 id="React中的过渡动画"><a href="#React中的过渡动画" class="headerlink" title="React中的过渡动画"></a>React中的过渡动画</h1><ul>
<li><strong><em>动画插件：react-transition-group</em></strong></li>
<li><strong><em>npm install react-transition-group —save</em></strong></li>
</ul>
<h2 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h2><p>与框架无关，常见的CSS动画使用方法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.start</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">   	<span class="attribute">left</span>:<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.end</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">transition</span><span class="selector-pseudo">:left</span> <span class="number">1s</span> ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CSSTransition"><a href="#CSSTransition" class="headerlink" title="CSSTransition"></a>CSSTransition</h2><p><strong><em>CSSTransition具有三种状态</em></strong></p>
<ul>
<li>开始状态，对应的类是-appear、-enter、-exit</li>
<li>执行动画，对应的类是-appera-active、-enter-active、-exit-active</li>
<li>执行结束，对应的类是-appera-done、-enter-done、-exit-done</li>
</ul>
<p><strong><em>CSSTransition常见属性：</em></strong></p>
<ul>
<li><p><strong>in：</strong>触发进入或退出状态</p>
<ul>
<li>如果添加了unmountOnExit={true}，那么该组件会在执行退出动画结束后被移除掉</li>
<li>当in为true时，触发进入状态，会添加-enter、-enter-acitve的class开始执行动画，当动画执行结束后，会移除两个class， 并且添加-enter-done的class</li>
<li>当in为false时，触发退出状态，会添加-exit、-exit-active的class开始执行动画，当动画执行结束后，会移除两个class，并 且添加-enter-done的class</li>
</ul>
</li>
<li><p><strong>classNames：</strong>动画class的名称</p>
<ul>
<li>决定了在编写css时，对应的class名称：比如card-enter、card-enter-active、card-enter-done</li>
</ul>
</li>
<li><p><strong>timeout：</strong>动画过渡的时间，指的是动画执行后添加-enter-done的时间，动画真实执行时间由transition决定</p>
</li>
<li><p><strong>appear：</strong>是否在初次进入添加动画（appear和in都要为true、同时要设置-appear类）</p>
</li>
<li><p><strong>CSSTransition的钩子函数：</strong></p>
<ul>
<li>onEnter：在进入动画之前触发</li>
<li>OnEntering：在进入动画时触发</li>
<li>OnEntered：在应用进入动画结束时触发</li>
<li>……</li>
</ul>
</li>
</ul>
<p><strong><em>css代码：</em></strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*设置初始状态，不发生动画的状态，可以用appear的三个类替代*/</span></span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2show-enter</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2show-enter-active</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">2s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*不设置done那么在动画执行完成那一刻会立即恢复到之前的状态，看是否需要恢复编写此类*/</span></span><br><span class="line"><span class="selector-class">.h2show-enter-done</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2show-exit</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2show-exit-active</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">2s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*不设置done那么在动画执行完成那一刻会立即恢复到之前的状态，看是否需要恢复编写此类*/</span></span><br><span class="line"><span class="selector-class">.h2show-exit-done</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>jsx代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CSSTransition</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-transition-group&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span></span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">            <span class="attr">isShow</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">isShow</span>:!<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isShow</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;isShow&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(isShow)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.change()&#125;&#125;&gt;变化<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">CSSTransition</span> <span class="attr">in</span>=<span class="string">&#123;isShow&#125;</span> <span class="attr">classNames</span>=<span class="string">&quot;h2show&quot;</span> <span class="attr">timeout</span>=<span class="string">&#123;2000&#125;</span> <span class="attr">unmountOnExit</span>=<span class="string">&#123;true&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<h2 id="SwitchTransition"><a href="#SwitchTransition" class="headerlink" title="SwitchTransition"></a>SwitchTransition</h2><ul>
<li><p><strong><em>控件两种状态之间的切换：</em></strong>on和off指定两种状态</p>
</li>
<li><p><strong><em>mode属性：</em></strong></p>
<ul>
<li><p>in-out：新组件先进入，旧组件再移除</p>
</li>
<li><p>out-in：旧组件先移除，新组件再进入</p>
</li>
</ul>
</li>
<li><p>SwitchTransition组件里面要有CSSTransition或者Transition组件，不能直接包裹要切换的组件</p>
</li>
<li>SwitchTransition里面的CSSTransition或Tasnsition组件不再像之前那样接受属性来判断元素状态，取而代之的是<strong>key属性</strong></li>
</ul>
<p><strong><em>css代码：</em></strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2show-enter</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2show-enter-active</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">2s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2show-enter-done</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2show-exit</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2show-exit-active</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">2s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2show-exit-done</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>起始状态可以没有，那么刚开始就是默认状态</li>
<li>out-in模式：先制性exit代码，再执行enter代码，没有h2show-enter-done，动画执行结束会回归初始状态，可以没有h2show-exit-done</li>
<li>in-out模式：先执行enter代码，再执行exit代码，没有h2show-exit-done，动画结束会回归初始状态，可以没有h2show-enter-done</li>
</ul>
<p><strong><em>jsx代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CSSTransition</span>,<span class="title class_">SwitchTransition</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-transition-group&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span></span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> =&#123;</span><br><span class="line">            <span class="attr">isShow</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nodeRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">isShow</span>:!<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isShow</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;isShow&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(isShow)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.change()&#125;&#125;&gt;变化<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">SwitchTransition</span> <span class="attr">mode</span>=<span class="string">&quot;in-out&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">CSSTransition</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">nodeRef</span> = <span class="string">&#123;this.nodeRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">key</span>=<span class="string">&#123;isShow?</span>&quot;<span class="attr">exit</span>&quot;<span class="attr">:</span>&quot;<span class="attr">login</span>&quot;&#125; </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">classNames</span>=<span class="string">&quot;h2show&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">timeout</span>=<span class="string">&#123;2000&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">ref</span>=<span class="string">&#123;this.nodeRef&#125;</span>&gt;</span>&#123;isShow?&quot;哈哈哈&quot;:&quot;哈你妹&quot;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">SwitchTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><strong><em>TransitionGroup：</em></strong></p>
<ul>
<li>有一组动画时，可以将这些CSSTransition放入到TransitionGroup中</li>
</ul>
<p><strong>有些搞不懂，官网看教程吧</strong></p>
<h1 id="React中CSS的编写"><a href="#React中CSS的编写" class="headerlink" title="React中CSS的编写"></a>React中CSS的编写</h1><p><strong><em>CSS组件化！！！：</em></strong></p>
<ul>
<li><strong>可以编写局部css：</strong>css具备自己的局部作用域，不会污染其他组件的元素</li>
<li><strong>可以编写动态css：</strong>可以获取当前组件的一些状态，根据状态生成不同的css样式</li>
<li><strong>支持所有的css特性：</strong>伪类、动画、媒体查询等</li>
<li>编写起来简单方便，符合一贯的css风格特点</li>
</ul>
<h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><ul>
<li>style接受小驼峰命名属性的JavaScript对象，而不是字符串</li>
<li>可以接受state中的状态来设置相关的格式</li>
</ul>
<p><strong><em>内联样式优点：</em></strong></p>
<ul>
<li>样式之间不会有冲突</li>
<li>可以动态获取当前state中的状态</li>
</ul>
<p><strong><em>内联样式缺点：</em></strong></p>
<ul>
<li>都需要驼峰标识</li>
<li>某些样式没有提示</li>
<li>大量样式，代码混乱</li>
<li>某些样式无法编写，比如伪类/伪元素</li>
</ul>
<h2 id="普通CSS"><a href="#普通CSS" class="headerlink" title="普通CSS"></a>普通CSS</h2><ul>
<li><p>将CSS编写到一个单独的文件，之后进行引入</p>
</li>
<li><p>和普通网页开发中的编写方式一致</p>
<ul>
<li><p>按照普通的网页标准去写，那么不会有太大的问题</p>
</li>
<li><p>但是组件化开发中我们总是希望组件是一个独立的模块，样式只在自己内部生效，不会相互影响</p>
</li>
<li>但是普通的CSS都属于全局的CSS，样式组件会相互影响</li>
</ul>
</li>
<li><p>这种编写方式的最大问题是样式之间会相互层叠掉</p>
</li>
</ul>
<h2 id="CSS-modules"><a href="#CSS-modules" class="headerlink" title="CSS modules"></a>CSS modules</h2><ul>
<li>将.css文件修改为.module.css看就可以引用并且局部使用</li>
<li>但是类名不能使用(.home-title)，因为JavaScript不识别-</li>
<li>所有的className都必须使用{style.className}的形式来编写</li>
<li>不方便动态的修改某些样式，依然需要使用内联样式的方式</li>
</ul>
<h2 id="CSS-in-Js"><a href="#CSS-in-Js" class="headerlink" title="CSS in Js"></a>CSS in Js</h2><p><strong><em>CSS in Js是一种模式，其中CSS有javaScript生成而不是在外部文件中定义</em></strong></p>
<ul>
<li>传统的前端开发中，HTML、CSS、JavaScript通常分类</li>
<li>React认为逻辑和UI是无法分离的，所以才会有了JSX的语法</li>
<li>JSX是Html in Js，加上CSS in Js在完整的体现的逻辑和UI无法分离，因此React被称为All in JS</li>
</ul>
<p><strong><em>CSS in JS库：styled-components：</em></strong></p>
<ul>
<li>CSS-in-JS使用JavaScript为CSS赋予一些能力，可以类似于CSS预处理器一样的样式嵌套、函数定义、逻辑复用、动态修改</li>
<li>CSS预处理器也具备某些能力，但获取动态状态依然是一个不好处理的点</li>
</ul>
<h3 id="ES6标签模板字符串"><a href="#ES6标签模板字符串" class="headerlink" title="ES6标签模板字符串"></a>ES6标签模板字符串</h3><p><img src="/2023/03/28/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E4%B8%AD%E7%9A%84CSS/image-20230329161529306.png" alt="image-20230329161529306"></p>
<p>即函数可以通过字符串的方式来调用</p>
<ul>
<li>第一个参数是数组，是被模块字符串拆分后的组合</li>
<li>后面的元素是一个个模块字符串传入的内容</li>
<li>注意是反引号</li>
</ul>
<h3 id="styled-components的使用"><a href="#styled-components的使用" class="headerlink" title="styled-components的使用"></a>styled-components的使用</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p><strong><em>jsx代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppWrapper</span>, <span class="title class_">StrongWrapper</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">AppWrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">StrongWrapper</span>&gt;</span>我是strong<span class="tag">&lt;/<span class="name">StrongWrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;context&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>嘿嘿嘿<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;context1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>嗯嗯嗯<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">AppWrapper</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><strong><em>style.js代码：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AppWrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  .container&gt;span&#123;</span></span><br><span class="line"><span class="string">    width:100%;</span></span><br><span class="line"><span class="string">    color: red;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .container&#123;</span></span><br><span class="line"><span class="string">    .context1&#123;</span></span><br><span class="line"><span class="string">      color: orange;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .container .context&#123;</span></span><br><span class="line"><span class="string">    color: blue;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .container .context:hover&#123;</span></span><br><span class="line"><span class="string">    color: #cccc;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  &amp;:hover&#123;</span></span><br><span class="line"><span class="string">    text-decoration: line-through;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">StrongWrapper</span> =styled.<span class="property">strong</span><span class="string">`</span></span><br><span class="line"><span class="string">  color:skyblue</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>
<ul>
<li>样式js的命名不能和组件名称相同，例如不能用App.js</li>
<li>可以像正常CSS一样编写CSS代码</li>
<li>可以用&amp;来获取当前元素</li>
<li>可以通过设置styled.__来设置包裹的类型</li>
<li>styled返回的是一个组件，可以按照组件的方法使用</li>
</ul>
<h4 id="props-attrs属性"><a href="#props-attrs属性" class="headerlink" title="props\attrs属性"></a>props\attrs属性</h4><ul>
<li>获取props需要通过${}传入一个插值函数，props会作为该函数的参数； </li>
<li>这种方式可以有效的解决动态样式的问题</li>
</ul>
<p><strong><em>CSS代码：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AppWrapper</span> = styled.<span class="property">div</span>.<span class="title function_">attrs</span>(&#123;</span><br><span class="line">  <span class="attr">tcolor</span>:<span class="function"><span class="params">props</span>=&gt;</span>(props.<span class="property">color</span>||<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">&#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  .container&#123;</span></span><br><span class="line"><span class="string">    width:100%;</span></span><br><span class="line"><span class="string">    color: <span class="subst">$&#123;props=&gt;&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">      <span class="keyword">return</span> props.tcolor</span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p><strong><em>jsx代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Children</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppWrapper</span>, <span class="title class_">StrongWrapper</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">checked</span>:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;checked&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">AppWrapper</span> <span class="attr">color</span>=<span class="string">&#123;checked?</span>&quot;<span class="attr">red</span>&quot;<span class="attr">:</span>&quot;&quot;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.setState(&#123;checked:!this.state.checked&#125;)&#125;&#125;&gt;改变颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">AppWrapper</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>tcolor不能与color同名，要不然会循环拿取</li>
<li>tcolor传入的是一个函数，括号可以省略，会自动调用生成值</li>
<li>tcolor:props=&gt;(props.color||”blue”)是为了处理不传值时给定默认值，没有默认值时可以在下面直接取</li>
</ul>
<h4 id="styled的继承"><a href="#styled的继承" class="headerlink" title="styled的继承"></a>styled的继承</h4><p><strong><em>CSS代码：</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AppWrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Button1</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  border-radius: 5px;</span></span><br><span class="line"><span class="string">  border:1px solid red;</span></span><br><span class="line"><span class="string">  background-color: gray;</span></span><br><span class="line"><span class="string">  opacity: 0.5;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Button2</span> = <span class="title function_">styled</span>(<span class="title class_">Button1</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  color: skyblue;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p><strong><em>jsx代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Children</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppWrapper</span>, <span class="title class_">Button1</span>, <span class="title class_">Button2</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="comment">//编写组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">AppWrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Button1</span>&gt;</span>父Button<span class="tag">&lt;/<span class="name">Button1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Button2</span>&gt;</span>子Button<span class="tag">&lt;/<span class="name">Button2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">AppWrapper</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/28/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E4%B8%AD%E7%9A%84CSS/image-20230329184407490.png" alt="image-20230329184407490"></p>
<p><img src="/2023/03/28/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/React%E4%B8%AD%E7%9A%84CSS/image-20230329184548981.png" alt="image-20230329184548981"></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery</title>
    <url>/2023/03/22/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/jquery/</url>
    <content><![CDATA[<h1 id="jQuery是一个快速、小型且功能丰富的JavaScript"><a href="#jQuery是一个快速、小型且功能丰富的JavaScript" class="headerlink" title="jQuery是一个快速、小型且功能丰富的JavaScript"></a>jQuery是一个快速、小型且功能丰富的JavaScript</h1><p>优点：丰富的功能（DOM操作、过滤器、时间、动画、Ajax等）、编写更少可读的代码提高开发人员的工作效率、跨浏览器支持（IE9+）</p>
<p>缺点：jQuery代码库一直在增长（jQuery1.5超过200KB）、不支持组件化开发、jQuery更适合组件化开发，当涉及到复杂的项目时，能力有限</p>
<h2 id="jQuery使用"><a href="#jQuery使用" class="headerlink" title="jQuery使用"></a>jQuery使用</h2><h3 id="jQuery监听文档加载"><a href="#jQuery监听文档加载" class="headerlink" title="jQuery监听文档加载"></a>jQuery监听文档加载</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$( <span class="variable language_">document</span> ).<span class="title function_">ready</span>( handler )  ：  <span class="comment">//deprecated </span></span><br><span class="line">$( <span class="string">&quot;document&quot;</span> ).<span class="title function_">ready</span>( handler ) ：  <span class="comment">//deprecated </span></span><br><span class="line">$().<span class="title function_">ready</span>( handler ) ：<span class="comment">//deprecated </span></span><br><span class="line">$( handler ) ：<span class="comment">//推荐用这种写法，其它可以使用但是不推荐</span></span><br></pre></td></tr></table></figure>
<h3 id="jQuery与其他库变量名冲突（jQuery别名-的冲突）"><a href="#jQuery与其他库变量名冲突（jQuery别名-的冲突）" class="headerlink" title="jQuery与其他库变量名冲突（jQuery别名$的冲突）"></a>jQuery与其他库变量名冲突（jQuery别名$的冲突）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="title function_">noConflict</span>()</span><br></pre></td></tr></table></figure>
<h3 id="jQuery对象（类数组对象——可通过索引访问）"><a href="#jQuery对象（类数组对象——可通过索引访问）" class="headerlink" title="jQuery对象（类数组对象——可通过索引访问）"></a>jQuery对象（类数组对象——可通过索引访问）</h3><ul>
<li>如果传入假值：返回一个空的集合。 </li>
<li>如果传入选择器：返回在在documnet中所匹配到元素的集合。 </li>
<li>如果传入元素：返回包含该元素的集合。 </li>
<li>如果传入HTML字符串，返回包含新创建元素的集合。 </li>
<li>如果传入回调函数：返回的是包含document元素集合, 并且当文档加载完成会回调该函数。 </li>
<li>因为函数也是对象，所以该函数还包含了很多已封装好的方法。如：jQuery.noConflict、jQuery.ready等</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;oww&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj1 = $()  <span class="comment">// 创建空对象</span></span><br><span class="line"><span class="keyword">const</span> obj2 = $(obj) <span class="comment">// 通过j对象创建jQuery对象</span></span><br><span class="line"><span class="keyword">const</span> obj3 = $(<span class="string">&#x27;li&#x27;</span>) <span class="comment">// 通过选择器创建jQuery对象</span></span><br></pre></td></tr></table></figure>
<p>jQuery对象与Element对象的区别：jQuery会包含所选择到的对象，可以通过$(element)和obj3[index]之间相互转换，转换后具有不同的函数</p>
<h4 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h4><p>常规选择器：通用选择器（*）、属性/后代/基本（id、class、元素）/兄弟/交集/伪元素（伪类不行）/可见选择器（:visible,:hidden）、jQuery扩展选择器（:eq(),:odd,:even:first:last）—eq是用索引、odd奇数、even偶数</p>
<h3 id="jQuery过滤器"><a href="#jQuery过滤器" class="headerlink" title="jQuery过滤器"></a>jQuery过滤器</h3><ul>
<li>eq(index):  从匹配元素的集合中，取索引处的元素， eq全称(equal 等于)，返回jQuery对象。 </li>
<li>first() : 从匹配元素的集合中，取第一个元素，返回jQuery对象。 </li>
<li>last(): 从匹配元素的集合中，取最后一个元素，返回jQuery对象。 </li>
<li>not(selector):  从匹配元素的集合中，删除匹配的元素，返回jQuery对象。 </li>
<li>filter(selector): 从匹配元素的集合中，过滤出匹配的元素，返回jQuery对象。 </li>
<li>.find(selector): 从匹配元素集合中，找到匹配的后代元素，返回jQuery对象。 </li>
<li>is(selector|element| . ): 根据选择器、元素等检查当前匹配到元素的集合。集合中至少有一个与给定参数匹配则返回true。   8.odd() :将匹配到元素的集合减少为集合中的奇数，从零开始编号，返回jQuery对象。 </li>
<li>even()：将匹配到元素的集合减少到集合中的偶数，从零开始编号，返回jQuery对象。 </li>
<li>支持链式调用</li>
<li>on添加监听</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $li = $(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">$li.<span class="title function_">click</span>(<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>, event)</span><br><span class="line">&#125;)</span><br><span class="line">$li.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>, event)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="../../public/images/jquery-click监听.png" alt></p>
<h3 id="jQuery函数"><a href="#jQuery函数" class="headerlink" title="jQuery函数"></a>jQuery函数</h3><h4 id="jQuery对文本的操作"><a href="#jQuery对文本的操作" class="headerlink" title="jQuery对文本的操作"></a>jQuery对文本的操作</h4><p>.text()、.text(text)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active list div&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">pp</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>9<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $li = $(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> $li.<span class="title function_">text</span>()) <span class="comment">// string 会把其本身和子元素的text拼接为1个string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($li.<span class="title function_">text</span>()) <span class="comment">// 123456789</span></span><br><span class="line">$li.<span class="title function_">text</span>(<span class="string">&quot;aaa&quot;</span>) <span class="comment">// 更改所有选择元素的text</span></span><br></pre></td></tr></table></figure>
<p>.html、.html(htmlString)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $li = $(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($li.<span class="title function_">html</span>())  <span class="comment">// &lt;p&gt;1&lt;/p&gt; 获取选中第一个元素的html</span></span><br><span class="line">$li.<span class="title function_">html</span>(<span class="string">&quot;&lt;span&gt;10&lt;span&gt;&quot;</span>) <span class="comment">//给所有选中元素设置innerHtml</span></span><br></pre></td></tr></table></figure>
<p>.val()、.val(value)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $li = $(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($li.<span class="title function_">odd</span>().<span class="title function_">val</span>()) <span class="comment">// 2 获取选中第一个元素的value</span></span><br><span class="line">$li.<span class="title function_">val</span>(<span class="number">12</span>)</span><br></pre></td></tr></table></figure>
<h4 id="jQuery对css的操作"><a href="#jQuery对css的操作" class="headerlink" title="jQuery对css的操作"></a>jQuery对css的操作</h4><p>.width()、.height()、.css(prppertyName) 获取选中第一个元素的指定样式属性值</p>
<p>.css(propertyName,value)、.css({propertyName1:value1,propertyName2，value2})  为每一个匹配到的元素设置属性</p>
<h4 id="jQuery对class的操作"><a href="#jQuery对class的操作" class="headerlink" title="jQuery对class的操作"></a>jQuery对class的操作</h4><p>.addClass(className)、.addClass(classNames)、.addClass(funcntion)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $li = $(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">$li.<span class="title function_">addClass</span>(<span class="keyword">function</span>(<span class="params">index</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(index%<span class="number">2</span>===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active1&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active2&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;) <span class="comment">// 通过this手动给选中的元素添加类</span></span><br><span class="line">$li.<span class="title function_">addClass</span>(<span class="function">(<span class="params">index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index%<span class="number">2</span>===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;active1&quot;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;active2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;) <span class="comment">// 通过返回类名，jQuery给元素添加类</span></span><br></pre></td></tr></table></figure>
<p>.hasClass(className) 判断匹配到的元素是否分配了该类</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $div = $(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($div.<span class="title function_">hasClass</span>(<span class="string">&quot;active&quot;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($div.<span class="title function_">hasClass</span>(<span class="string">&quot;active list&quot;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($div.<span class="title function_">hasClass</span>(<span class="string">&quot;active div&quot;</span>)) <span class="comment">// false 该方法是判断所选中元素是否包含要查询的类的字符串</span></span><br></pre></td></tr></table></figure>
<p>.removeClass()、.removeClass(className)、.removeClass(classNames)、.removeClass(function)  删除指定的类</p>
<p>.toggleClass()、.toggleClass(className[,state])、.toggleClass(classNames[,state]) 删除或添加指定的类</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>react中的hooks</title>
    <url>/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/</url>
    <content><![CDATA[<h1 id="为什么需要Hook"><a href="#为什么需要Hook" class="headerlink" title="为什么需要Hook"></a>为什么需要Hook</h1><p><strong><em>不编写class的情况下使用state以及其他的React特性</em></strong></p>
<h2 id="class组件"><a href="#class组件" class="headerlink" title="class组件"></a>class组件</h2><h3 id="class组件的优势"><a href="#class组件的优势" class="headerlink" title="class组件的优势"></a>class组件的优势</h3><ul>
<li>class组件可以<strong>定义自己的state</strong>，用来<strong>保存组件自己内部的状态</strong><ul>
<li>函数式组件不可以，因为函数每次调用都会产生新的临时变量</li>
</ul>
</li>
<li>class组件有<strong>自己的生命周期</strong>，我们可以在<strong>对应的生命周期中完成自己的逻辑</strong><ul>
<li>比如在componentDidMount中发送网络请求，并且该生命周期函数只会执行一次</li>
<li>函数式组件在学习hooks之前，如果在函数中发送网络请求，意味着每次重新渲染都会重新发送一次网络请求</li>
</ul>
</li>
<li>class组件可以<strong>在状态改变时只会重新执行render函数</strong>以及<strong>我们希望重新调用的生命周期函数componentDidUpdate</strong>等<ul>
<li>函数式组件在重新渲染时，整个函数都会被执行，似乎没有什么地方可以只让它们调用一次</li>
</ul>
</li>
</ul>
<h3 id="class组件存在的问题"><a href="#class组件存在的问题" class="headerlink" title="class组件存在的问题"></a>class组件存在的问题</h3><ul>
<li><p><strong>复杂组件变得难以理解</strong></p>
<ul>
<li>我们在最初编写一个class组件时，往往逻辑比较简单，并不会非常复杂。但是随着业务的增多，我们的class组件会变得越来越复杂</li>
<li>比如componentDidMount中，可能就会包含大量的逻辑代码：包括网络请求、一些事件的监听（还需要在<br>componentWillUnmount中移除）</li>
<li>而对于这样的class实际上非常难以拆分：因为它们的逻辑往往混在一起，强行拆分反而会造成过度设计，增加代码的复杂度</li>
</ul>
</li>
<li><p><strong>难以理解的class</strong></p>
<ul>
<li>在class中，我们必须搞清楚this的指向到底是谁，所以需要花很多的精力去学习this</li>
</ul>
</li>
<li><strong>组件复用状态很难</strong><ul>
<li>状态的复用我们需要通过高阶组件</li>
<li>像我们之前学习的redux中connect或者react-router中的withRouter，这些高阶组件设计的目的就是为了状态的复用</li>
<li>或者类似于Provider、Consumer来共享一些状态，但是多次使用Consumer时，我们的代码就会存在很多嵌套</li>
</ul>
</li>
</ul>
<h2 id="Hook的作用"><a href="#Hook的作用" class="headerlink" title="Hook的作用"></a>Hook的作用</h2><p><strong><em>Hook可以解决上述class和函数组件存在的问题</em></strong></p>
<p><strong><em>它可以让我们在不编写class的情况下使用state以及其他的React特性</em></strong></p>
<h3 id="Hook的使用场景"><a href="#Hook的使用场景" class="headerlink" title="Hook的使用场景"></a>Hook的使用场景</h3><ul>
<li>Hook的出现基本可以代替我们之前所有使用class组件的地方</li>
<li>但是如果是一个旧的项目，你并不需要直接将所有的代码重构为Hooks，因为它完全向下兼容，你可以渐进式的来使用它</li>
<li>Hook只能在函数组件中使用，不能在类组件，或者函数组件之外的地方使用</li>
</ul>
<h1 id="Hooks的使用"><a href="#Hooks的使用" class="headerlink" title="Hooks的使用"></a>Hooks的使用</h1><p><strong><em>Hooks只能在函数组件中使用</em></strong></p>
<p><strong><em>为什么Hooks中的函数都叫use，不叫create呢？</em></strong></p>
<ul>
<li>Hooks的一大作用是保存组件的状态，在下一次渲染时，返回当前的state</li>
<li>而create的意思是，每次渲染都重新创建，那么就与state只在组件初次渲染时被创建相反</li>
</ul>
<h2 id="useState的使用"><a href="#useState的使用" class="headerlink" title="useState的使用"></a>useState的使用</h2><p><strong><em>useState主要在函数组件中定义state</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count&quot;</span>, count)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setCounter&quot;</span>, setCounter)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>count:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/**</span></span><br><span class="line"><span class="language-xml">             * 注意：onClick传入的是一个函数，setCounter(count+1)是一个函数的调用，所以这里只能使用箭头函数，在函数调用里调用setCounter</span></span><br><span class="line"><span class="language-xml">             */&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;/* <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setCounter(count+1)&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;setCounter(count+1)&#125;&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>useState传入的参数是state中变量的初始值，不传则为默认值undefined</li>
<li><p>useState返回的是一个数组，其中数组中的第一个值是state变量的值，第二个值是设置状态值的函数</p>
</li>
<li><p>只能在最外层调用Hook，不能在循环、条件判断或者子函数中调用</p>
</li>
<li>只能在React的函数组件中调用Hook，不能在其他JavaScript函数中调用</li>
</ul>
<h3 id="useState如何实现状态"><a href="#useState如何实现状态" class="headerlink" title="useState如何实现状态"></a>useState如何实现状态</h3><p><a href="https://zhuanlan.zhihu.com/p/100714485">useState原理</a></p>
<h2 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h2><ul>
<li>Effect Hook可以在函数组件中实现类似于生命周期的功能</li>
<li>网络请求、手动更新DOM、一些事件的监听，都是React更新DOM的一些副作用（不是页面渲染）</li>
<li>对于完成这些功能的Hook被称之为 Effect Hook</li>
</ul>
<h3 id="Effect-Hook的基本使用"><a href="#Effect-Hook的基本使用" class="headerlink" title="Effect Hook的基本使用"></a>Effect Hook的基本使用</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听redux中的数据变换，监听eventBus中的事件&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>count:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;setCounter(count+1)&#125;&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>useEffect传入的参数为一个回调函数，这个回调函数在更新DOM操作之后，就会执行</li>
<li><p>但是在默认情况下，无论第一次渲染，还是在上面更改count更新后的渲染，在渲染结束后都会执行这个回调函数</p>
</li>
<li><p>由于每次渲染都会执行useEffect中的函数，那么每次都会添加监听，最后会添加若干监听，因此需要在函数组件卸载或渲染前卸载掉之前的监听</p>
</li>
</ul>
<h3 id="Effect-Hook的清除"><a href="#Effect-Hook的清除" class="headerlink" title="Effect Hook的清除"></a>Effect Hook的清除</h3><ul>
<li><strong>在class组件中，某些副作用的代码，可以在componentWillUnmount中进行清除，比如在这个函数中清除Redux的订阅</strong></li>
<li><p><strong>useEffect通过传入的回调函数1的返回值函数2，在返回值函数2中做清除操作</strong></p>
<ul>
<li>这样做可以将添加和移除订阅的逻辑放在一起</li>
<li>同属于一个effect的一部分，更好管理</li>
</ul>
</li>
<li><p><strong>React何时清除useEffect</strong></p>
<ul>
<li>在组件更新和卸载时执行清除操作（装载时不会清除）</li>
</ul>
</li>
</ul>
<h3 id="多个Effect的使用"><a href="#多个Effect的使用" class="headerlink" title="多个Effect的使用"></a>多个Effect的使用</h3><ul>
<li><p>使用Hook的其中一个目的就是解决class中生命周期经常将很多的逻辑放在一起的问题</p>
<ul>
<li>比如网络请求、事件监听、手动修改DOM，这些往往都会放在componentDidMount中</li>
</ul>
</li>
<li><p>使用Effect Hook，我们可以将它们分离到不同的useEffect中</p>
<ul>
<li>Hook 允许我们按照代码的用途分离它们， 而不是像生命周期函数那样</li>
<li>React 将按照 effect 声明的顺序依次调用组件中的每一个 effect</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听redux中的数据变换，监听eventBus中的事件&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;清除监听redux中的数据变换，清除监听eventBus中的事件&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取网络请求&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>count:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;setCounter(count+1)&#125;&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Effect的性能优化"><a href="#Effect的性能优化" class="headerlink" title="Effect的性能优化"></a>Effect的性能优化</h3><ul>
<li><p>默认情况下，useEffect的回调函数会在每次渲染时都重新执行，但是这会导致两个问题</p>
<ul>
<li>某些代码我们只是希望执行一次即可，类似于componentDidMount和componentWillUnmount中完成的事情；（比如网络请求、订阅和取消订阅）</li>
<li>另外，多次执行也会导致一定的性能问题</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [message, setMessage] = <span class="title function_">useState</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听redux中的数据变换，监听eventBus中的事件&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;清除监听redux中的数据变换，清除监听eventBus中的事件&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>count:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>message:&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;console.log(&quot;加count&quot;);setCounter(count+1)&#125;&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;console.log(&quot;修改message&quot;);setMessage(&quot;你哈个锤子&quot;)&#125;&#125;&gt;修改message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230403201741719.png" alt="image-20230403201741719"></p>
</li>
<li><p>useEffect的实际上有两个参数</p>
<ul>
<li>参数一：执行的回调函数</li>
<li>参数二：该useEffect在哪些state发生变化时，才重新执行；（受谁的影响）——如果不希望受到任何依赖的影响，则传入[]，这时候仅会在创建和销毁时分别执行对应回调</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [message, setMessage] = <span class="title function_">useState</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听redux中的数据变换，监听eventBus中的事件&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;清除监听redux中的数据变换，清除监听eventBus中的事件&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[count])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>count:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>message:&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;console.log(&quot;加count&quot;);setCounter(count+1)&#125;&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;console.log(&quot;修改message&quot;);setMessage(&quot;你哈个锤子&quot;)&#125;&#125;&gt;修改message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230403201907764.png" alt="image-20230403201907764"></p>
<p><strong><em>那么这里的两个回调函数分别对应的就是componentDidMount和componentWillUnmount生命周期函数了</em></strong></p>
<h2 id="useContext的使用"><a href="#useContext的使用" class="headerlink" title="useContext的使用"></a>useContext的使用</h2><p><strong><em>获取Context的方式：</em></strong></p>
<ul>
<li>类组件可以通过 类名.contextType = MyContext方式，在类中获取context</li>
<li>多个Context或者在函数式组件中通过 MyContext.Consumer 方式共享context</li>
</ul>
<p><strong><em>但是多个Context共享时会存在大量的嵌套</em></strong>——Context Hook允许我们通过Hook来直接获取某个Context的值</p>
<p><strong><em>但是Provider依然会有嵌套</em></strong></p>
<p><strong><em>Provider代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HashRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ColorContext</span>, <span class="title class_">BgrContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Context&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ColorContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;color:</span>&quot;<span class="attr">red</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BgrContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;fontSize:36&#125;&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BgrContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ColorContext.Provider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong><em>useContext代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useContext, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ColorContext</span>, <span class="title class_">BgrContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Context&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> colorContext = <span class="title function_">useContext</span>(<span class="title class_">ColorContext</span>)</span><br><span class="line">    <span class="keyword">const</span> bgrContext = <span class="title function_">useContext</span>(<span class="title class_">BgrContext</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:colorContext.color,fontSize:bgrContext.fontSize&#125;&#125;</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230403204016535.png" alt="image-20230403204016535"></p>
<h2 id="useReducer的使用"><a href="#useReducer的使用" class="headerlink" title="useReducer的使用"></a>useReducer的使用</h2><p><strong><em>useReducer仅仅是useState的一种替代方案</em></strong>——与Redux关系不大</p>
<ul>
<li>如果state的处理逻辑比较复杂，我们可以通过useReducer来对其进行拆分</li>
<li>或者这次修改的state需要依赖之前的state时，也可以使用</li>
<li>数据是不会共享的，它们只是使用了相同的counterReducer的函数而已</li>
<li>useReducer只是useState的一种替代品，并不能替代Redux</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterReducer = <span class="keyword">function</span>(<span class="params">state, action</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state, <span class="attr">counter</span>:state.<span class="property">counter</span>+<span class="number">1</span>&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state, <span class="attr">counter</span>:state.<span class="property">counter</span>-<span class="number">1</span>&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;addNum&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state, <span class="attr">counter</span>:state.<span class="property">counter</span>+action.<span class="property">num</span>&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;decNum&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state, <span class="attr">counter</span>:state.<span class="property">counter</span>-action.<span class="property">num</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(counterReducer,&#123;<span class="attr">message</span>:<span class="string">&quot;Hello!&quot;</span>,<span class="attr">counter</span>:<span class="number">100</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;state.counter&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:&quot;increment&quot;&#125;)&#125;&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:&quot;decrement&quot;&#125;)&#125;&#125;&gt;-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:&quot;addNum&quot;, num:5&#125;)&#125;&#125;&gt;+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:&quot;decNum&quot;, num:10&#125;)&#125;&#125;&gt;-10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><strong><em>useReducer的参数与返回值：</em></strong></p>
<ul>
<li>第一个参数：reducer函数<ul>
<li>reducer函数的参数一：上一次的state/useReducer的第二个参数</li>
<li>reducer函数的参数二：dispatch所传入的参数</li>
<li>reducer的返回值：新的状态（…state是为了保障除了这次改变的其余状态依然在新的状态中）</li>
</ul>
</li>
<li>第二个参数：state初始值</li>
<li>第一个返回值：更新后的state值</li>
<li>第二个返回值：用于发起改变state的函数</li>
</ul>
<h2 id="useCallback的使用"><a href="#useCallback的使用" class="headerlink" title="useCallback的使用"></a>useCallback的使用</h2><p><strong><em>useCallback实际的目的是为了进行性能的优化</em></strong></p>
<ul>
<li>函数式组件在每次刷新时都会重新执行函数，那么里面的函数就会重新定义，虽然刷新后，原来定义的函数会被回收，但每次都定义也会影响性能，同时会生成新的foo</li>
<li>useCallback就可以实现当满足某些条件时<strong>重新定义函数，但得到相同的foo</strong>，而如果有子组件依赖这个foo，相同的foo不<strong>会引起子组件的刷新</strong></li>
</ul>
<p><strong><em>父组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./component/ChildComponent&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">const</span> [message, setMessage] = <span class="title function_">useState</span>(<span class="number">22</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">changeCount</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改count&quot;</span>)</span><br><span class="line">        <span class="title function_">setCount</span>(count+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">changeMessage</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改message&quot;</span>)</span><br><span class="line">        <span class="title function_">setMessage</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Message：&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">changeMessage</span>=<span class="string">&#123;changeMessage&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeCount&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><strong><em>子组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;changeMessage&#125; = props</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件刷新&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeMessage&#125;</span>&gt;</span>子组件按钮修改Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">ChildComponent</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230403211929250.png" alt="image-20230403211929250"></p>
<p>可以看出每次修改count都会刷新不依赖count子组件，会造成性能浪费</p>
<h3 id="useCallback的基本使用"><a href="#useCallback的基本使用" class="headerlink" title="useCallback的基本使用"></a>useCallback的基本使用</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./component/ChildComponent&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">const</span> [message, setMessage] = <span class="title function_">useState</span>(<span class="number">22</span>)</span><br><span class="line">    <span class="keyword">const</span> changeCount = <span class="title function_">useCallback</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改count&quot;</span>)</span><br><span class="line">        <span class="title function_">setCount</span>(count+<span class="number">1</span>)</span><br><span class="line">    &#125;,[count])</span><br><span class="line">    <span class="keyword">const</span> changeMessage = <span class="title function_">useCallback</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改message&quot;</span>)</span><br><span class="line">        <span class="title function_">setMessage</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>())</span><br><span class="line">    &#125;,[])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Message：&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">changeMessage</span>=<span class="string">&#123;changeMessage&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeCount&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230403212738937.png" alt="image-20230403212738937"></p>
<p>可以看出点击更改count后，子组件并未刷新</p>
<p><strong><em>useCallback的参数与返回值：</em></strong></p>
<ul>
<li>参数一：需要处理的函数</li>
<li>参数二：该函数改变依赖的状态，如果该依赖的状态不变，就返回相同的函数，相同的函数不会引起依赖该函数子组件的刷新</li>
<li>返回值：返回一个函数的 memoized（记忆的） 值</li>
</ul>
<p><strong><em>使用useCallback的目的是不希望子组件进行多次渲染，并不是为了函数进行缓存</em></strong></p>
<ul>
<li>并不是不会新定义函数，新定义函数是一定的</li>
<li>只针对子组件的渲染次数做优化，在本组件层面是没有优化的</li>
</ul>
<h2 id="useMemo的使用"><a href="#useMemo的使用" class="headerlink" title="useMemo的使用"></a>useMemo的使用</h2><p><strong><em>useMemo也是为了进行性能的优化：</em></strong></p>
<ul>
<li>同样是返回一个memoized（记忆的）值</li>
<li>在依赖不变的情况下，多次定义的时候，返回的值是相同的</li>
<li>useCallback是在依赖不变的情况下，多次定义的时候，返回的函数是相同的</li>
<li>useMemo针对变量进行优化，useCallback针对函数进行优化</li>
</ul>
<p><strong><em>useMemo的使用案例：</em></strong></p>
<ul>
<li>进行大量的计算操作，是否有必须要每次渲染时都重新计算</li>
<li>对子组件传递相同内容的对象时，使用useMemo进行性能的优化</li>
</ul>
<p><strong><em>父组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./component/ChildComponent&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改count&quot;</span>)</span><br><span class="line">        <span class="title function_">setCount</span>(count+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">information</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;生成information&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;...information,<span class="attr">message</span>:<span class="string">&quot;helloWorld&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> information = <span class="title function_">foo</span>(&#123;<span class="attr">message</span>:message&#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Message：&#123;information.message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">information</span>=<span class="string">&#123;information&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeCount&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><strong><em>子组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;information&#125; = props</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件刷新&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>子组件：&#123;information.message&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">ChildComponent</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230404094727924.png" alt="image-20230404094727924"></p>
<p><strong>可以看出：</strong></p>
<ul>
<li>每次更新count后，message是不变的，那么information，也就不必要每次都去运行foo函数，当foo函数逻辑赋值时会引起性能浪费</li>
<li>子页面仅依赖于message，这里明显每次都是得到的information值是一样的，但由于是不同的对象，子组件每次也会刷新</li>
</ul>
<h3 id="useMemo的基本使用"><a href="#useMemo的基本使用" class="headerlink" title="useMemo的基本使用"></a>useMemo的基本使用</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useMemo, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./component/ChildComponent&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useFoo</span>(<span class="params">message</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">useMemo</span>(<span class="function">(<span class="params">message</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;生成information&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">message</span>:message+<span class="string">&quot;修改后&quot;</span>&#125;</span><br><span class="line">    &#125;,[message])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">const</span> [message, setMessage] = <span class="title function_">useState</span>(<span class="string">&quot;helloWorld&quot;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改count&quot;</span>)</span><br><span class="line">        <span class="title function_">setCount</span>(count+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> information = <span class="title function_">useFoo</span>(message)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Message：&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">information</span>=<span class="string">&#123;information&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeCount&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230404101149326.png" alt="image-20230404101149326"></p>
<p><strong>可以看出：</strong></p>
<p>修改count后，依赖于message的函数不再重新执行，子组件也不再刷新</p>
<p><strong>注意：</strong></p>
<ul>
<li>useMemo这种Hook函数，只能在函数组件和hook函数中使用，自定义hook函数，以use开头，use后的第一个字母为大写</li>
<li>useMemo不会传递参数，因为useMemo是由React调用的，我们不知道其在上面时候调用，也就无法传参数进行</li>
<li>useMemo的参数与返回值<ul>
<li>参数一：useMemo判断是否执行的函数</li>
<li>参数二：useMemo依赖的值，如果这个值没变，就不会执行传入的函数，直接返回上一次的计算值</li>
<li>返回值：返回一个带记忆的值</li>
</ul>
</li>
</ul>
<h2 id="useRef的使用"><a href="#useRef的使用" class="headerlink" title="useRef的使用"></a>useRef的使用</h2><p><strong><em>useRef返回一个ref对象，返回的ref对象再组件的整个生命周期保持不变</em></strong></p>
<h3 id="useRef基本使用"><a href="#useRef基本使用" class="headerlink" title="useRef基本使用"></a>useRef基本使用</h3><ul>
<li>用法一：引入DOM（或者组件，但是需要是class组件）元素</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useRef&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>()</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">buttonClick</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(inputRef.<span class="property">current</span>)</span><br><span class="line">        inputRef.<span class="property">current</span>.<span class="title function_">focus</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;buttonClick&#125;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>用法二：保存一个数据，这个对象在整个生命周期中可以保存不变（解决闭包陷阱）<ul>
<li>由于函数里的count是获取上层作用域里的，也就是闭包，那么无论页面刷新多少次，函数里的count都是函数定义是的count 0，因此无论多少次点击得到的结果都是1（当然这里可以设置依赖count——仅颜色useRef的作用，所以没有添加）</li>
<li>而使用inputRef所得到的对象每次本身就是一样的，那么有没有闭包陷阱也就无所谓，因为我们本身就是要获取相同的值，而通过修改inptRef这个对象里面的值，从而获得相同的对象不同的值，解决闭包陷阱</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useCallback, useRef, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count,setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> buttonClick = <span class="title function_">useCallback</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;+1&quot;</span>,count+<span class="number">1</span>)</span><br><span class="line">        <span class="title function_">setCount</span>(count+<span class="number">1</span>)</span><br><span class="line">    &#125;,[])</span><br><span class="line">    <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>()</span><br><span class="line">    inputRef.<span class="property">count</span> = count</span><br><span class="line">    <span class="keyword">const</span> buttonClick1 = <span class="title function_">useCallback</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;-1&quot;</span>,inputRef.<span class="property">count</span>-<span class="number">1</span>)</span><br><span class="line">        <span class="title function_">setCount</span>(inputRef.<span class="property">count</span>-<span class="number">1</span>)</span><br><span class="line">    &#125;,[])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>count:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;buttonClick&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;buttonClick1&#125;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230404105354101.png" alt="image-20230404105354101"></p>
<h3 id="父组件传ref给子组件"><a href="#父组件传ref给子组件" class="headerlink" title="父组件传ref给子组件"></a>父组件传ref给子组件</h3><ul>
<li>方式一：作为参数放到props中传递过去——参数名不能使用ref</li>
<li>方式二：利用forwardRef传递给子组件</li>
</ul>
<p><strong><em>父组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useRef, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./component/ChildComponent&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>()</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">buttonClick</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(inputRef.<span class="property">current</span>)</span><br><span class="line">        inputRef.<span class="property">current</span>.<span class="title function_">focus</span>()</span><br><span class="line">        inputRef.<span class="property">current</span>.<span class="property">value</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">ref</span> = <span class="string">&#123;inputRef&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;buttonClick&#125;</span>&gt;</span>showref<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><strong><em>子组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; forwardRef, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params">props, ref</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title function_">forwardRef</span>(<span class="title class_">ChildComponent</span>))</span><br></pre></td></tr></table></figure>
<p><strong><em>注：要使用ref参数，子组件需用forwardRef包裹，且要使用memo的话，memo在forwardRef外层</em></strong></p>
<h2 id="useImperativeHandle的使用"><a href="#useImperativeHandle的使用" class="headerlink" title="useImperativeHandle的使用"></a>useImperativeHandle的使用</h2><ul>
<li>上述通过父组件中的ref传递给子组件中的元素，可以在父组件中获得子组件元素，对子组件元素进行操作</li>
<li>将整个元素给到父组件，就容易在父组件中过渡使用，从而在某种情况下产生某种bug，如上述代码，点击showref会在聚焦子组件input的同时，将其值修改为空</li>
<li>useImperativeHandle就是为了解决样的问题，不直接把子组件元素给到父组件，而是把子组件元素的某些操作给到父组件</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; forwardRef, memo, useImperativeHandle, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params">props, ref</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>()</span><br><span class="line">    <span class="title function_">useImperativeHandle</span>(ref, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">focus</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                inputRef.<span class="property">current</span>.<span class="title function_">focus</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title function_">forwardRef</span>(<span class="title class_">ChildComponent</span>))</span><br></pre></td></tr></table></figure>
<h3 id="useImperativeHandle的基本使用"><a href="#useImperativeHandle的基本使用" class="headerlink" title="useImperativeHandle的基本使用"></a>useImperativeHandle的基本使用</h3><ul>
<li>参数一：父组件传给子组件的ref</li>
<li>参数二：回调函数，函数返回结果是传递给父组件的属性值对象，如这里只传了focus函数，那么父组件中就只有focus属性生效，其余属性无效</li>
</ul>
<h2 id="useLayoutEffect使用"><a href="#useLayoutEffect使用" class="headerlink" title="useLayoutEffect使用"></a>useLayoutEffect使用</h2><p><strong><em>useLayoutEffect看起来和useEffect非常的相似，事实上他们也只有一点区别而已：</em></strong></p>
<ul>
<li>useEffect会在渲染的内容更新到DOM上后执行，不会阻塞DOM的更新</li>
<li>useLayoutEffect会在渲染的内容更新到DOM上之前执行，会阻塞DOM的更新</li>
</ul>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230404143022932.png" alt="image-20230404143022932"></p>
<h3 id="useEffect与useLayoutEffect执行顺序演示"><a href="#useEffect与useLayoutEffect执行顺序演示" class="headerlink" title="useEffect与useLayoutEffect执行顺序演示"></a>useEffect与useLayoutEffect执行顺序演示</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useEffect, useLayoutEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useEffect&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">useLayoutEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useLayoutEffect&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;render app&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230404150134192.png" alt="image-20230404150134192"></p>
<p>注：先”render app”，等数据更新后，渲染到DOM前执行useLayoutEffect，渲染结束后执行useEffect</p>
<h3 id="useLayoutEffect的作用"><a href="#useLayoutEffect的作用" class="headerlink" title="useLayoutEffect的作用"></a>useLayoutEffect的作用</h3><p>在页面即将刷新错误数据前及时拦截</p>
<p><strong><em>使用useEffect代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(count===<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="title function_">setCount</span>(<span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useEffect&quot;</span>,count)</span><br><span class="line">    &#125;, [count])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;render app&quot;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">buttonClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">setCount</span>(count-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>count:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;buttonClick&#125;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/%E5%8A%A8%E7%94%BB.gif" alt="动画"></p>
<p><strong><em>使用useLayoutEffect代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useLayoutEffect, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="title function_">useLayoutEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(count===<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="title function_">setCount</span>(<span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useEffect&quot;</span>,count)</span><br><span class="line">    &#125;, [count])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;render app&quot;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">buttonClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">setCount</span>(count-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>count:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;buttonClick&#125;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/%E5%8A%A8%E7%94%BB-16805960254001.gif" alt="动画"></p>
<h2 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h2><p>   <strong><em>自定义Hook本质上只是一种函数代码逻辑的抽取，严格意义上来说，它本身并不算React的特性</em></strong></p>
<p>注：</p>
<ul>
<li>自定义Hook以use开头，且use后的字母要大写</li>
</ul>
<h3 id="自定义Hook——所有的组件在创建和销毁时都进行打印"><a href="#自定义Hook——所有的组件在创建和销毁时都进行打印" class="headerlink" title="自定义Hook——所有的组件在创建和销毁时都进行打印"></a>自定义Hook——所有的组件在创建和销毁时都进行打印</h3><ul>
<li>组件被创建：打印 组件被创建了</li>
<li>组件被销毁：打印 组件被销毁了</li>
</ul>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230404161751779.png" alt="image-20230404161751779"></p>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230404161758920.png" alt="image-20230404161758920"></p>
<h3 id="自定义Hook——Context的共享"><a href="#自定义Hook——Context的共享" class="headerlink" title="自定义Hook——Context的共享"></a>自定义Hook——Context的共享</h3><p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230404161934780.png" alt="image-20230404161934780"></p>
<h3 id="自定义Hook——获取滚动位置"><a href="#自定义Hook——获取滚动位置" class="headerlink" title="自定义Hook——获取滚动位置"></a>自定义Hook——获取滚动位置</h3><p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/image-20230404162001534.png" alt="image-20230404162001534"></p>
<h2 id="redux-hooks的使用"><a href="#redux-hooks的使用" class="headerlink" title="redux hooks的使用"></a>redux hooks的使用</h2><ul>
<li>在之前的redux开发中，为了让组件和redux结合起来，我们使用了react-redux中的connect<ul>
<li>但是这种方式必须使用高阶函数结合返回的高阶组件</li>
<li>且必须编写：mapStateToProps和 mapDispatchToProps映射的函数</li>
</ul>
</li>
<li>useSelector的作用是将state映射到组件中<ul>
<li>参数一：将state映射到需要的数据中</li>
<li>参数二：可以进行比较来决定是否组件重新渲染；（后续讲解）</li>
</ul>
</li>
<li>useSelector默认会比较我们返回的两个对象是否相等<ul>
<li>也就是我们必须返回两个完全相等的对象才可以不引起重新渲染</li>
</ul>
</li>
<li>useDispatch非常简单，就是直接获取dispatch函数，之后在组件中直接使用即可</li>
<li>我们还可以通过useStore来获取当前的store对象</li>
</ul>
<h3 id="redux的常规使用——使用connect函数"><a href="#redux的常规使用——使用connect函数" class="headerlink" title="redux的常规使用——使用connect函数"></a>redux的常规使用——使用connect函数</h3><p><strong><em>整个项目index.js代码：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./stero&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong><em>countSlice.js代码</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> countSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;count&quot;</span>,</span><br><span class="line">    <span class="attr">initialState</span>:&#123;</span><br><span class="line">        <span class="attr">count</span>:<span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reducers</span>:&#123;</span><br><span class="line">        <span class="title function_">addCountAction</span>(<span class="params">state, action</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span> += action.<span class="property">payload</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123;addCountAction&#125; = countSlice.<span class="property">actions</span></span><br><span class="line"><span class="keyword">const</span> countReducer = countSlice.<span class="property">reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> countReducer</span><br></pre></td></tr></table></figure>
<p><strong><em>导出的stero的index.js代码：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&quot;./countSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>:&#123;</span><br><span class="line">        <span class="attr">counter</span>:countReducer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<p><strong><em>stero使用的jsx代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useLayoutEffect, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addCountAction &#125; <span class="keyword">from</span> <span class="string">&#x27;./stero/countSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;count, addCount&#125; = props</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">buttonCLick</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">addCount</span>(<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>count:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;buttonCLick&#125;</span>&gt;</span>+3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>:state.<span class="property">counter</span>.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapAction20Props</span>(<span class="params">dispatch</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">addCount</span>(<span class="params">count</span>)&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">addCountAction</span>(count))</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapAction20Props)(<span class="title function_">memo</span>(<span class="title class_">App</span>))</span><br></pre></td></tr></table></figure>
<p>注：</p>
<ul>
<li>这种方式必须使用高阶函数结合返回的高阶组件</li>
<li>并且必须编写：mapStateToProps和 mapDispatchToProps映射的函数</li>
</ul>
<h3 id="redux的Hook使用"><a href="#redux的Hook使用" class="headerlink" title="redux的Hook使用"></a>redux的Hook使用</h3><h4 id="useSelector与useDispatch的使用"><a href="#useSelector与useDispatch的使用" class="headerlink" title="useSelector与useDispatch的使用"></a>useSelector与useDispatch的使用</h4><p><strong><em>App.jsx代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./component/ChildComponent&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addCountAction &#125; <span class="keyword">from</span> <span class="string">&#x27;./stero/countSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;App渲染&quot;</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * useSelector的第一个参数为函数，其返回一个对象，会把这个返回对象作为useSelector的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> &#123;count&#125; = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>:state.<span class="property">counter</span>.<span class="property">count</span></span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dispatch通过useDispatch直接获取，不再需要像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>()</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">buttonCLick</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title function_">addCountAction</span>(<span class="number">4</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>count:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ChildComponent</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;buttonCLick&#125;</span>&gt;</span>改变count<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p>注：</p>
<p><strong><em>可以看到能够直接使用useSelector对stero中的数据进行映射，直接通过useDispatch获取dispatch</em></strong></p>
<p><strong>但是上述会出现一些问题：</strong></p>
<ul>
<li>useSelector是监听的是state，也就是state改变后，所有使用useSelector的组件都会刷新</li>
</ul>
<p><strong><em>ChildComponent代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;  memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件渲染&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123;message&#125; = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>(&#123;</span><br><span class="line">        <span class="attr">message</span>:state.<span class="property">counter</span>.<span class="property">message</span></span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件:&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">ChildComponent</span>)</span><br></pre></td></tr></table></figure>
<p>子组件只与state中的message有关，但当count改变时子组件依然会刷新，会引起性能的降低</p>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/%E5%8A%A8%E7%94%BB-16806053791312.gif" alt="动画"></p>
<p><strong><em>给useSelector设置shallowEqual就可以避免上述问题，实际上是进行一个浅层比较，如果相同就不更新</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;message&#125; = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>(&#123;</span><br><span class="line"><span class="attr">message</span>:state.<span class="property">counter</span>.<span class="property">message</span></span><br><span class="line">&#125;),shallowEqual)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;count&#125; = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>(&#123;</span><br><span class="line"><span class="attr">count</span>:state.<span class="property">counter</span>.<span class="property">count</span></span><br><span class="line">&#125;),shallowEqual)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/03/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84hooks/%E5%8A%A8%E7%94%BB-16806056878424.gif" alt="动画"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>react中的路由设置</title>
    <url>/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="中间件的实现"><a href="#中间件的实现" class="headerlink" title="中间件的实现"></a>中间件的实现</h1><h1 id="React-Router路由"><a href="#React-Router路由" class="headerlink" title="React-Router路由"></a>React-Router路由</h1><p><strong><em>URL的hash：</em></strong></p>
<ul>
<li>URL的hash也就是锚点(#), 本质上是改变window.location的href属性</li>
<li>我们可以通过直接赋值location.hash来改变href, 但是页面不发生刷新</li>
</ul>
<h2 id="React-Router的安装"><a href="#React-Router的安装" class="headerlink" title="React Router的安装"></a>React Router的安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-router-dom</span><br></pre></td></tr></table></figure>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><strong><em>BrowserRouter或HashRouter：</em></strong></p>
<ul>
<li>Router中包含了对路径改变的监听，并且会将相应的路径传递给子组件</li>
<li>BrowserRouter使用history模式</li>
<li>HashRouter使用hash模式</li>
</ul>
<h3 id="路由的配置与使用"><a href="#路由的配置与使用" class="headerlink" title="路由的配置与使用"></a>路由的配置与使用</h3><h4 id="要使用的组件前面添加路由设置"><a href="#要使用的组件前面添加路由设置" class="headerlink" title="要使用的组件前面添加路由设置"></a>要使用的组件前面添加路由设置</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HashRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    // 可以选择HashRouter/BrowserRouter</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h4 id="路由的映射"><a href="#路由的映射" class="headerlink" title="路由的映射"></a>路由的映射</h4><p><strong><em>映射设置：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyMusic</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 这里会con上往下匹配，直至匹配到一个结果，后续就不匹配了*/&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：</p>
<ul>
<li>如果使用HashRouter，浏览器的路径设置一定要加/#/，否则是失效的</li>
</ul>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402152504555.png" alt="image-20230402152504555"></p>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402152522490.png" alt="image-20230402152522490"></p>
<h4 id="路由的配置跳转"><a href="#路由的配置跳转" class="headerlink" title="路由的配置跳转"></a>路由的配置跳转</h4><h5 id="Link元素"><a href="#Link元素" class="headerlink" title="Link元素"></a>Link元素</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyMusic</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 主要是通过路由的配置来更改当前页面的location，从而使下面的Routes匹配结果改变 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>发现音乐<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 这里会con上往下匹配，直至匹配到一个结果，后续就不匹配了*/&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402153039156.png" alt="image-20230402153039156"></p>
<p>注：</p>
<ul>
<li>Link元素会自动渲染为a元素</li>
<li>如果要更改这个a元素的样式，需要使用NavLink组件</li>
</ul>
<h5 id="NavLink元素"><a href="#NavLink元素" class="headerlink" title="NavLink元素"></a>NavLink元素</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">NavLink</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyMusic</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 主要是通过路由的配置来更改当前页面的location，从而使下面的Routes匹配结果改变 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>发现音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 这里会con上往下匹配，直至匹配到一个结果，后续就不匹配了*/&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>index.css代码：</em></strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402153943491.png" alt="image-20230402153943491"></p>
<p>注：</p>
<ul>
<li>NavLink元素会自动给当前渲染的a元素添加active类，所以可以通过active去设置当前渲染的样式</li>
<li>而如果active类在其他地方已经使用过了呢，使用active就容易引起冲突，react-router提供了className属性去自定义我们的类名称，属性应该传入函数</li>
<li>同样react-router为我们提供了style属性去定义样式，属性应该传入函数</li>
</ul>
<p><strong><em>使用style属性：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">NavLink</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyMusic</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 主要是通过路由的配置来更改当前页面的location，从而使下面的Routes匹配结果改变 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 这里给style传入的函数，返回的一个对象，而且会自动传入一个包含isActive的参数，可以通过解构出isActive用于逻辑判断 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">style</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&#123;color:&quot;red&quot;,fontSize:24&#125;:&#123;&#125;&#125;&#125;&gt;发现音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>  <span class="attr">style</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&#123;color:&quot;red&quot;,fontSize:24&#125;:&#123;&#125;&#125;&#125;&gt;我的音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 这里会con上往下匹配，直至匹配到一个结果，后续就不匹配了*/&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402154824768.png" alt="image-20230402154824768"></p>
<p><strong><em>使用className属性：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">NavLink</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyMusic</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 主要是通过路由的配置来更改当前页面的location，从而使下面的Routes匹配结果改变 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active one&quot;:&quot;one&quot;&#125;&#125;&gt;发现音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>  <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active two&quot;:&quot;two&quot;&#125;&#125;&gt;我的音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 这里会con上往下匹配，直至匹配到一个结果，后续就不匹配了*/&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402155112040.png" alt="image-20230402155112040"></p>
<h5 id="Navigate导航"><a href="#Navigate导航" class="headerlink" title="Navigate导航"></a>Navigate导航</h5><ul>
<li>如当页面location为/时，自动跳转到/home/页面</li>
<li>这种情况与上面直接element的直接区别为：这种情况下不会出现”/“的情况，因为会直接跳转，而上面是替换匹配到的组件</li>
<li>导航的所有东西都是放在#后面的，#前面在解析时会忽略</li>
</ul>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402160154144.png" alt="image-20230402160154144"></p>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402160916685.png" alt="image-20230402160916685"></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">NavLink</span>, <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyMusic</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 主要是通过路由的配置来更改当前页面的location，从而使下面的Routes匹配结果改变 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active one&quot;:&quot;one&quot;&#125;&#125;&gt;发现音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>  <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active two&quot;:&quot;two&quot;&#125;&#125;&gt;我的音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 这里会con上往下匹配，直至匹配到一个结果，后续就不匹配了*/&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Not-Found页面配置"><a href="#Not-Found页面配置" class="headerlink" title="Not Found页面配置"></a>Not Found页面配置</h5><ul>
<li>当所有的Route都未匹配成功时，当前组件内容为空，而有时想给用户提醒输入了错误的url，则需要一个可以匹配所有字符的默认Route</li>
</ul>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402160512717.png" alt="image-20230402160512717"></p>
<ul>
<li><p>react-route中的通配符为’*‘，因此将一个path=’*‘放在最后，那么如果前面的path都没匹配上，最后一个肯定可以匹配，并找到默认页面</p>
<ul>
<li><p>​    </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">NavLink</span>, <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyMusic</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;./components/NotFound&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 主要是通过路由的配置来更改当前页面的location，从而使下面的Routes匹配结果改变 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active one&quot;:&quot;one&quot;&#125;&#125;&gt;发现音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>  <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active two&quot;:&quot;two&quot;&#125;&#125;&gt;我的音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 这里会con上往下匹配，直至匹配到一个结果，后续就不匹配了*/&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;*&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NotFound</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h2><p>在实际开发中，经常出现路由之间存在嵌套关系——如网易云中的路由</p>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402161440408.png" alt="image-20230402161440408"></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">NavLink</span>, <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyMusic</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;./components/NotFound&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Recommend</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Recommend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TopList</span> <span class="keyword">from</span> <span class="string">&#x27;./components/TopList&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 主要是通过路由的配置来更改当前页面的location，从而使下面的Routes匹配结果改变 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active one&quot;:&quot;one&quot;&#125;&#125;&gt;发现音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>  <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active two&quot;:&quot;two&quot;&#125;&#125;&gt;我的音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 这里会con上往下匹配，直至匹配到一个结果，后续就不匹配了*/&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home/discover&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/discover&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Recommend</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/toplist&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">TopList</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;*&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NotFound</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：</p>
<ul>
<li><p>通过上述写法可以实现嵌套，在Home组件中编写下一层的路由跳转逻辑</p>
<ul>
<li>Home.jsx的代码——Outlet是NavLink元素得到组件的位置</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>, <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../index.css&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;home-container&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>home<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;home-content&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/discover&quot;</span>&gt;</span>推荐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/toplist&quot;</span>&gt;</span>排行榜<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/*  <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span>是NavLink元素得到组件的位置  */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402164901837.png" alt="image-20230402164901837"></p>
</li>
<li><p>第二层路由最终会变成第一层路由的子组件，而如果我们在两个’/‘路由的时候，想让他在第一层，而不出现在第二层呢——可以在第一层时，不写element</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Routes</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home/discover&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/discover&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Recommend</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/toplist&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">TopList</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;*&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NotFound</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line">&lt;/<span class="title class_">Routes</span>&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230402165329191.png" alt="image-20230402165329191"></p>
</li>
</ul>
<h2 id="手动实现路由的跳转"><a href="#手动实现路由的跳转" class="headerlink" title="手动实现路由的跳转"></a>手动实现路由的跳转</h2><ul>
<li>上面的跳转实现主要靠NavLink自动生成的a元素，但有时候我们想要使用其他组件跳转，或者在逻辑过程中跳转，这种方法就不太好实现</li>
<li>hooks提供了useNavigate函数，返回一个navigate对象，可以通过这个对象在代码中进行跳转</li>
<li>但是hooks只能在函数组件中使用，类组件不能直接使用useNavigate<ul>
<li>对于对状态要求不高的类组件，可以更改为函数组件使用useNavigate</li>
<li>对于有很多状态的类组件，可以使用高阶组件，在其外包裹一个函数组件，通过参数的形式，将navigate对象传递给类组件使用</li>
</ul>
</li>
</ul>
<p><strong><em>高阶函数代码：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hooksFunc</span>(<span class="params">Wrapper</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>()</span><br><span class="line">        <span class="keyword">const</span> router = &#123;</span><br><span class="line">            navigate</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">router</span> = <span class="string">&#123;router&#125;/</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> hooksFunc</span><br></pre></td></tr></table></figure>
<p><strong><em>要被包裹的组件代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">NavLink</span>, <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hooksFunc <span class="keyword">from</span> <span class="string">&#x27;./components/HooksFunction&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyMusic</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;./components/NotFound&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Recommend</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Recommend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TopList</span> <span class="keyword">from</span> <span class="string">&#x27;./components/TopList&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Friend</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Frined&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">navigateFriend</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;navigate&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">router</span></span><br><span class="line">        <span class="title function_">navigate</span>(<span class="string">&quot;/friend&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 主要是通过路由的配置来更改当前页面的location，从而使下面的Routes匹配结果改变 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active one&quot;:&quot;one&quot;&#125;&#125;&gt;发现音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>  <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active two&quot;:&quot;two&quot;&#125;&#125;&gt;我的音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.navigateFriend()&#125;&#125;&gt;关注<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 这里会con上往下匹配，直至匹配到一个结果，后续就不匹配了*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home/discover&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/discover&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Recommend</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/toplist&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">TopList</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/friend&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Friend</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;*&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NotFound</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里可以选择导出时用高阶函数处理，也可以选择先导出，在使用前处理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">hooksFunc</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="路由参数的传递"><a href="#路由参数的传递" class="headerlink" title="路由参数的传递"></a>路由参数的传递</h2><ul>
<li>动态路由的方式</li>
<li>search传递参数</li>
</ul>
<h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><ul>
<li>比如/detail的path对应一个组件Detail</li>
<li>如果我们将path在Route匹配时写成/detail/:id，那么  /detail/abc、/detail/123都可以匹配到该Route，并且进行显示</li>
<li>这个匹配规则，我们就称之为动态路由</li>
<li>通常情况下，使用动态路由可以为路由传递参数</li>
</ul>
<p><strong><em>App.jsx代码——配置Route：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">NavLink</span>, <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hooksFunc <span class="keyword">from</span> <span class="string">&#x27;./components/HooksFunction&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyMusic</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;./components/NotFound&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Recommend</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Recommend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TopList</span> <span class="keyword">from</span> <span class="string">&#x27;./components/TopList&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Friend</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Frined&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">navigateFriend</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;navigate&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">router</span></span><br><span class="line">        <span class="title function_">navigate</span>(<span class="string">&quot;/friend&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 主要是通过路由的配置来更改当前页面的location，从而使下面的Routes匹配结果改变 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active one&quot;:&quot;one&quot;&#125;&#125;&gt;发现音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/my/123/oww&quot;</span>  <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active two&quot;:&quot;two&quot;&#125;&#125;&gt;我的音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.navigateFriend()&#125;&#125;&gt;关注<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 这里会con上往下匹配，直至匹配到一个结果，后续就不匹配了*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home/discover&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/discover&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Recommend</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/toplist&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">TopList</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;/* Route配置/:id/:name标志这里的id为参数 */&#125;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my/:id/:name&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/friend&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Friend</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;*&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NotFound</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">hooksFunc</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><strong><em>hooksFunction代码：</em></strong>——获取参数使用useParams的hook，依然不能直接在类组件中使用，因此与navigate一样，使用高阶组件包含</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate, useParams &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hooksFunc</span>(<span class="params">Wrapper</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>()</span><br><span class="line">        <span class="keyword">const</span> params = <span class="title function_">useParams</span>()</span><br><span class="line">        <span class="keyword">const</span> router = &#123;</span><br><span class="line">            navigate,</span><br><span class="line">            params</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">router</span> = <span class="string">&#123;router&#125;/</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> hooksFunc</span><br></pre></td></tr></table></figure>
<p><strong><em>MyMusic.jsx代码：</em></strong>——获取参数的组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hooksFunc <span class="keyword">from</span> <span class="string">&#x27;./HooksFunction&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMusic</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;params&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">router</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>MyMusic-&#123;params.id&#125;-&#123;params.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">hooksFunc</span>(<span class="title class_">MyMusic</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230403175400198.png" alt="image-20230403175400198"></p>
<h3 id="search传递参数"><a href="#search传递参数" class="headerlink" title="search传递参数"></a>search传递参数</h3><p>search传递参数直接在跳转路由时设置（Link/navigate）——如navigate(“/friend?name=oww&amp;age=22”)</p>
<p><strong><em>App.jsx代码：</em></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">NavLink</span>, <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hooksFunc <span class="keyword">from</span> <span class="string">&#x27;./components/HooksFunction&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyMusic</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;./components/NotFound&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Recommend</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Recommend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TopList</span> <span class="keyword">from</span> <span class="string">&#x27;./components/TopList&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Friend</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Frined&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">navigateFriend</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;navigate&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">router</span></span><br><span class="line">        <span class="comment">// search参数传递不需要在Route中配置，而直接在Link或navigate中配置</span></span><br><span class="line">        <span class="title function_">navigate</span>(<span class="string">&quot;/friend?name=oww&amp;age=22&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 主要是通过路由的配置来更改当前页面的location，从而使下面的Routes匹配结果改变 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active one&quot;:&quot;one&quot;&#125;&#125;&gt;发现音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/my/123/oww&quot;</span>  <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>&#123; return isActive?&quot;nav-active two&quot;:&quot;two&quot;&#125;&#125;&gt;我的音乐<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.navigateFriend()&#125;&#125;&gt;关注<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 这里会con上往下匹配，直至匹配到一个结果，后续就不匹配了*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home/discover&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/discover&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Recommend</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/toplist&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">TopList</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;/* Route配置/:id/:name标志这里的id为参数 */&#125;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/my/:id/:name&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyMusic</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/friend&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Friend</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;*&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NotFound</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">hooksFunc</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p><strong><em>hooksFunction代码：</em></strong>要获取传递的参数同样需要hooks，则同样需要用高阶函数包裹</p>
<ul>
<li><p>useLocation：会获取到当前页面url的一些信息</p>
</li>
<li><p>useSearchParams：获取到当前页面的参数相关信息</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useLocation, useNavigate, useParams, useSearchParams &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hooksFunc</span>(<span class="params">Wrapper</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>()</span><br><span class="line">        <span class="keyword">const</span> params = <span class="title function_">useParams</span>()</span><br><span class="line">        <span class="keyword">const</span> location = <span class="title function_">useLocation</span>()</span><br><span class="line">        <span class="keyword">const</span> [searchParams] = <span class="title function_">useSearchParams</span>()</span><br><span class="line">        <span class="keyword">const</span> query = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(searchParams)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;location&quot;</span>, location)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;searchParams&quot;</span>, query)</span><br><span class="line">        <span class="keyword">const</span> router = &#123;</span><br><span class="line">            navigate,</span><br><span class="line">            params,</span><br><span class="line">            query</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">router</span> = <span class="string">&#123;router&#125;/</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> hooksFunc</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230403181604295.png" alt="image-20230403181604295"></p>
<h2 id="路由的配置文件"><a href="#路由的配置文件" class="headerlink" title="路由的配置文件"></a>路由的配置文件</h2><ul>
<li>之前直接用Route组件定义路由，如果项目中路由很多的情况下，页面会相当混乱</li>
<li>可以通过useRoutes的hook配置到一个地方集中管理<ul>
<li>早期，Route没有相关的api，需要借助于react-router-config</li>
<li>Router6.x中，为我们提供了useRoutes API完成相关的配置</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/01/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/image-20230403184434151.png" alt="image-20230403184434151"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>react项目的配置与搭建</title>
    <url>/2023/04/05/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="React创建与配置"><a href="#React创建与配置" class="headerlink" title="React创建与配置"></a>React创建与配置</h1><h2 id="React创建项目"><a href="#React创建项目" class="headerlink" title="React创建项目"></a>React创建项目</h2><h3 id="React脚手架搭建项目"><a href="#React脚手架搭建项目" class="headerlink" title="React脚手架搭建项目"></a>React脚手架搭建项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create-react-app name</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/05/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/image-20230405102510876.png" alt="image-20230405102510876"></p>
<p><strong><em>删除默认生成的文件：</em></strong></p>
<p><img src="/2023/04/05/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/image-20230405102711804.png" alt="image-20230405102711804"></p>
<h3 id="项目目录结构配置"><a href="#项目目录结构配置" class="headerlink" title="项目目录结构配置"></a>项目目录结构配置</h3><p><img src="/2023/04/05/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/image-20230405103045842.png" alt="image-20230405103045842"></p>
<h3 id="项目基本配置"><a href="#项目基本配置" class="headerlink" title="项目基本配置"></a>项目基本配置</h3><h4 id="配置项目的icon"><a href="#配置项目的icon" class="headerlink" title="配置项目的icon"></a>配置项目的icon</h4><p>直接把需要使用的icon替换public下面的favicon.ico</p>
<h4 id="配置项目的标题"><a href="#配置项目的标题" class="headerlink" title="配置项目的标题"></a>配置项目的标题</h4><p>设置html文件下的title属性</p>
<h4 id="配置jsconfig-json文件"><a href="#配置jsconfig-json文件" class="headerlink" title="配置jsconfig.json文件"></a>配置jsconfig.json文件</h4><p>配置后编写项目的智能提示会好很多</p>
<p><img src="/2023/04/05/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/image-20230405103730430.png" alt="image-20230405103730430"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;src/*&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span><span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;DOM&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;DOM.Iterable&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;ScriptHost&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="项目的别名配置"><a href="#项目的别名配置" class="headerlink" title="项目的别名配置"></a>项目的别名配置</h4><p><img src="/2023/04/05/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/image-20230405103925434.png" alt="image-20230405103925434"></p>
<h5 id="采用craco配置"><a href="#采用craco配置" class="headerlink" title="采用craco配置"></a>采用craco配置</h5><p><strong><em>webpack的配置：</em></strong></p>
<ul>
<li>craco会使项目的配置与webpack的配置融合</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @craco/craco@alpha -D</span><br></pre></td></tr></table></figure>
<ul>
<li>craco.config.js的配置</li>
</ul>
<p><img src="/2023/04/05/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/image-20230405104646852.png" alt="image-20230405104646852"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = pathName=&gt;path.<span class="title function_">resolve</span>(__dirname, pathName)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">webpack</span>:&#123;</span><br><span class="line">        <span class="attr">alias</span>:&#123;</span><br><span class="line">            <span class="string">&quot;@&quot;</span>:<span class="title function_">resolve</span>(<span class="string">&quot;src&quot;</span>),</span><br><span class="line">            <span class="string">&quot;components&quot;</span>:<span class="title function_">resolve</span>(<span class="string">&quot;src/components&quot;</span>),</span><br><span class="line">            <span class="string">&quot;utils&quot;</span>:<span class="title function_">resolve</span>(<span class="string">&quot;src/utils&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要是craco生效，项目启动必须以craco启动，才能和webpack的配置融合——修改package.json中的scripts</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;craco start&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;craco build&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;craco test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>此时就可以用别名去写路径，避免长串的../../</p>
<p><img src="/2023/04/05/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/image-20230405104959491.png" alt="image-20230405104959491"></p>
<p><strong><em>项目的less配置：</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i craco-less@2.1.0-alpha.0 --save -D</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CraLessPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;craco-less&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = pathName=&gt;path.<span class="title function_">resolve</span>(__dirname, pathName)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//less</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">plugin</span>:<span class="title class_">CraLessPlugin</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// webpack</span></span><br><span class="line">    <span class="attr">webpack</span>:&#123;</span><br><span class="line">        <span class="attr">alias</span>:&#123;</span><br><span class="line">            <span class="string">&quot;@&quot;</span>:<span class="title function_">resolve</span>(<span class="string">&quot;src&quot;</span>),</span><br><span class="line">            <span class="string">&quot;components&quot;</span>:<span class="title function_">resolve</span>(<span class="string">&quot;src/components&quot;</span>),</span><br><span class="line">            <span class="string">&quot;utils&quot;</span>:<span class="title function_">resolve</span>(<span class="string">&quot;src/utils&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CSS样式的重置"><a href="#CSS样式的重置" class="headerlink" title="CSS样式的重置"></a>CSS样式的重置</h2><p><strong><em>对默认样式进行重置：</em></strong></p>
<ul>
<li>normalize.css</li>
<li>reset.css</li>
</ul>
<p><strong><em>normalize.css：</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install normalize.css --save</span><br></pre></td></tr></table></figure>
<p>在index.js中导入</p>
<p><strong><em>reset.css：</em></strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 把需要重置的元素名称放在这里 */</span></span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">p</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">form</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#484848</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="React全家桶配置"><a href="#React全家桶配置" class="headerlink" title="React全家桶配置"></a>React全家桶配置</h2><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-router-dom --save</span><br></pre></td></tr></table></figure>
<p><strong><em>index.js：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;@/App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;normalize.css&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/assets/css/reset.css&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HashRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* 懒加载是异步的，因此需要在保证异步未完成时提供一个可替换方案，可以是字符串也可以是组件 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&quot;locding&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong><em>router/index.js：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"><span class="comment">// 懒加载的实现</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Detail</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;@/viewer/detail&quot;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Entire</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;@/viewer/entire&quot;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;@/viewer/home&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span> /&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/entire&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Entire</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/detail&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span>/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure>
<p><a href>react中的路由设置</a></p>
<h3 id="Redux状态管理"><a href="#Redux状态管理" class="headerlink" title="Redux状态管理"></a>Redux状态管理</h3><ul>
<li>普通方式：目前使用效率依然非常高</li>
<li>@reduxjs/toolkit方式：推荐方式，未来的趋势</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux --save</span><br></pre></td></tr></table></figure>
<p><strong><em>普通方式：</em></strong></p>
<p><img src="/2023/04/05/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/image-20230405114121514.png" alt="image-20230405114121514"></p>
<ul>
<li><strong>reducer.js代码：</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state=initialState, action</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>index.js代码：</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure>
<p><strong><em>@reduxjs/toolkit方式：</em></strong></p>
<p><img src="/2023/04/05/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/image-20230405114538084.png" alt="image-20230405114538084"></p>
<ul>
<li><strong>home.js代码</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> honeSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;home&quot;</span>,</span><br><span class="line">    <span class="attr">initialState</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reducers</span>:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> honeSlice.<span class="property">reducer</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>index.js代码</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> homeReducer <span class="keyword">from</span> <span class="string">&quot;./modules/home&quot;</span></span><br><span class="line"><span class="keyword">import</span> entireReducer <span class="keyword">from</span> <span class="string">&quot;./modules/entire&quot;</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>:&#123;</span><br><span class="line">        <span class="attr">home</span>:homeReducer,</span><br><span class="line">        <span class="attr">entire</span>:entireReducer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<p><a href>React与Redux</a></p>
<h3 id="网络请求配置"><a href="#网络请求配置" class="headerlink" title="网络请求配置"></a>网络请求配置</h3><p><strong><em>发起网络请求库：</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/05/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/react%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/image-20230405120733930.png" alt="image-20230405120733930"></p>
<p><strong><em>index.js代码：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> owwRequest <span class="keyword">from</span> <span class="string">&quot;./request&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> owwRequest</span><br></pre></td></tr></table></figure>
<p><strong><em>request/index.js代码：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">BASE_URL</span>, <span class="variable constant_">TIMEOPUT</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./config&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OwwRequest</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">baseURL, timeout</span>)&#123;</span><br><span class="line">        <span class="comment">// 获取axios实例</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">            baseURL,</span><br><span class="line">            timeout</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 发起网络请求后的拦截</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">        &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">request</span>(<span class="params">config</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="title function_">request</span>(config)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">config</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;...config, <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">post</span>(<span class="params">config</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;...config, <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">OwwRequest</span>(<span class="variable constant_">BASE_URL</span>, <span class="variable constant_">TIMEOPUT</span>)</span><br></pre></td></tr></table></figure>
<p><strong><em>request/config.js：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">TIMEOPUT</span> = <span class="number">10000</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>this指向</title>
    <url>/2023/03/21/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/this%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<h1 id="this的绑定"><a href="#this的绑定" class="headerlink" title="this的绑定"></a>this的绑定</h1><h2 id="一-整理this的绑定规则"><a href="#一-整理this的绑定规则" class="headerlink" title="一. 整理this的绑定规则"></a>一. 整理this的绑定规则</h2><ul>
<li><p>默认绑定：独立函数调用，函数没有被绑定到某个对象上进行调用</p>
</li>
<li><p>隐式绑定：通过某个对象发起的函数调用，在调用对象内部有一个对函数的引用。</p>
</li>
<li><p>显式绑定：明确this指向的对象，第一个参数相同并要求传入一个对象。</p>
<ul>
<li>apply/call</li>
<li>bind</li>
</ul>
</li>
<li><p>new绑定：</p>
<ul>
<li>创建一个全新对象</li>
<li>新对象被执行prototype链接</li>
<li>新对象绑定到函数调用的this</li>
<li>如果函数没有返回其他对象，表达式会返回这个对象</li>
</ul>
</li>
</ul>
<h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><p>默认绑定this一般情况下是window</p>
<p>在严格模式下this为undefined</p>
<p>es6后的class中函数默认为严格模式，即this为undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> <span class="title class_">Test</span>()</span><br><span class="line"><span class="keyword">const</span> bar = test.<span class="property">foo</span></span><br><span class="line"><span class="title function_">bar</span>() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>babel会将js设置为严格模式——在React框架下，隐式绑定都为undefined</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="二-说出apply、call、bind函数的用法和区别"><a href="#二-说出apply、call、bind函数的用法和区别" class="headerlink" title="二. 说出apply、call、bind函数的用法和区别"></a>二. 说出apply、call、bind函数的用法和区别</h2><p>​      用法：</p>
<ul>
<li><p>​    apply</p>
<p>​     第一个参数: 绑定this</p>
<p>​    第二个参数: 传入额外的实参, 以数组的形式</p>
</li>
<li><p>​    call</p>
<p>​    第一个参数: 绑定this</p>
<p>​    参数列表: 后续的参数以多参数的形式传递, 会作为实参</p>
</li>
<li><p>​    bind(不希望obj对象身上有函数)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(obj)</span><br><span class="line">​    <span class="title function_">bar</span>() <span class="comment">// this -&gt; obj</span></span><br></pre></td></tr></table></figure>
<p>区别：</p>
</li>
<li><p>call、apply和bind都可以改变函数的this指向</p>
</li>
<li><p>call、apply和bind第一个参数的是this要指向的对象</p>
</li>
<li><p>call、apply和bind都可以后续为函数传参，apply是将参数并成一个数组，call和bind是将参数依次列出</p>
</li>
<li><p>call、apply都是直接调用，bind生成的this指向改变函数需要手动调用。</p>
</li>
</ul>
<p>​        绑定优先级：</p>
<p>​        默认绑定的优先级最低、显示绑定的优先级高于隐式绑定、new绑定的优先级高于隐式绑定、new绑定优先级高于bind</p>
<p>​        new绑定和call、apply不可以一起使用</p>
<p>​        注：</p>
<p>​        显示绑定传入null或undefined，显示绑定会忽略使用默认规则</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">foo.<span class="title function_">call</span>(<span class="literal">null</span>)</span><br><span class="line">foo.<span class="title function_">call</span>(<span class="literal">undefined</span>)</span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="title function_">bar</span>() <span class="comment">// 都是windows</span></span><br></pre></td></tr></table></figure>
<h2 id="三-说出箭头函数的各种用法和简写"><a href="#三-说出箭头函数的各种用法和简写" class="headerlink" title="三. 说出箭头函数的各种用法和简写"></a>三. 说出箭头函数的各种用法和简写</h2><ul>
<li><p>基本写法</p>
<ul>
<li><p>()：函数的参数</p>
</li>
<li><p>{}:函数的执行体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var foo3 = (name, age) =&gt; &#123;</span><br><span class="line">    console.log(&quot;箭头函数的函数体&quot;)</span><br><span class="line">    console.log(name, age)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>优化写法</p>
<ul>
<li><p>只有一个参数时, 可以省略()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">names.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>只有一行代码时, 可以省略{}</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">names.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>只要一行代码时, 表达式的返回值会作为箭头函数默认返回值, 所以可以省略return</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newNums = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> newNums = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>如果箭头函数默认返回的是对象, 在省略{}的时候, 对象必须使用()包裹 () =&gt; ({name: “why”})</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">arrFn</span> = (<span class="params"></span>) =&gt; [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">arrFn</span> = (<span class="params"></span>) =&gt; &#123;&#125; <span class="comment">// 注意: 这里是&#123;&#125;执行体</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">arrFn</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrFn</span>())</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="四-完成this的面试题解析"><a href="#四-完成this的面试题解析" class="headerlink" title="四. 完成this的面试题解析"></a>四. 完成this的面试题解析</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;person&quot;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sss = person.<span class="property">sayName</span>;</span><br><span class="line">  <span class="title function_">sss</span>(); <span class="comment">// window</span></span><br><span class="line">  person.<span class="title function_">sayName</span>(); <span class="comment">// person</span></span><br><span class="line">  (person.<span class="property">sayName</span>)(); <span class="comment">// person</span></span><br><span class="line">  (b = person.<span class="property">sayName</span>)(); <span class="comment">// window </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;person1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo2</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">  <span class="attr">foo3</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo4</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;person2&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo1(); // person1</span></span><br><span class="line"><span class="comment">// person1.foo1.call(person2); // person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo2(); // window</span></span><br><span class="line"><span class="comment">// person1.foo2.call(person2); // window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo3()(); // window</span></span><br><span class="line"><span class="comment">// person1.foo3.call(person2)(); // window</span></span><br><span class="line"><span class="comment">// person1.foo3().call(person2); // person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo4()(); // person1</span></span><br><span class="line"><span class="comment">// person1.foo4.call(person2)(); // person2</span></span><br><span class="line"><span class="comment">// person1.foo4().call(person2); // person1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo2</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo3</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo4</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo1() // person1</span></span><br><span class="line"><span class="comment">// person1.foo1.call(person2) // person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo2() // person1</span></span><br><span class="line"><span class="comment">// person1.foo2.call(person2) // person1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo3()() // window</span></span><br><span class="line"><span class="comment">// person1.foo3.call(person2)() // window</span></span><br><span class="line"><span class="comment">// person1.foo3().call(person2) // person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.foo4()() // person1</span></span><br><span class="line"><span class="comment">// person1.foo4.call(person2)() // person2</span></span><br><span class="line"><span class="comment">// person1.foo4().call(person2) // person1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">obj</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">foo2</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.obj.foo1()() // window</span></span><br><span class="line"><span class="comment">// person1.obj.foo1.call(person2)() // window</span></span><br><span class="line"><span class="comment">// person1.obj.foo1().call(person2) // person2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person1.obj.foo2()() // obj</span></span><br><span class="line"><span class="comment">// person1.obj.foo2.call(person2)() // person2</span></span><br><span class="line"><span class="comment">// person1.obj.foo2().call(person2) // obj</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>事件总线</title>
    <url>/2023/03/25/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/</url>
    <content><![CDATA[<h1 id="事件总线（EventBus）"><a href="#事件总线（EventBus）" class="headerlink" title="事件总线（EventBus）"></a>事件总线（EventBus）</h1><p>事件总线是一种观察者模式，包括三个角色</p>
<ul>
<li><strong><em>发布者：</em></strong>发布事件</li>
<li><strong><em>订阅者：</em></strong>订阅事件，并进行响应</li>
<li><strong><em>时间总线：</em></strong>无论发布者还是订阅者都通过事件总线作为中台</li>
</ul>
<p><strong><em>目的：</em></strong>开发过程中不同组件之间通信 <a href>组件通信</a></p>
<h2 id="事件总线的实现"><a href="#事件总线的实现" class="headerlink" title="事件总线的实现"></a>事件总线的实现</h2><ul>
<li>事件的监听方法on</li>
<li>事件的发射方法emit</li>
<li>事件的取消监听off</li>
</ul>
<p>由于一个EventBus对象会在多个地方使用，所以将其中的属性和函数定义为静态的</p>
<p>也可采用实例化的方法，那样需要把这个实例放在全局变量中，如在React在根节点定义Context</p>
<p><strong><em>EventBus的实现：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> eventMap = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">on</span>(<span class="params">eventName, eventFn</span>)&#123;</span><br><span class="line">        (<span class="variable language_">this</span>.<span class="property">eventMap</span>[eventName] || (<span class="variable language_">this</span>.<span class="property">eventMap</span>[eventName] = []))&amp;&amp;<span class="variable language_">this</span>.<span class="property">eventMap</span>[eventName].<span class="title function_">push</span>(eventFn)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">emit</span>(<span class="params">eventName, ...args</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">eventMap</span>[eventName])&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(eventName,<span class="string">&quot;没有监听&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> fun <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">eventMap</span>[eventName])&#123;</span><br><span class="line">            fun.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">off</span>(<span class="params">eventName, eventFn</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> eventFns = <span class="variable language_">this</span>.<span class="property">eventMap</span>[eventName]</span><br><span class="line">        <span class="keyword">if</span>(!eventFns)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(eventName,<span class="string">&quot;没有监听&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;eventFns.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(eventFn===eventFns[i])&#123;</span><br><span class="line">                eventFns.<span class="title function_">splice</span>(i,<span class="number">1</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">eventMap</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>EventBus的使用：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> function1 = <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;function1&quot;</span>, <span class="variable language_">this</span>.<span class="property">eventMap</span>, args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> function2 = <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;function2&quot;</span>, <span class="variable language_">this</span>.<span class="property">eventMap</span>, args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">EventBus</span>.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,function1)</span><br><span class="line"><span class="title class_">EventBus</span>.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,function2)</span><br><span class="line"></span><br><span class="line"><span class="title class_">EventBus</span>.<span class="title function_">on</span>(<span class="string">&quot;click2&quot;</span>,function1)</span><br><span class="line"></span><br><span class="line"><span class="title class_">EventBus</span>.<span class="title function_">emit</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;oww&quot;</span>, <span class="string">&quot;18&quot;</span>)</span><br><span class="line"><span class="title class_">EventBus</span>.<span class="title function_">emit</span>(<span class="string">&quot;click2&quot;</span>, <span class="string">&quot;oww1&quot;</span>, <span class="string">&quot;22&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">EventBus</span>.<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>,function2)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/25/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/image-20230325134633475.png" alt="image-20230325134633475"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理和闭包</title>
    <url>/2023/04/04/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p><strong><em>内存的管理都会有如下的生命周期：</em></strong></p>
<ul>
<li>第一步：分配申请你需要的内存（申请）</li>
<li>第二步：使用分配的内存（存放一些东西，比如对象等）</li>
<li>第三步：不需要使用时，对其进行释放</li>
</ul>
<p><strong><em>不同的编程语言对于第一步和第三步会有不同的实现：</em></strong></p>
<ul>
<li>手动管理内存：比如C、C++，包括早期的OC，都是需要手动来管理内存的申请和释放的（malloc和free函数）</li>
<li>自动管理内存：比如Java、JavaScript、Python、Swift、Dart等，它们有自动帮助我们管理内存</li>
</ul>
<p><strong><em>对于开发者来说，JavaScript 的内存管理是自动的、无形的：</em></strong></p>
<ul>
<li>我们创建的原始值、对象、函数……这一切都会占用内存</li>
<li>但是我们并不需要手动来对它们进行管理，JavaScript引擎会帮助我们处理好它</li>
</ul>
<h1 id="JavaScript内存管理"><a href="#JavaScript内存管理" class="headerlink" title="JavaScript内存管理"></a>JavaScript内存管理</h1><ul>
<li>JS对于原始数据类型内存的分配会在执行时， 直接在栈空间进行分配</li>
<li>JS对于复杂数据类型内存的分配会在堆内存中 开辟一块空间，并且将这块空间的指针返回值 变量引用</li>
</ul>
<p><img src="/2023/04/04/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/image-20230404202250630.png" alt="image-20230404202250630"></p>
<h1 id="JavaScript的垃圾回收"><a href="#JavaScript的垃圾回收" class="headerlink" title="JavaScript的垃圾回收"></a>JavaScript的垃圾回收</h1><p><strong><em>因为内存的大小是有限的，所以当内存不再需要的时候，我们需要对其进行释放，以便腾出更多的内存空间</em></strong></p>
<p><strong><em>在手动管理内存的语言中，我们需要通过一些方式自己来释放不再需要的内存，比如free函数：</em></strong></p>
<ul>
<li>但是这种管理的方式其实非常的低效，影响我们编写逻辑的代码的效率</li>
<li>并且这种方式对开发者的要求也很高，并且一不小心就会产生内存泄露</li>
</ul>
<p><strong><em>垃圾回收的英文是Garbage Collection，简称GC</em></strong></p>
<h2 id="常见GC算法——引用计数"><a href="#常见GC算法——引用计数" class="headerlink" title="常见GC算法——引用计数"></a>常见GC算法——引用计数</h2><p><strong><em>引用计数：</em></strong></p>
<ul>
<li><p>当一个对象有一个引用指向它时，那么这个对象的引用就+1</p>
</li>
<li><p>当一个对象的引用为0时，这个对象就可以被销毁掉</p>
</li>
<li><p>循环引用不会被销毁</p>
<p><img src="/2023/04/04/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/image-20230404202553182.png" alt="image-20230404202553182"></p>
</li>
</ul>
<h2 id="常见GC算法——标记清除"><a href="#常见GC算法——标记清除" class="headerlink" title="常见GC算法——标记清除"></a>常见GC算法——标记清除</h2><p><strong><em>标记清除：</em></strong></p>
<ul>
<li>标记清除的核心思路是可达性（Reachability）</li>
<li>这个算法是设置一个根对象（root object），垃圾回收器会定期从这个根开始，找所有从根开始有引用到的对象，对于哪些 没有引用到的对象，就认为是不可用的对象</li>
<li>这个算法可以很好的解决循环引用的问题</li>
</ul>
<h2 id="常见GC算法——算法优化"><a href="#常见GC算法——算法优化" class="headerlink" title="常见GC算法——算法优化"></a>常见GC算法——算法优化</h2><h3 id="标记整理法"><a href="#标记整理法" class="headerlink" title="标记整理法"></a>标记整理法</h3><ul>
<li>不同的是，回收期间同时会将保留的存储对象搬运汇集到连续的内存空间，从而<strong>整合空闲空间，避免内存碎片化</strong></li>
</ul>
<h3 id="分代收集法"><a href="#分代收集法" class="headerlink" title="分代收集法"></a>分代收集法</h3><ul>
<li>对象被分成两组：“新的”和“旧的”</li>
<li>许多对象出现，完成它们的工作并很快死去，它们可以很快被清理</li>
<li>那些长期存活的对象会变得“老旧”，而且被检查的频次也会减少</li>
</ul>
<h3 id="增量收集"><a href="#增量收集" class="headerlink" title="增量收集"></a>增量收集</h3><ul>
<li>如果有许多对象，并且我们试图一次遍历并标记整个对象集，则可能需要一些时间，并在执行过程中带来明显的延迟</li>
<li>所以引擎试图将垃圾收集工作分成几部分来做，然后将这几部分会逐一进行处理，这样会有许多微小的延迟而不是一个大的 延迟</li>
</ul>
<h3 id="闲时收集"><a href="#闲时收集" class="headerlink" title="闲时收集"></a>闲时收集</h3><ul>
<li>垃圾收集器只会在 CPU 空闲时尝试运行，以减少可能对代码执行的影响</li>
</ul>
<p><img src="/2023/04/04/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/image-20230404203527050.png" alt="image-20230404203527050"></p>
<h1 id="JavaScript闭包"><a href="#JavaScript闭包" class="headerlink" title="JavaScript闭包"></a>JavaScript闭包</h1><h2 id="JavaScript函数式编程"><a href="#JavaScript函数式编程" class="headerlink" title="JavaScript函数式编程"></a>JavaScript函数式编程</h2><ul>
<li>在JavaScript中，函数是非常重要的，并且是一等公民<ul>
<li>那么就意味着函数的使用是非常灵活的</li>
<li>函数可以作为另外一个函数的参数，也可以作为另外一个函数的返回值来使用</li>
</ul>
</li>
<li>avaScript存在很多的高阶函数<ul>
<li>自己编写高阶函数</li>
<li>使用内置的高阶函数</li>
</ul>
</li>
</ul>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul>
<li>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包</li>
<li>闭包让你可以在一个内层函数中访问到其外层函数的作用域</li>
<li>在  JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来</li>
</ul>
<ul>
<li>个普通的函数function，如果它可以访问外层作用域的自由变量，那么这个函数和周围环境就是一个闭包</li>
<li>从广义的角度来说：JavaScript中的函数都是闭包</li>
<li>从狭义的角度来说：JavaScript中一个函数，如果访问了外层作用域的变量，那么它是一个闭包</li>
</ul>
<p><strong><em>闭包访问过程：</em></strong></p>
<p><img src="/2023/04/04/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/image-20230404204008476.png" alt="image-20230404204008476"></p>
<p><img src="/2023/04/04/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/image-20230404204014899.png" alt="image-20230404204014899"></p>
<p><strong><em>闭包执行过程：</em></strong></p>
<ul>
<li><p>makeAdder函数执行完毕，正常情况下我们的AO对象会被释放</p>
</li>
<li><p>但是因为在0xb00的函数中有作用域引用指向了这个AO对象，所以它不会被释放掉</p>
<p><img src="/2023/04/04/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/image-20230404204409944.png" alt="image-20230404204409944"></p>
</li>
</ul>
<p><strong><em>闭包的内存泄露问题：</em></strong></p>
<ul>
<li>因为在全局作用域下add10变量对0xb00的函数对象有引用，而0xb00的作用域中AO（0x200）有引用，所以最终 会造成这些内存都是无法被释放的</li>
<li>所以我们经常说的闭包会造成内存泄露，其实就是刚才的引用链中的所有对象都是无法释放的</li>
<li>因为当将add10设置为null时，就不再对函数对象0xb00有引用，那么对应的AO对象0x200也就不可达了</li>
<li>在GC的下一次检测中，它们就会被销毁掉</li>
</ul>
<h3 id="AO不使用的属性优化："><a href="#AO不使用的属性优化：" class="headerlink" title="AO不使用的属性优化："></a>AO不使用的属性优化：</h3><p><strong><em>AO对象不会被销毁时，是否里面的所有属性都不会被释放？</em></strong></p>
<ul>
<li><p>下面这段代码中name属于闭包的父作用域里面的变量</p>
</li>
<li><p>我们知道形成闭包之后count一定不会被销毁掉，那么name是否会被销毁掉呢</p>
<p><img src="/2023/04/04/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/image-20230404204655316.png" alt="image-20230404204655316"></p>
<p><img src="/2023/04/04/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/image-20230404204704016.png" alt="image-20230404204704016"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>常见手写函数</title>
    <url>/2023/03/25/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%B8%B8%E8%A7%81%E6%89%8B%E5%86%99%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="一、柯里化函数"><a href="#一、柯里化函数" class="headerlink" title="一、柯里化函数"></a>一、柯里化函数</h1><p><strong><em>柯里化：</em></strong></p>
<p>把接收多个参数的函数，变成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数，而且返回 结果的新函数的技术</p>
<p>只传递给函数一部分参数来调用它，让它返回一个函数去处理剩余的参数</p>
<h2 id="实现多数字加法的柯里化"><a href="#实现多数字加法的柯里化" class="headerlink" title="实现多数字加法的柯里化"></a>实现多数字加法的柯里化</h2><p><strong><em>加法函数：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add0 = <span class="keyword">function</span>(<span class="params">x,y,z</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>柯里化函数：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add1 = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">y</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">z</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y + z</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>箭头函数优化：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">add2</span> = x=&gt;<span class="function"><span class="params">y</span>=&gt;</span><span class="function"><span class="params">z</span>=&gt;</span>x+y+z</span><br></pre></td></tr></table></figure>
<p><strong><em>考虑会同时传递进去1个或2个参数</em></strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">add3</span> = (<span class="params">...args</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(args.<span class="property">length</span>===<span class="number">3</span>) <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,curr</span>)=&gt;</span>prev+curr)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...other</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">add3</span>(...args,...other)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 未考虑传入参数大于3个时的边界情况</span></span><br></pre></td></tr></table></figure>
<p><strong><em>如果我们想得到可以获取不同个参数的柯里化函数呢，自动柯里化：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">x,y,z,g</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y+z+g</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curryMyFn= <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> curryFn = <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(args.<span class="property">length</span>&gt;=fn.<span class="property">length</span>) <span class="keyword">return</span> <span class="title function_">fn</span>(...args)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">...newArgs</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">curryFn</span>(...args.<span class="title function_">concat</span>(newArgs))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="title function_">curryMyFn</span>(fn)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bar</span>(<span class="number">10</span>,<span class="number">20</span>)(<span class="number">40</span>,<span class="number">50</span>))</span><br></pre></td></tr></table></figure>
<h1 id="二、apply、call、bind的手写"><a href="#二、apply、call、bind的手写" class="headerlink" title="二、apply、call、bind的手写"></a>二、apply、call、bind的手写</h1><p><a href>this绑定</a></p>
<ul>
<li>this绑定共4种，默认绑定、隐式绑定、显示绑定、new绑定</li>
<li>实现显示绑定即是通过其余简单绑定方式实现，而默认绑定的this一般为windows，所以这里只能用隐式绑定实现</li>
</ul>
<h2 id="apply与call的手写实现"><a href="#apply与call的手写实现" class="headerlink" title="apply与call的手写实现"></a>apply与call的手写实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过symbol实现apply</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">thisArgs, args</span>)&#123;</span><br><span class="line">    thisArgs = (thisArgs===<span class="literal">null</span> || thisArgs ===<span class="literal">undefined</span>)?<span class="attr">window</span>:<span class="title class_">Object</span>(thisArgs)</span><br><span class="line">    <span class="keyword">let</span> symbol = <span class="title class_">Symbol</span>()</span><br><span class="line">    thisArgs[symbol] = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">let</span> fn = thisArgs[symbol](...args)</span><br><span class="line">    <span class="keyword">delete</span> thisArgs[symbol]</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过symbol实现call</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">thisArgs, ...args</span>)&#123;</span><br><span class="line">    thisArgs = (thisArgs===<span class="literal">null</span> || thisArgs ===<span class="literal">undefined</span>)?<span class="attr">window</span>:<span class="title class_">Object</span>(thisArgs)</span><br><span class="line">    <span class="keyword">let</span> symbol = <span class="title class_">Symbol</span>()</span><br><span class="line">    thisArgs[symbol] = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">let</span> fn = thisArgs[symbol](...args)</span><br><span class="line">    <span class="keyword">delete</span> thisArgs[symbol]</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不通过symbol、定义属性不可枚举</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply1</span> = <span class="keyword">function</span>(<span class="params">thisArgs, args</span>)&#123;</span><br><span class="line">    thisArgs = (thisArgs===<span class="literal">null</span> || thisArgs ===<span class="literal">undefined</span>)?<span class="attr">window</span>:<span class="title class_">Object</span>(thisArgs)</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(thisArgs, <span class="string">&quot;temp&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="title class_">Enumerable</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">value</span>:<span class="variable language_">this</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> fn = thisArgs[<span class="string">&quot;temp&quot;</span>](...args)</span><br><span class="line">    <span class="keyword">delete</span> thisArgs[<span class="string">&quot;temp&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不通过symbol且不定义属性不可枚举</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply2</span> = <span class="keyword">function</span>(<span class="params">thisArgs, args</span>)&#123;</span><br><span class="line">    thisArgs = (thisArgs===<span class="literal">null</span> || thisArgs ===<span class="literal">undefined</span>)?<span class="attr">window</span>:<span class="title class_">Object</span>(thisArgs)</span><br><span class="line">    thisArgs.<span class="property">temp</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">let</span> fn = thisArgs.<span class="title function_">temp</span>(...args)</span><br><span class="line">    <span class="keyword">delete</span> thisArgs.<span class="property">temp</span></span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>首先要排除thisArgs为null或undefined的情况，同时对数字或字符串包装为对象（Object(object)还是object）</li>
<li>方法添加到Function的原型上，使得所有函数都可以直接调用</li>
<li>使用symbol是因为Symbol()可以创建出一个独一无二的值，那么肯定不会覆盖掉原来对象中可能存在的值，同时Symbol属性不可以通过简单的属性获取得到，在后续的逻辑编写中不会出现错误</li>
<li>如果不适用Symbol，则需要通过Object.defineProperty使其不可枚举<a href>Object.defineProperty</a></li>
</ul>
<p><strong><em>测试：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bar = <span class="keyword">function</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>),name,age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.<span class="title function_">myApply</span>(&#123;<span class="attr">method</span>:<span class="string">&quot;myApply-symbol&quot;</span>&#125;,[<span class="string">&quot;ouwenwu&quot;</span>,<span class="number">18</span>])</span><br><span class="line">bar.<span class="title function_">myApply1</span>(&#123;<span class="attr">method</span>:<span class="string">&quot;myApply-没有symbol-不枚举&quot;</span>&#125;,[<span class="string">&quot;ouwenwu&quot;</span>,<span class="number">18</span>])</span><br><span class="line">bar.<span class="title function_">myApply2</span>(&#123;<span class="attr">method</span>:<span class="string">&quot;myApply-没有symbol-枚举&quot;</span>&#125;,[<span class="string">&quot;ouwenwu&quot;</span>,<span class="number">18</span>])</span><br><span class="line">bar.<span class="title function_">apply</span>(&#123;<span class="attr">method</span>:<span class="string">&quot;apply-js自带&quot;</span>&#125;,[<span class="string">&quot;ouwenwu&quot;</span>,<span class="number">18</span>])</span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/25/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%B8%B8%E8%A7%81%E6%89%8B%E5%86%99%E5%87%BD%E6%95%B0/image-20230326222135494.png" alt="image-20230326222135494"></p>
<p><strong><em>综上：</em></strong>直接使用symbol属性来完成手写</p>
<h2 id="bind的手写实现"><a href="#bind的手写实现" class="headerlink" title="bind的手写实现"></a>bind的手写实现</h2><p>根据上面的经验，这里直接用symbol</p>
<p>bind与apply、call的区别主要是返回一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">thisArgs,...args</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> symbol = <span class="title class_">Symbol</span>()</span><br><span class="line">    thisArgs[symbol] = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> thisArgs[symbol](...args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、es5继承的实现"><a href="#三、es5继承的实现" class="headerlink" title="三、es5继承的实现"></a>三、es5继承的实现</h1><p><strong><em>继承：子类继承父类的函数与属性</em></strong></p>
<p><strong><em>注：类具有显示原型、对象具有隐式原型</em></strong></p>
<h2 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h2><p><strong>父类的实例化对象作为子类的显示原型——就可以通过原型链去访问得到父类的属性与方法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">name</span> = name,</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">age</span> = age</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eating</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eating&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;oww&quot;</span>, <span class="number">23</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">sno</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">sno</span> = sno</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = person</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">studying</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;studying&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;111&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        student.<span class="title function_">eating</span>()</span></span><br><span class="line"><span class="language-javascript">        student.<span class="title function_">studying</span>()</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/25/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E5%B8%B8%E8%A7%81%E6%89%8B%E5%86%99%E5%87%BD%E6%95%B0/image-20230405183113993.png" alt="image-20230405183113993"></p>
<p><strong><em>有一个很大的弊端：某些属性其实是保存在p对象上的：</em></strong></p>
<ul>
<li>我们通过直接打印对象是看不到这个属性的</li>
<li>这个属性会被多个对象共享，如果这个对象是一个引用类型，那么就会造成问题——其他子类修改会同时改变这边</li>
<li>不能给Person传递参数（让每个stu有自己的属性），因为这个对象是一次性创建的（没办法定制化）——子类的name、age在student中写死了</li>
</ul>
<h2 id="2-借用构造函数继承"><a href="#2-借用构造函数继承" class="headerlink" title="2.借用构造函数继承"></a>2.借用构造函数继承</h2><p><strong><em>原型链继承子类中的属性是通过父类实例定义的，没有自己的属性，不能传入值更改，借用构造函数可以解决这个问题</em></strong></p>
<ul>
<li>通过apply()和call()方法也可以在新创建的对象上执行父类构造函数</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建一个React项目及React基础</title>
    <url>/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAReact%E9%A1%B9%E7%9B%AE%E5%8F%8AReact%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><strong><em>官网：</em></strong><a href="https://zh-hans.reactjs.org/">https://zh-hans.reactjs.org/</a></p>
<h1 id="React简单项目创建（React一）"><a href="#React简单项目创建（React一）" class="headerlink" title="React简单项目创建（React一）"></a>React简单项目创建（React一）</h1><h2 id="React特点"><a href="#React特点" class="headerlink" title="React特点"></a>React特点</h2><ul>
<li>声明书编程：只需要维护自己的状态，当状态改变时，React可以根据最新的状态去渲染UI界面</li>
<li>组件化开发：将复杂的界面拆分为一个个小的组件</li>
<li>多平台适配：React(Web)、ReactNative(移动端平台)、ReactVR(虚拟现实Web应用程序)——虚拟DOM也对跨平台有很大用处</li>
</ul>
<h2 id="React开发依赖"><a href="#React开发依赖" class="headerlink" title="React开发依赖"></a>React开发依赖</h2><ul>
<li><strong><em>react：</em></strong>react所必须的核心代码</li>
<li><strong><em>react-dom：</em></strong>react渲染在不同平台上所需要的核心代码——虚拟DOM→真实DOM（浏览器）/原生控件（移动端）</li>
<li><strong><em>babel：</em></strong>将jsx转换为React代码的工具，如果直接用React.createElement来写React对象，可以不用babel，同时可以将ES6转换为ES5语法</li>
</ul>
<p>react CDN引入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@18/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="React第一个Hello-World"><a href="#React第一个Hello-World" class="headerlink" title="React第一个Hello World"></a>React第一个Hello World</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- root作为根节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> message = <span class="string">&quot;hello World&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong><em>注：</em></strong></p>
<ul>
<li>script一定要设置 type=”text/babel” 否则不会被babel解析，jsx语法就不能识别</li>
<li>ReactDom.createRoot()是创建一个React根，不一定是整个html的根</li>
<li>render函数，参数是要渲染的组件</li>
<li>{}语法可以引入JavaScript语法</li>
</ul>
<h1 id="React组件化开发"><a href="#React组件化开发" class="headerlink" title="React组件化开发"></a>React组件化开发</h1><p><strong><em>组件化开发：</em></strong>root.render参数是一个HTML元素或一个组件，那么可以将复杂的业务逻辑封装到一个组件中，然后传入到ReactDom.render中</p>
<p><strong><em>React组件：</em></strong></p>
<ul>
<li>类组件与函数组件</li>
<li>根据内部是否有状态需要维护：无状态组件、有状态组件（this.state，不考虑hooks的情况下函数组件是无状态组件，而类组件不定义this.state也可以看做无状态组件）</li>
<li>根据组件的不同职责：展示型组件、容器型组件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">movies</span>:[<span class="string">&quot;盗梦空间&quot;</span>,<span class="string">&quot;星际穿越&quot;</span>,<span class="string">&quot;大话西游&quot;</span>,<span class="string">&quot;流浪地球&quot;</span>],</span><br><span class="line">            <span class="attr">currentIndex</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clickLi</span>(<span class="params">event,index</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">currentIndex</span>:index&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	&#123;this.state.movies.map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">           			 return( </span></span><br><span class="line"><span class="language-xml">                			<span class="tag">&lt;<span class="name">li</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                				<span class="attr">key</span>=<span class="string">&#123;item&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        						<span class="attr">onClick</span>=<span class="string">&#123;(event)</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">            						this.clickLi(event,index)</span></span><br><span class="line"><span class="language-xml">        						&#125;&#125; </span></span><br><span class="line"><span class="language-xml">    							className = &#123;index===this.state.currentIndex?&quot;active&quot;:&quot;&quot;&#125;&gt;&#123;item&#125;</span></span><br><span class="line"><span class="language-xml">    						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    					)</span></span><br><span class="line"><span class="language-xml">				&#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>)</span><br></pre></td></tr></table></figure>
<h2 id="数据依赖"><a href="#数据依赖" class="headerlink" title="数据依赖"></a>数据依赖</h2><ul>
<li><strong><em>参与界面更新的数据：</em></strong>当数据改变时，需要更新组件渲染的数据（调用this.setState更新数据会自动检测改变的变量，并重新执行render函数更新页面）——参与数据流，放入当前对象的state对象中</li>
<li><strong><em>不参与页面更新的数据：</em></strong>数据改变时，不需要更新页面的数据</li>
</ul>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p><strong><em>this指向问题：</em></strong></p>
<ul>
<li>babel默认严格模式，那么默认调用的函数的this为undefined</li>
<li>一般的button点击，this指向button本身，但是这里调用的button是一个React的Element对象，并不是页面中的button，是React内部调用响应函数，因此不知道如何绑定正确的this</li>
</ul>
<p><strong><em>绑定this方法：</em></strong></p>
<ul>
<li><p>bind方法：调用bind方法生成一个带特定this的函数赋值给onClick</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;this.changeText.bind(this)&#125;&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数方法：如上面代码，给onClick赋值一个箭头函数，在箭头函数中调用隐式绑定想要运行的函数，箭头函数由于没有this，会向上寻找到this即class对象</p>
</li>
</ul>
<p><strong><em>事件参数传递：</em></strong>点击函数会传入一个event，可以将event与其他的参数放在箭头函数里面调用函数时传给最后的响应函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li onClick=&#123;event=&gt;this.clickLi(event,&quot;oww&quot;,&quot;22&quot;)&#125;&gt;按钮&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<h2 id="map映射"><a href="#map映射" class="headerlink" title="map映射"></a>map映射</h2><p>往往会从数据数组中得到要展示的Element列表，就可以使用map映射</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;this.state.movies.map((item,index)=&gt;&#123;</span><br><span class="line">        return( </span><br><span class="line">            &lt;li </span><br><span class="line">                key=&#123;item&#125; </span><br><span class="line">                onClick=&#123;(event)=&gt;&#123;</span><br><span class="line">                    this.clickLi(event,index)</span><br><span class="line">                &#125;&#125; </span><br><span class="line">                className = &#123;index===this.state.currentIndex?&quot;active&quot;:&quot;&quot;&#125;&gt;&#123;item&#125;</span><br><span class="line">			&lt;/li&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;)&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h1 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const element = &lt;div&gt;Hello World&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>类似于上诉代码的形式就是一个JSX代码</p>
<p><strong><em>React选择JSX的理由：</em></strong></p>
<ul>
<li><p>React认为渲染逻辑本质上与其他UI逻辑存在耦合（UI需要绑定事件、UI需要展示数据状态、状态改变时，又会改变UI）</p>
</li>
<li><p>因为渲染逻辑与UI逻辑的耦合，React没有将标记分离到不同的文件中，而是组合在一起形成组件</p>
</li>
</ul>
<p>注：JSX只能有一个根元素，也就是上面不能存在两个兄弟DIV，实在需要可以用数组[]包围，JSX中的单标签必须以/&gt;结尾</p>
<h3 id="JSX中的变量"><a href="#JSX中的变量" class="headerlink" title="JSX中的变量"></a>JSX中的变量</h3><ul>
<li>Number、String、Array可以直接显示</li>
<li>null、undefined、Boolean内容为空，如确实要显示，转换为字符串后使用</li>
<li>嵌入表达式使用（运算表达式、三元运算符、执行函数——是一个函数的执行得到返回值）</li>
<li>Object对象不能作为子元素</li>
</ul>
<h3 id="JSX绑定属性"><a href="#JSX绑定属性" class="headerlink" title="JSX绑定属性"></a>JSX绑定属性</h3><ul>
<li><strong><em>title属性/img的src属性/a元素href属性：</em></strong>直接使用title/src/href=””/{}</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const element = &lt;h2 title=&quot;h2&quot;&gt;哈哈哈&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong><em>class属性：</em></strong>小驼峰法className设置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const element = &lt;h2 className=&#123;&#x27;abc cba $&#123;isActive?&#x27;active&#x27;:&#x27;&#x27;&#125;&#x27;&#125;&gt;哈哈哈&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong><em>内联style属性：</em></strong>style=””/{}设置——外层{}是JSX语法，里层{}是包裹对象，font-size要用小驼峰法fontSize</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const element= &lt;h2 style=&#123;&#123;color:&quot;red&quot;, fontSize:&quot;30px&quot;&#125;&#125;&gt;哈哈哈&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<h3 id="JSX本质"><a href="#JSX本质" class="headerlink" title="JSX本质"></a>JSX本质</h3><p>JSX实际上是React.createElement的语法糖，下面两种方法等效，label会将JSX转换为React对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const element = React.createElement(&#x27;div&#x27;,&#123;class:&quot;active&quot;,style=&#123;color:&quot;red&quot;&#125;&#125;,children)</span><br><span class="line">const element = &lt;div className = &quot;active&quot; style=&#123;&#123;color:&quot;red&quot;&#125;&#125;&gt;children1,children2&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h1 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h1><ul>
<li><p>通过React.createElement最终可以创建出一个ReactElement对象，其与其子元素构成一个对象树，这个树就是<strong>虚拟DOM</strong></p>
</li>
<li><p>React从JSX到真实DOM的流程：</p>
<p><img src="/2023/03/24/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAReact%E9%A1%B9%E7%9B%AE%E5%8F%8AReact%E5%9F%BA%E7%A1%80/image-20230324165543425.png" alt="image-20230324165543425"></p>
</li>
</ul>
<h2 id="虚拟DOM帮助实现声明式编程"><a href="#虚拟DOM帮助实现声明式编程" class="headerlink" title="虚拟DOM帮助实现声明式编程"></a>虚拟DOM帮助实现声明式编程</h2><p><strong><em>虚拟DOM：</em></strong>虚拟DOM是一种编程理念</p>
<ul>
<li>UI以一种虚拟化的方式保存在内存中，是一个较为简单的JavaScript对象</li>
<li>通过ReactDom.render函数让虚拟DOM与真实DOM同步起来，这一个步骤叫做协调</li>
<li>更新状态后整体刷新，而不是原生的局部刷新</li>
</ul>
<p><strong><em>Diff算法：</em></strong>如果简单的整体刷新会导致项目运行效率较低</p>
<ul>
<li>Diff算法对于没有改变的DOM节点，保持原样不动，仅仅创建并替换变更过的DOM节点，实现DOM节点复用</li>
<li>因此需要实现DOM节点的版本控制，如果对原生的DOM节点进行版本控制，会有大量的DOM查询操作，所以React将DOM的diff操作转移到轻量js对象上，可以避免大量的DOM操作，这个轻量的js对象就是虚拟DOM</li>
</ul>
<p><strong><em>实现过程：</em></strong></p>
<ul>
<li>维护一个使用JS对象表示的虚拟DOM，与真实DOM一一对应</li>
<li>对前后的虚拟DOM做diff操作，找到变化的虚拟DOM</li>
<li>将变化的DOM应用于真实DOM（<strong>不是不操作DOM，而是对DOM的操作次数降到最低</strong>）</li>
</ul>
<h3 id="React的声明式编程"><a href="#React的声明式编程" class="headerlink" title="React的声明式编程"></a>React的声明式编程</h3><ul>
<li>通过虚拟DOM表示希望UI是什么状态</li>
<li>React确保DOM和这些状态匹配</li>
<li>不需要直接进行DOM操作，而去改变虚拟DOM，从手动更改DOM、属性操作、事件处理中解放出来（传统的DOM API太多，操作复杂，容易出现Bug，代码不易维护），用户只需要关心状态和最终的UI样式</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器优化</title>
    <url>/2023/03/22/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="回流reflow和重绘repaint"><a href="#回流reflow和重绘repaint" class="headerlink" title="回流reflow和重绘repaint"></a>回流reflow和重绘repaint</h1><h2 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h2><p>第一次确定节点的大小和位置，称为布局</p>
<p>后续对节点的大小、位置修改并重新计算称为回流</p>
<h3 id="引起回流的情况"><a href="#引起回流的情况" class="headerlink" title="引起回流的情况"></a>引起回流的情况</h3><ul>
<li>DOM结构发生变化（添加或删除节点）</li>
<li>改变布局（修改width、height、padding、font-size等）</li>
<li>修改窗口大小</li>
<li>调用getComputedStyle方法获取尺寸、位置星系、</li>
</ul>
<h3 id="避免回流的方法"><a href="#避免回流的方法" class="headerlink" title="避免回流的方法"></a>避免回流的方法</h3><p>修改样式时尽量一次性修改，比如通过cssText修改，或者通过添加class修改，而不是对css的各种属性分次修改</p>
<p>避免频繁的操作DOM，可以使用虚拟DOM，或在父元素中要操作的DOM完成，再一次性更新到DOM中</p>
<h4 id="composite合成"><a href="#composite合成" class="headerlink" title="composite合成"></a>composite合成</h4><p>绘制的过程中，浏览器会将布局后的元素绘制到多个图层中</p>
<p>默认情况下，标准流中的内容被绘制在同一个图层，对于某些特殊的属性，会创建一个新的图层，这些图层可以利用GPU加速绘制</p>
<p>可以形成新的合成层的属性：3D transforms、video、canvas、iframe、opacity、position：fixed、will-change、animation或transition设置了opacity、transform</p>
<p>分层确实可以提高性能，但以内存管理为代价，因此不能作为Web性能优化的一部分过渡使用</p>
<h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2><p>第一次渲染内容称为绘制</p>
<p>后续重新渲染称为重绘</p>
<h3 id="引起重绘的情况"><a href="#引起重绘的情况" class="headerlink" title="引起重绘的情况"></a>引起重绘的情况</h3><p>修改背景颜色、文字颜色、边框颜色、样式等</p>
<p>注：回流一定引起重绘、因此回流是一件很消耗性能的事情，所以开发中要避免回流</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>节流与抖动</title>
    <url>/2023/03/21/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E8%8A%82%E6%B5%81%E4%B8%8E%E6%8A%96%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h1><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>当事件触发时，相应的函数并不会立即触发，而是会等待一定的时间</p>
<p>当事件密集触发时，函数的触发会被频繁的推迟</p>
<h3 id="防抖的应用场景："><a href="#防抖的应用场景：" class="headerlink" title="防抖的应用场景："></a>防抖的应用场景：</h3><p>输入框中频繁的输入内容，搜索或提交信息</p>
<p>平凡的点击按钮，触发某个事件</p>
<p>用户缩放浏览器的resize事件</p>
<p>如：输入macbook时，输入m联想，连续输入macbook不联想，在输入完一段时间后联想</p>
<h3 id="防抖的实现："><a href="#防抖的实现：" class="headerlink" title="防抖的实现："></a>防抖的实现：</h3><p>以input输入为例：</p>
<p>html代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;cancel&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>基本实现：</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器渲染原理</title>
    <url>/2023/03/22/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="网页解析过程："><a href="#网页解析过程：" class="headerlink" title="网页解析过程："></a>网页解析过程：</h1><p><img src="/2023/03/22/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/image-20230322214252101.png" alt="image-20230322214252101"></p>
<p><img src="/2023/03/22/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/image-20230322215014488.png" alt="image-20230322215014488"></p>
<h2 id="HTML解析过程"><a href="#HTML解析过程" class="headerlink" title="HTML解析过程"></a>HTML解析过程</h2><p>默认情况下服务器给浏览器返回index.html文件，因此解析HTML是所有步骤的开始，解析HTML过程会构建Dom Tree</p>
<p><img src="/2023/03/22/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/image-20230322215643759.png" alt="image-20230322215643759"></p>
<h2 id="生成CSS规则"><a href="#生成CSS规则" class="headerlink" title="生成CSS规则"></a>生成CSS规则</h2><p>在解析过程中，如果遇到CSS的link元素，会有浏览器下载对应的CSS文件（不会影响DOM）的解析</p>
<p>对CSS下载完成后，会对CSS文件进行解析，解析出规则树，即CSSOM</p>
<p><img src="/2023/03/22/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/image-20230322220941332.png" alt="image-20230322220941332"></p>
<h2 id="构建Render-Tree"><a href="#构建Render-Tree" class="headerlink" title="构建Render Tree"></a>构建Render Tree</h2><p>当DOM Tree和CSSOM Tree有了过后就可以两者结合构建Render Tree了</p>
<p><img src="/2023/03/22/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/image-20230322221500301.png" alt="image-20230322221500301"></p>
<p>注：link元素不会阻塞DOM Tree的构建，但会阻塞Render Tree的构建</p>
<p>​        Render Tree和Dom Tree并不是一一对应的关系，对于display为none的元素，不会出现在Render Tree中</p>
<h2 id="布局和绘制"><a href="#布局和绘制" class="headerlink" title="布局和绘制"></a>布局和绘制</h2><p>渲染树会显示每个节点的样式，但不会给出每个节点的尺寸和位置，布局就是确定渲染树中每个节点的宽度、高度和位置信息</p>
<p>绘制就是将布局阶段计算的每个frame转为屏幕上实际的像素点，包括将元素的可见部分进行绘制，比如文本、颜色、边框、阴影、替换元素</p>
<h2 id="script元素和页面解析的关系"><a href="#script元素和页面解析的关系" class="headerlink" title="script元素和页面解析的关系"></a>script元素和页面解析的关系</h2><p>在HTML解析过程中，遇到script元素是不能继续构建DOM Tree的；会首先下载JavaScript代码，并执行脚本，等脚本执行结束后，继续解析HTML，构建DOM Tree</p>
<p><strong><em>原因：</em></strong> JavaScript的一个作用是操作DOM，并修改DOM，如果等DOM Tree构建完成后执行JavaScript，会引起严重的回流和重绘，影像性能</p>
<p><strong><em>但是：</em></strong> 目前的Vue/React开发模式，脚本比HTML页面更重，等到JavaScript解析会造成页面阻塞，在脚本执行完成钱，用户在界面上看不到任何东西</p>
<h3 id="script解析优化：defer、async"><a href="#script解析优化：defer、async" class="headerlink" title="script解析优化：defer、async"></a>script解析优化：defer、async</h3><p><strong><em>defer：</em></strong> 浏览器不需要等到脚本下载，继续解析HTML，构建DOM Tree  </p>
<p>​              不会阻塞DOm Tree的构建，等到DOM Tree构建完成后，在DOMContentLoaded事件之前执行代码</p>
<p>​               带多个defer的脚本按顺序执行</p>
<p>​               从某种角度来说，defer可以提高性能，并且推荐放到head元素中</p>
<p>​                注：defer仅适用于外部脚本，对于script默认内容会忽略</p>
<p><strong><em>async：</em></strong>  脚本完全独立</p>
<p>​                浏览器不会因async阻塞</p>
<p>​                async不能保证不同脚本之间的顺序，独立下载、运行</p>
<p>​                async不能保证在DOMcontentLoaded之前或之后运行</p>
<p><strong><em>defer通常用于文档解析后会操作DOM的JavaScript代码，并且对多个script文件有顺序要求的</em></strong></p>
<p><strong><em>async通常用于独立的脚本，对其他脚本，DOM没有依赖的</em></strong></p>
<h2 id="回流和重绘（见浏览器优化）"><a href="#回流和重绘（见浏览器优化）" class="headerlink" title="回流和重绘（见浏览器优化）"></a>回流和重绘（见浏览器优化）</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络——OSI七层模型</title>
    <url>/2023/04/07/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p><img src="/2023/04/07/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/image-20230407160308173.png" alt="image-20230407160308173"></p>
<h1 id="一、物理层"><a href="#一、物理层" class="headerlink" title="一、物理层"></a>一、物理层</h1><p>​        <strong>物理层所传数据单位为比特</strong>。要求发送法发送1/0时，接受方应当准确接受到1/0。因此物理层要考虑用多大的电压代表1或0，以及接受方如何识别出发送法发送的比特。</p>
<p>​        物理层的作用正是要尽可能的屏蔽掉多种多样的传输媒体和通信手段的差异，使物理层上面的数据链路层感觉不到这些差异。</p>
<p>​        信道：向某一个方向传送信息的媒体。<strong><em>单工通信、半双工通信、全双工通信</em></strong></p>
<h1 id="二、数据链路层"><a href="#二、数据链路层" class="headerlink" title="二、数据链路层"></a>二、数据链路层</h1><p>​        两台主机之间的数据传输，总是在一段一段的链路上完成的，这就需要专门的链路层协议。在两个相邻节点之间传输数据时，数据链路层将网络层交下来的IP数据报组装成帧，<strong>两个相邻节点在链路中传送帧</strong>。</p>
<p>​        每一帧会包括必要的控制信息：同步信息、地址信息、差错控制。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>手势识别-mmpose</title>
    <url>/2023/07/31/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/%E6%89%8B%E5%8A%BF%E8%AF%86%E5%88%AB-mmpose/</url>
    <content><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p><a href="https://mmpose.readthedocs.io/zh_CN/latest/installation.html">安装 — MMPose 1.1.0 文档</a></p>
<p><strong><em>注意：</em></strong>python版本使用3.7的，要不然opencv会出错，什么原因不知道</p>
<p><a href>错误明细</a></p>
<h1 id="手势识别运行"><a href="#手势识别运行" class="headerlink" title="手势识别运行"></a>手势识别运行</h1><ul>
<li>图片手势识别</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python demo/topdown_demo_with_mmdet.py demo/mmdetection_cfg/cascade_rcnn_x101_64x4d_fpn_1class.py cascade_rcnn_x101_64x4d_fpn_20e_onehand10k-dac19597_20201030.pth configs/hand_2d_keypoint/topdown_heatmap/onehand10k/td-hm_hrnetv2-w18_8xb64-210e_onehand10k-256x256.py hrnetv2_w18_onehand10k_256x256-30bc9c6b_20210330.pth --input tests/data/onehand10k/9.jpg --show --draw-heatmap</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>手势识别</category>
      </categories>
      <tags>
        <tag>mmpose</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow（一）</title>
    <url>/2023/07/02/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/tensorflow/</url>
    <content><![CDATA[<h1 id="深度学习原理"><a href="#深度学习原理" class="headerlink" title="深度学习原理"></a>深度学习原理</h1><p><strong><em>梯度下降</em></strong></p>
<h1 id="深度学习简单实现"><a href="#深度学习简单实现" class="headerlink" title="深度学习简单实现"></a>深度学习简单实现</h1><h2 id="最基础线性规划实现"><a href="#最基础线性规划实现" class="headerlink" title="最基础线性规划实现"></a>最基础线性规划实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets</span><br><span class="line">(x, y), (x_val, y_val) = datasets.mnist.load_data()</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">x = tf.convert_to_tensor(x, dtype=tf.float32) / <span class="number">255.</span></span><br><span class="line">y = tf.convert_to_tensor(y, dtype=tf.int32)</span><br><span class="line"><span class="built_in">print</span>(x.shape, y.shape)</span><br><span class="line"><span class="comment"># 将x、y转为tensorflow的db</span></span><br><span class="line">train_dataset = tf.data.Dataset.from_tensor_slices((x, y))</span><br><span class="line"><span class="comment"># 设置batch</span></span><br><span class="line">train_dataset = train_dataset.batch(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [b, 784] =&gt; [b, 256] =&gt; [b, 128] =&gt; [b, 10]</span></span><br><span class="line"><span class="comment"># []</span></span><br><span class="line"><span class="comment"># 这是在计算过程中需要的参数，也是梯度下降时要变化的东西</span></span><br><span class="line">w1 = tf.Variable(tf.random.truncated_normal([<span class="number">784</span>, <span class="number">256</span>], stddev=<span class="number">0.1</span>))</span><br><span class="line">b1 = tf.Variable(tf.zeros([<span class="number">256</span>]))</span><br><span class="line">w2 = tf.Variable(tf.random.truncated_normal([<span class="number">256</span>, <span class="number">128</span>], stddev=<span class="number">0.1</span>))</span><br><span class="line">b2 = tf.Variable(tf.zeros([<span class="number">128</span>]))</span><br><span class="line">w3 = tf.Variable(tf.random.truncated_normal([<span class="number">128</span>, <span class="number">10</span>], stddev=<span class="number">0.1</span>))</span><br><span class="line">b3 = tf.Variable(tf.zeros([<span class="number">10</span>]))</span><br><span class="line"></span><br><span class="line">lr = <span class="number">1e-3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> step, (x, y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_dataset):</span><br><span class="line">    <span class="comment"># x:[128, 28, 28]</span></span><br><span class="line">    <span class="comment"># y:[128]</span></span><br><span class="line">    <span class="comment"># [b, 28, 28] =&gt; [b, 28*28]</span></span><br><span class="line">    x = tf.reshape(x, [-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        <span class="comment"># x:[b, 28*28]</span></span><br><span class="line">        <span class="comment"># h1 = x@w1 + b1</span></span><br><span class="line">        <span class="comment"># [b, 784]@[784, 256] + [256]=&gt;[b,256] + [256] =&gt; [b, 256]</span></span><br><span class="line">        h1 = x@w1 + b1</span><br><span class="line">        h1 = tf.nn.relu(h1)</span><br><span class="line">        <span class="comment"># [b, 256] =&gt; [b, 128]</span></span><br><span class="line">        h2 = h1@w2 + b2</span><br><span class="line">        h2 = tf.nn.relu(h2)</span><br><span class="line">        <span class="comment"># [b, 128] =&gt; [b, 10]</span></span><br><span class="line">        out = h2@w3 + b3</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute loss</span></span><br><span class="line">        <span class="comment"># out: [b, 10]</span></span><br><span class="line">        <span class="comment"># y:[b] =&gt; [b, 10]</span></span><br><span class="line">        y = tf.one_hot(y, depth=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># mse = mean(sum(y-out)^2)</span></span><br><span class="line">        <span class="comment"># [b,10]</span></span><br><span class="line">        loss = tf.square(y-out)</span><br><span class="line">        <span class="comment"># mean: scalar</span></span><br><span class="line">        loss = tf.reduce_mean(loss)</span><br><span class="line">	<span class="comment"># 梯度计算</span></span><br><span class="line">    grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])</span><br><span class="line">    <span class="comment"># 梯度更新</span></span><br><span class="line">    <span class="comment"># w1 = w1 - lr * grads[0]</span></span><br><span class="line">    w1.assign_sub(lr * grads[<span class="number">0</span>])</span><br><span class="line">    b1.assign_sub(lr * grads[<span class="number">1</span>])</span><br><span class="line">    w2.assign_sub(lr * grads[<span class="number">2</span>])</span><br><span class="line">    b2.assign_sub(lr * grads[<span class="number">3</span>])</span><br><span class="line">    w3.assign_sub(lr * grads[<span class="number">4</span>])</span><br><span class="line">    b3.assign_sub(lr * grads[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(step, <span class="string">&#x27;loss&#x27;</span>, <span class="built_in">float</span>(loss))</span><br></pre></td></tr></table></figure>
<h2 id="使用tensorflow的部分接口实现"><a href="#使用tensorflow的部分接口实现" class="headerlink" title="使用tensorflow的部分接口实现"></a>使用tensorflow的部分接口实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets, optimizers, Sequential, layers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_pre_process</span>(<span class="params">x, y</span>):</span><br><span class="line">    x = tf.cast(x, dtype=tf.float32) / <span class="number">255.</span></span><br><span class="line">    y = tf.cast(y, dtype=tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dataLoader</span>():</span><br><span class="line">    (x, y), (x_val, y_val) = datasets.fashion_mnist.load_data()</span><br><span class="line">    db = tf.data.Dataset.from_tensor_slices((x, y))</span><br><span class="line">    db = db.<span class="built_in">map</span>(data_pre_process).batch(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    db_val = tf.data.Dataset.from_tensor_slices((x_val, y_val))</span><br><span class="line">    db_val = db_val.<span class="built_in">map</span>(data_pre_process).batch(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> db, db_val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 数据加载</span></span><br><span class="line">    db, db_val = dataLoader()</span><br><span class="line"></span><br><span class="line">    model = Sequential([</span><br><span class="line">        layers.Dense(<span class="number">256</span>, activation=tf.nn.relu),</span><br><span class="line">        layers.Dense(<span class="number">128</span>, activation=tf.nn.relu),</span><br><span class="line">        layers.Dense(<span class="number">64</span>, activation=tf.nn.relu),</span><br><span class="line">        layers.Dense(<span class="number">32</span>, activation=tf.nn.relu),</span><br><span class="line">        layers.Dense(<span class="number">10</span>, activation=tf.nn.relu),</span><br><span class="line">    ])</span><br><span class="line">    model.build(input_shape=[<span class="literal">None</span>, <span class="number">28</span>*<span class="number">28</span>])</span><br><span class="line">    model.summary()</span><br><span class="line"></span><br><span class="line">    optimizers = optimizers.Adam(lr=<span class="number">1e-3</span>)</span><br><span class="line">    <span class="comment"># 迭代</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="comment"># 每次迭代过程中会根据batchsize分块计算</span></span><br><span class="line">        <span class="keyword">for</span> step, (x, y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(db):</span><br><span class="line">            x = tf.reshape(x, [-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>])</span><br><span class="line">            <span class="comment"># 梯度计算</span></span><br><span class="line">            <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">                logits = model(x)</span><br><span class="line">                y_onehot = tf.one_hot(y, depth=<span class="number">10</span>)</span><br><span class="line">                loss_mse = tf.reduce_mean(tf.losses.MSE(y_onehot, logits))</span><br><span class="line">                loss_ce = tf.reduce_mean(tf.losses.categorical_crossentropy(y_onehot, logits, from_logits=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">            grads = tape.gradient(loss_ce, model.trainable_variables)</span><br><span class="line">            <span class="comment"># 梯度更新</span></span><br><span class="line">            optimizers.apply_gradients(<span class="built_in">zip</span>(grads, model.trainable_variables))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(epoch, step, <span class="string">&#x27;loss:&#x27;</span>, <span class="built_in">float</span>(loss_ce), <span class="built_in">float</span>(loss_mse))</span><br><span class="line">        <span class="comment"># 测试/验证集精度计算</span></span><br><span class="line">        total_correct = <span class="number">0</span></span><br><span class="line">        total_num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> db_val:</span><br><span class="line">            x = tf.reshape(x, [-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>])</span><br><span class="line">            logits = model(x)</span><br><span class="line">            prob = tf.nn.softmax(logits, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            pred = tf.argmax(prob, axis=<span class="number">1</span>)</span><br><span class="line">            pred = tf.cast(pred, dtype=tf.int32)</span><br><span class="line"></span><br><span class="line">            correct = tf.equal(pred, y)</span><br><span class="line">            correct = tf.reduce_sum(tf.cast(correct, dtype=tf.int32))</span><br><span class="line">            total_correct += <span class="built_in">int</span>(correct)</span><br><span class="line">            total_num += x.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        acc = total_correct/total_num</span><br><span class="line">        <span class="built_in">print</span>(epoch, <span class="string">&#x27;test acc:&#x27;</span>, <span class="built_in">float</span>(acc))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="tensorflow高级api使用"><a href="#tensorflow高级api使用" class="headerlink" title="tensorflow高级api使用"></a>tensorflow高级api使用</h2><p>所有的深度学习都包含上面几个步骤</p>
<ul>
<li>加载数据</li>
<li>迭代</li>
<li>梯度更新</li>
<li>测试/验证精度计算</li>
</ul>
<p>因此，tensorflow将上面的固定步骤写在同一的接口中方便使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets, optimizers, Sequential, layers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_pre_process</span>(<span class="params">x, y</span>):</span><br><span class="line">    x = tf.cast(x, dtype=tf.float32) / <span class="number">255.</span></span><br><span class="line">    y = tf.cast(y, dtype=tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dataLoader</span>():</span><br><span class="line">    (x, y), (x_val, y_val) = datasets.fashion_mnist.load_data()</span><br><span class="line">    x = x.reshape(<span class="number">60000</span>, <span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line">    y = tf.one_hot(y, depth=<span class="number">10</span>)</span><br><span class="line">    db = tf.data.Dataset.from_tensor_slices((x, y))</span><br><span class="line">    db = db.<span class="built_in">map</span>(data_pre_process).batch(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    db_val = tf.data.Dataset.from_tensor_slices((x_val, y_val))</span><br><span class="line">    db_val = db_val.<span class="built_in">map</span>(data_pre_process).batch(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> db, db_val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    db, db_val = dataLoader()</span><br><span class="line"></span><br><span class="line">    model = Sequential([</span><br><span class="line">        layers.Dense(<span class="number">256</span>, activation=tf.nn.relu),</span><br><span class="line">        layers.Dense(<span class="number">128</span>, activation=tf.nn.relu),</span><br><span class="line">        layers.Dense(<span class="number">64</span>, activation=tf.nn.relu),</span><br><span class="line">        layers.Dense(<span class="number">32</span>, activation=tf.nn.relu),</span><br><span class="line">        layers.Dense(<span class="number">10</span>, activation=tf.nn.relu),</span><br><span class="line">    ])</span><br><span class="line">    model.build(input_shape=[<span class="literal">None</span>, <span class="number">28</span>*<span class="number">28</span>])</span><br><span class="line">    model.summary()</span><br><span class="line">    <span class="comment"># compile中会提供若干参数，如梯度优化方式、误差计算方式、精度评定方式，当然还有更多参数，请阅读文档</span></span><br><span class="line">    model.<span class="built_in">compile</span>(optimizer=optimizers.Adam(lr=<span class="number">0.0001</span>), loss=tf.losses.CategoricalCrossentropy(from_logits=<span class="literal">True</span>),</span><br><span class="line">                  metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">	<span class="comment"># fit即开始训练，需要输入db和要迭代的次数，注意db中的x和y要和model的输入与输出维度一致</span></span><br><span class="line">    model.fit(db, epochs=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="过拟合和欠拟合"><a href="#过拟合和欠拟合" class="headerlink" title="过拟合和欠拟合"></a>过拟合和欠拟合</h2><p><strong><em>过拟合：</em></strong>训练精度很高，测试精度不够（可能）</p>
<p><strong><em>欠拟合：</em></strong>训练精度不够，测试精度也不够（可能）——模型复杂度不够</p>
<h3 id="过拟合解决"><a href="#过拟合解决" class="headerlink" title="过拟合解决"></a>过拟合解决</h3><ul>
<li>更多数据</li>
<li>更简单的模型</li>
<li>数据增强</li>
</ul>
<h4 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h4><p><img src="/2023/07/02/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/tensorflow/image-20230702195941412.png" alt="image-20230702195941412"></p>
<p>前面是误差，后面是参数的范式，参数的一范式越小说明参数越接近于0，那么拟合出来的模型就越平滑，出现过拟合的可能性就越小</p>
<p><img src="/2023/07/02/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/tensorflow/image-20230702200316610.png" alt="image-20230702200316610"></p>
<p>两张regularization方式，分别是一范数二范数</p>
<h4 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h4><p><img src="/2023/07/02/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/tensorflow/image-20230702200957049.png" alt="image-20230702200957049"></p>
<p>动量设置，参数更改的不仅仅由当前梯度的影像，还与上一次梯度的方向有关</p>
<h4 id="Learning-rate"><a href="#Learning-rate" class="headerlink" title="Learning rate"></a>Learning rate</h4><p><img src="/2023/07/02/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/tensorflow/image-20230702201327476.png" alt="image-20230702201327476"></p>
<p>学习率一般刚开始比较大，后续慢慢变小，前期学习率大变化快，后续会较慢</p>
<h4 id="提前取消"><a href="#提前取消" class="headerlink" title="提前取消"></a>提前取消</h4><p>如果出现了训练精度还在提高，测试精度不提高了，说明已经过拟合，可以停止训练</p>
<h4 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h4><p><img src="/2023/07/02/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/tensorflow/image-20230703092847561.png" alt="image-20230703092847561"></p>
<p>每一次训练都有一些连线可能中断</p>
<p>tensorflow和pytorch的dropout参数是相反的</p>
<p>dropout在做test时不能使用——要手动取消</p>
<h1 id="为什么要卷积"><a href="#为什么要卷积" class="headerlink" title="为什么要卷积"></a>为什么要卷积</h1><p><strong><em>为什么要卷积？不使用简单的Dense层？</em></strong></p>
<ul>
<li>数据存储需求大</li>
</ul>
<p>视野？滑动窗口？这个窗口是卷积核？cv里面锐化模糊边缘提取的卷积核</p>
<p><strong><em>卷积核的个数，也就是con2d中的两个参数：</em></strong></p>
<ul>
<li>卷积核的大小问题</li>
</ul>
<p>[c, 3, 3]一个卷积核可以将一张图片卷积到一个channels为1的新层次，c为图片的通道数</p>
<p><img src="/2023/07/02/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/tensorflow/image-20230703095053915.png" alt="image-20230703095053915"></p>
<p>如图，这个[3, 3, 3]依次对三个通道做乘法，然后将结果加起来得到一个一通道的数据，这个一通道的数据代表着原图像在某一层次上的特征</p>
<p>有时候我们需要更多的特征，这时候就需要[N, c, 3, 3]这样N个卷积来提取特征，就会得到N个通道的特征</p>
<p>如下面的(64, 3)其中的64就是上面的N代表着64个通道的特征，3是卷积核的大小，也就是[c, 3, 3]中的3，c会默认与图片的通道数相同，所以不需要额外设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conv1 = Conv2D(<span class="number">64</span>, <span class="number">3</span>, activation=<span class="string">&#x27;relu&#x27;</span>, padding=<span class="string">&#x27;same&#x27;</span>)(inputs)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/07/02/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/tensorflow/image-20230702203217415.png" alt="image-20230702203217415"></p>
<h1 id="为什么要下采样（池化）"><a href="#为什么要下采样（池化）" class="headerlink" title="为什么要下采样（池化）"></a>为什么要下采样（池化）</h1><p>不同的程度可以获取到不同层级的特征</p>
<p><img src="/2023/07/02/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/tensorflow/image-20230703095836625.png" alt="image-20230703095836625"></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>时间复杂度-空间复杂度</title>
    <url>/2023/03/24/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6-%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p><strong><em>时间复杂度：</em></strong>时间增长趋势 T(n) = O(f(n))</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	x++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let i=0   1</span></span><br><span class="line"><span class="comment">// i&lt;=n; i++; x++ 各n次</span></span><br><span class="line"><span class="comment">// 结果为 O(1+3n) = O(n)   O(n)算n趋近无限大，所以常数忽略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">		x++</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间复杂度：O(n)*O(n)=O(n^2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	x++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">		x++</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间复杂度 O(n+n^2) = O(n^2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> temp = x</span><br><span class="line">x = y</span><br><span class="line">y = temp</span><br><span class="line"><span class="comment">// 时间复杂度不随着任何一个变量增大而增大，复杂度为O(1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">    i = i*<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环次数k：2^k = n k=logn O(logn)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">	<span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">        i = i*<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间复杂度O(n)*O(logn) = O(nlogn)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">		x++</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间复杂度O(n)*O(m) = O(nm)</span></span><br></pre></td></tr></table></figure>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p><strong><em>空间复杂度：</em></strong>内存空间增长的趋势</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> temp = x</span><br><span class="line">x = y</span><br><span class="line">y = temp</span><br><span class="line"><span class="comment">// x和y无论多大多不会影响空间占用 O(1)</span></span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">	arr.<span class="title function_">push</span>(i)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 占用空间与n成正比，O(n)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2023/03/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h1 id="一、二叉树种类"><a href="#一、二叉树种类" class="headerlink" title="一、二叉树种类"></a>一、二叉树种类</h1><h2 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h2><h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>左节点小于中间节点，右节点大于中间节点</p>
<h2 id="平衡二叉搜索树"><a href="#平衡二叉搜索树" class="headerlink" title="平衡二叉搜索树"></a>平衡二叉搜索树</h2><p>左节点小于中间节点，右节点大于中间节点，且左右子树的高度绝对值小于1</p>
<p>c++中map、set、multimap、multiset的底层是通过平衡二叉树实现，那么在插入节点，查询节点的时间复杂度是O(logn)</p>
<p>map中的key和set中的元素都是有序的</p>
<h1 id="二、二叉树存储方式"><a href="#二、二叉树存储方式" class="headerlink" title="二、二叉树存储方式"></a>二、二叉树存储方式</h1><h2 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h2><h2 id="线式存储"><a href="#线式存储" class="headerlink" title="线式存储"></a>线式存储</h2><p>左孩子：i*2+1</p>
<p>右孩子：i*2+2</p>
<h1 id="三、二叉树的遍历"><a href="#三、二叉树的遍历" class="headerlink" title="三、二叉树的遍历"></a>三、二叉树的遍历</h1><h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><p>前序、中序、后序遍历——迭代法、递归法</p>
<h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>层序遍历——迭代法</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>论文审稿问题</title>
    <url>/2025/07/27/%E8%AE%BA%E6%96%87%E7%BC%96%E5%86%99%E4%B8%8E%E5%AE%A1%E7%A8%BF/%E8%AE%BA%E6%96%87%E5%AE%A1%E7%A8%BF%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li><p>Equations: conclude with comma or dot depending on what follows.</p>
<p>公式后要根据后续的内容添加逗号或句号</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>论文</tag>
        <tag>审稿意见</tag>
      </tags>
  </entry>
  <entry>
    <title>探地雷达数据处理</title>
    <url>/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="GNSS数据处理"><a href="#GNSS数据处理" class="headerlink" title="GNSS数据处理"></a>GNSS数据处理</h1><ul>
<li><p><strong>探地雷达使用过程中，有一个基站RTK、一个绑定在探地雷达上的移动站RTK</strong></p>
<ul>
<li><p>由于要用基站RTK去纠正移动站RTK，因此移动站RTK的数据采集时间应当在基站RTK采集时间包含中</p>
</li>
<li><p>对RTK的数据.GNS文件的处理：使用<em>HGO数据处理软件</em></p>
</li>
<li><p>HGO软件中：工具→RINEX转换工具</p>
</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416141026463.png" alt="image-20230416141026463"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416141327150.png" alt="image-20230416141327150"></p>
<h2 id="基站数据处理"><a href="#基站数据处理" class="headerlink" title="基站数据处理"></a>基站数据处理</h2><ul>
<li><strong>基站RTK数据-1</strong><ul>
<li>注意转换基站数据时，前10s和后10s可以不要，防止启动和结束时数据的不稳定</li>
<li>起始时间加10，截止时间减10</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416141439657.png" alt="image-20230416141439657"></p>
<ul>
<li><strong>基站RTK数据-2</strong></li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416141815403.png" alt="image-20230416141815403"></p>
<ul>
<li><strong>转换后结果</strong><ul>
<li>转换后出现.o和.p文件</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416142003716.png" alt="image-20230416142003716"></p>
<h2 id="移动站数据处理"><a href="#移动站数据处理" class="headerlink" title="移动站数据处理"></a>移动站数据处理</h2><ul>
<li><strong>移动站RTK数据-1</strong><ul>
<li>可以看出其时间在基站RTK数据-1的范围内</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416142434473.png" alt="image-20230416142434473"></p>
<ul>
<li><strong>移动站RTK数据-2</strong><ul>
<li>可以看出其时间在基站RTK数据-2的范围外</li>
<li>则需要对</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416142546036.png" alt="image-20230416142546036"></p>
<h2 id="RTK数据使用IE解算"><a href="#RTK数据使用IE解算" class="headerlink" title="RTK数据使用IE解算"></a>RTK数据使用IE解算</h2><ul>
<li><strong>创建项目</strong>——点击左上角圈中的按钮，然后下一步</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416144253784.png" alt="image-20230416144253784"></p>
<ul>
<li><strong>导入移动站GNSS数据</strong>——刚刚转换后的.o文件，然后一直下一步</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416144409124.png" alt="image-20230416144409124"></p>
<ul>
<li><strong>导入基站GNSS数据</strong>——刚刚转换后的.o文件，然后一直下一步</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416145751122.png" alt="image-20230416145751122"></p>
<ul>
<li>站点信息设置<ul>
<li>坐标选项设置为平均值、投影设置为WGS84——然后下一步</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416145850175.png" alt="image-20230416145850175"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416145933429.png" alt="image-20230416145933429"></p>
<h3 id="GNSS解算"><a href="#GNSS解算" class="headerlink" title="GNSS解算"></a>GNSS解算</h3><ul>
<li>process→Process GNSS</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416150105641.png" alt="image-20230416150105641"></p>
<ul>
<li>参数设置为如图所示——点击process</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416150201370.png" alt="image-20230416150201370"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416150507288.png" alt="image-20230416150507288"></p>
<h3 id="解算结果导出"><a href="#解算结果导出" class="headerlink" title="解算结果导出"></a>解算结果导出</h3><ul>
<li><p>Output→Export Wizard</p>
<ul>
<li><p>注意选择导出文件格式，这里可以选择cor，如果没有用new添加，格式如图所示，可以点击预览如图所示——然后一直下一步</p>
</li>
<li><p>cor的配置</p>
<ul>
<li><p>Header/Footer Options参数设置</p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230504140927212.png" alt="image-20230504140927212"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230504141124302.png" alt="image-20230504141124302"></p>
</li>
<li><p>Field Separator参数设置</p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230504141349524.png" alt="image-20230504141349524"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230504141433882.png" alt="image-20230504141433882"></p>
</li>
<li><p>Export Variables内各项参数设置</p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230504142058164.png" alt="image-20230504142058164"></p>
<p>具体参数如下图所示：</p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230504142134534.png" alt="image-20230504142134534"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230504142209097.png" alt="image-20230504142209097"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230504142230608.png" alt="image-20230504142230608"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230504142257682.png" alt="image-20230504142257682"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416161042576.png" alt="image-20230416161042576"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416161121686.png" alt="image-20230416161121686"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416161150435.png" alt="image-20230416161150435"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416161525886.png" alt="image-20230416161525886"></p>
<h1 id="探地雷达数据绑定RTK"><a href="#探地雷达数据绑定RTK" class="headerlink" title="探地雷达数据绑定RTK"></a>探地雷达数据绑定RTK</h1><ul>
<li><strong>探地雷达数据每个项目的文件如下所示</strong>——有若干个数据，每个数据都包含一个time文件</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416170214005.png" alt="image-20230416170214005"></p>
<ul>
<li><strong>利用探地雷达的time与GNSS输出文件中的time比较，就可以得到每个探地雷达数据的经纬度与海拔信息</strong>——所以要求GNSS的time比探测雷达的time长</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">timeFilePath = <span class="string">&#x27;GPR/2023041102line_time&#x27;</span></span><br><span class="line">corFilePath = <span class="string">&#x27;GPR/2023041102line_cor&#x27;</span></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> os.listdir(timeFilePath):</span><br><span class="line">    file_ie = <span class="string">&#x27;0411_2.txt&#x27;</span> <span class="comment">#GNSS解算的轨迹坐标</span></span><br><span class="line">    file_gpr = os.path.join(timeFilePath, file_name) <span class="comment">#time文件</span></span><br><span class="line">    day = <span class="string">&#x27;2023-04-11&#x27;</span></span><br><span class="line">    write_cor = corFilePath+<span class="string">&quot;/&quot;</span> + file_name[<span class="number">0</span>:-<span class="number">4</span>] + <span class="string">&#x27;cor&#x27;</span></span><br><span class="line">    ie_txt = pd.read_csv(file_ie, header=<span class="literal">None</span>)</span><br><span class="line">    gpr_txt = pd.read_csv(file_gpr, header=<span class="literal">None</span>)</span><br><span class="line">    gpr_iet = []</span><br><span class="line">    gpr_n = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gpr_txt[<span class="number">0</span>])):</span><br><span class="line">        gpr_t = gpr_txt[<span class="number">0</span>][i].split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        gpr_n.append(gpr_t[<span class="number">0</span>])</span><br><span class="line">        gpr_iet.append(utc_to_iet(gpr_t[<span class="number">2</span>]))</span><br><span class="line">    gpr_n = np.array(gpr_n)</span><br><span class="line">    gpr_iet = np.array(gpr_iet)</span><br><span class="line">    condition = (ie_txt[<span class="number">0</span>] &gt;= gpr_iet[<span class="number">0</span>]) &amp; (ie_txt[<span class="number">0</span>] &lt;= gpr_iet[<span class="built_in">len</span>(gpr_iet)-<span class="number">1</span>])</span><br><span class="line">    ie_select = np.extract(condition, ie_txt[<span class="number">0</span>])</span><br><span class="line">    cor = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ie_select)):</span><br><span class="line">        num = find(gpr_iet, ie_select[i])</span><br><span class="line">        <span class="keyword">if</span> num == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        j = np.searchsorted(ie_txt[<span class="number">0</span>], ie_select[i])</span><br><span class="line">        t_cor = iet_to_utc(ie_select[i])</span><br><span class="line">        lon = ie_txt[<span class="number">1</span>][j]</span><br><span class="line">        lat = ie_txt[<span class="number">2</span>][j]</span><br><span class="line">        hei = ie_txt[<span class="number">3</span>][j]</span><br><span class="line">        q = ie_txt[<span class="number">4</span>][j]</span><br><span class="line">        <span class="comment"># print(type(gpr_n[num]))</span></span><br><span class="line">        cor.append(gpr_n[num] + <span class="string">&#x27;\t&#x27;</span> + day + <span class="string">&#x27;\t&#x27;</span> + <span class="built_in">str</span>(t_cor) + <span class="string">&#x27;\t&#x27;</span> + <span class="built_in">str</span>(lon) + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&#x27;N&#x27;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="built_in">str</span>(lat) + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&#x27;E&#x27;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="built_in">str</span>(hei) + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&#x27;M&#x27;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="built_in">str</span>(q))</span><br><span class="line">    cor = np.array(cor)</span><br><span class="line">    np.savetxt(write_cor, cor, fmt = <span class="string">&#x27;%s&#x27;</span>, delimiter=<span class="string">&#x27;\t&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230416170431791.png" alt="image-20230416170431791"></p>
<ul>
<li>将生成的cor文件复制回数据文件夹，替代原有的cor，但还会有一些cor为空，这一部分数据在后面是无法使用的</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523155612770.png" alt="image-20230523155612770"></p>
<h1 id="探地雷达数据的处理"><a href="#探地雷达数据的处理" class="headerlink" title="探地雷达数据的处理"></a>探地雷达数据的处理</h1><ul>
<li><p><strong>打开CrossPoint</strong></p>
<ul>
<li>需要插U盘，要不然很多功能无法使用</li>
</ul>
</li>
<li><p><strong>打开同一个项目中的各项文件</strong></p>
<ul>
<li>如这里的6和7是同一个地方的项目</li>
<li>点进去这个文件夹就可以出现能打开的文件，注意与刚刚的cor对比，如果该文件的cor大小为0kb，这个文件就不能导入</li>
<li>打开后如图所示</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523160222273.png" alt="image-20230523160222273"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523160257746.png" alt="image-20230523160257746"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523160422696.png" alt="image-20230523160422696"></p>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><ul>
<li><strong>过滤器设置</strong><ul>
<li>目前我也不会设置，先简单打开这两个选项，那么左边的波形就会更加变化，我们将依据这个波形去判断是否有异常</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523160649796.png" alt="image-20230523160649796"></p>
<ul>
<li><strong>0m深度位置设置，这个是为了使得到的高度正常</strong><ul>
<li>按道理来说，第一天反射横线应该是地面，也就是此次的深度为0，但是图示并不是这样</li>
<li>左键点住红色三角并向下拖动，就可以改变0深度位置，注意上下两个都要设置，上面的图为更细节的，也是我们在处理数据过程中用得更多的</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523160828461.png" alt="image-20230523160828461"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523161008203.png" alt="image-20230523161008203"></p>
<ul>
<li><strong>波形图对比度调整（应该是叫做对比度）</strong><ul>
<li>分为左右两个，左边的调上面的图，右边的调下面的图，一般也就使用左边的调节上面的图</li>
<li>可以多调整实验一下，调整到可以清晰判断就行</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523161225710.png" alt="image-20230523161225710"></p>
<ul>
<li><strong>显示文件数据设置</strong><ul>
<li>在判断过程中，我们经常需要观察两条相邻带之间有相似的异常</li>
<li>因此，可以在中间的波形图区域设置显示多条带，对比着看异常</li>
<li>在Tools→Settings→Data view中设置，设置一般为偶数，因为对每一条带都要一个细节的和一个不那么细节的数据需要展示</li>
<li>设置为6时如下图所示</li>
<li>因为我们不常使用下面那一条不那么细节的数据，因此可以将其缩小，便于我们观察需要的数据（鼠标放在蓝色条带上往下拉，拉倒两条数据的交界处），结果如图所示</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523161833582.png" alt="image-20230523161833582"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523161858046.png" alt="image-20230523161858046"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523162031623.png" alt="image-20230523162031623"></p>
<ul>
<li><strong>异常点标注</strong><ul>
<li>如图中的明显异常点，可以标注出来</li>
<li>可以看出，三条带出现了类似的异常点，那么我们用同一种Marker标记</li>
<li>按照这种逻辑将所有的异常标出来，再导出和正射影像叠加分析，如图所示</li>
</ul>
</li>
</ul>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523162454371.png" alt="image-20230523162454371"></p>
<p><img src="/2023/04/16/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE/%E6%8E%A2%E5%9C%B0%E9%9B%B7%E8%BE%BE%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/image-20230523162638582.png" alt="image-20230523162638582"></p>
]]></content>
      <categories>
        <category>仪器</category>
      </categories>
      <tags>
        <tag>探地雷达数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>堆</title>
    <url>/2023/03/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/</url>
    <content><![CDATA[<h1 id="堆："><a href="#堆：" class="headerlink" title="堆："></a>堆：</h1><ul>
<li>堆是一种<strong>完全二叉树</strong>，复习一下完全二叉树的定义，完全二叉树的形式是指除了最后一层之外，其他所有层的结点都是满的，而最后一层的所有结点都靠左边。</li>
<li>若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。</li>
</ul>
<p><img src="/2023/03/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/image-20230324192427183.png" alt="image-20230324192427183"></p>
<p><strong><em>完全二叉树：</em></strong>对于任意一个父节点的序号n来说（这里n从0算），它的子节点的序号一定是2n+1,2n+2，因此我们可以直接用数组来表示一个堆。</p>
<p><strong><em>堆的创建：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Heap</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">array</span> = []</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/image-20230324192636065.png" alt="image-20230324192636065"></p>
<h2 id="大顶堆-最大堆："><a href="#大顶堆-最大堆：" class="headerlink" title="大顶堆/最大堆："></a>大顶堆/最大堆：</h2><p>对于任意一个父节点来说，其子节点都小于这个父节点</p>
<h3 id="最大堆的插入："><a href="#最大堆的插入：" class="headerlink" title="最大堆的插入："></a>最大堆的插入：</h3><ul>
<li>当一个元素要插入时，先放到堆尾，根据堆的特性，对位置进行调整。</li>
<li>父节点要大于直接点，找到插入节点的父节点，比父节点值大则交换位置，否则插入成功</li>
<li>交换后，继续检测该节点与现在父节点的大小，如果大则交换位置，一直上浮到根节点</li>
</ul>
<p><img src="/2023/03/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/image-20230324193433568.png" alt="image-20230324193433568"></p>
<p><strong><em>JavaScript实现：</em></strong>length可以用this.array.length替代</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">insert</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">array</span>.<span class="title function_">push</span>(x)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">array</span>.<span class="property">length</span>===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> x_index = <span class="variable language_">this</span>.<span class="property">array</span>.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> parent_index = x_index</span><br><span class="line">    <span class="keyword">while</span>(parent_index!==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> parent_index = x_index%<span class="number">2</span>===<span class="number">0</span>?(x_index-<span class="number">2</span>):(x_index-<span class="number">1</span>)</span><br><span class="line">        parent_index = parent_index/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">array</span>[parent_index]&lt;x)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">array</span>[x_index] = <span class="variable language_">this</span>.<span class="property">array</span>[parent_index]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">array</span>[parent_index] = x</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        x_index = parent_index</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环最大次数k即为树的深度：2^0+2^1+...+2^k = n 即k=logn 时间复杂度为O(logN)</span></span><br></pre></td></tr></table></figure>
<h3 id="最大堆的删除"><a href="#最大堆的删除" class="headerlink" title="最大堆的删除"></a>最大堆的删除</h3><ul>
<li>堆的删除一般是值删除堆顶元素，先删除堆顶元素</li>
<li>要保证堆一直为完全二叉树，不能直接拿子节点的较大值，而是将末尾元素拿到堆顶，再下沉</li>
<li>下沉即先比较该节点与左子节点，如果子节点更大，则交换，如果子节点更小，则与右节点比较</li>
<li>直至到最深层，或者比左右子节点都大</li>
</ul>
<p><strong><em>JavaScript实现：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">pop</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">array</span>[<span class="number">0</span>] = <span class="variable language_">this</span>.<span class="property">array</span>[<span class="variable language_">this</span>.<span class="property">array</span>.<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">array</span>.<span class="title function_">pop</span>()</span><br><span class="line">    <span class="keyword">let</span> x_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> left_index = <span class="number">2</span> * x_index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> right_index = <span class="number">2</span> * x_index + <span class="number">2</span></span><br><span class="line">        left_index = left_index&gt;=<span class="variable language_">this</span>.<span class="property">array</span>.<span class="property">length</span>?<span class="attr">x_index</span>:left_index</span><br><span class="line">        right_index = right_index&gt;=<span class="variable language_">this</span>.<span class="property">array</span>.<span class="property">length</span>?<span class="attr">x_index</span>:right_index</span><br><span class="line">        <span class="keyword">let</span> large_child_index = <span class="variable language_">this</span>.<span class="property">array</span>[x_index]&lt;<span class="variable language_">this</span>.<span class="property">array</span>[left_index]?<span class="attr">left_index</span>:x_index</span><br><span class="line">        large_child_index = large_child_index!==x_index?<span class="attr">large_child_index</span>:(<span class="variable language_">this</span>.<span class="property">array</span>[x_index]&lt;<span class="variable language_">this</span>.<span class="property">array</span>[right_index]?<span class="attr">right_index</span>:x_index)</span><br><span class="line">        <span class="keyword">if</span>(large_child_index===x_index) <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">let</span> temp = <span class="variable language_">this</span>.<span class="property">array</span>[x_index]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">array</span>[x_index] = <span class="variable language_">this</span>.<span class="property">array</span>[large_child_index]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">array</span>[large_child_index] = temp</span><br><span class="line">        x_index = large_child_index</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最大循环次数k即为树的深度 k = logn 时间复杂度为O(logN)</span></span><br></pre></td></tr></table></figure>
<h1 id="小顶堆-最小堆"><a href="#小顶堆-最小堆" class="headerlink" title="小顶堆/最小堆"></a>小顶堆/最小堆</h1><p>插入与删除与最大堆类似</p>
<p><strong><em>插入JavaScript实现：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">insert</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">array</span>.<span class="title function_">push</span>(x)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">array</span>.<span class="property">length</span>===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> x_index = <span class="variable language_">this</span>.<span class="property">array</span>.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> parent_index = x_index</span><br><span class="line">    <span class="keyword">while</span>(parent_index!==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> parent_index = x_index%<span class="number">2</span>===<span class="number">0</span>?(x_index-<span class="number">2</span>):(x_index-<span class="number">1</span>)</span><br><span class="line">        parent_index = parent_index/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">array</span>[parent_index]&gt;x)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">array</span>[x_index] = <span class="variable language_">this</span>.<span class="property">array</span>[parent_index]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">array</span>[parent_index] = x</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        x_index = parent_index</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/image-20230324210219667.png" alt="image-20230324210219667"></p>
<p><strong><em>删除JavaScript实现：</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">pop</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">array</span>[<span class="number">0</span>] = <span class="variable language_">this</span>.<span class="property">array</span>[<span class="variable language_">this</span>.<span class="property">array</span>.<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">array</span>.<span class="title function_">pop</span>()</span><br><span class="line">    <span class="keyword">let</span> x_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> left_index = <span class="number">2</span> * x_index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> right_index = <span class="number">2</span> * x_index + <span class="number">2</span></span><br><span class="line">        left_index = left_index&gt;=<span class="variable language_">this</span>.<span class="property">array</span>.<span class="property">length</span>?<span class="attr">x_index</span>:left_index</span><br><span class="line">        right_index = right_index&gt;=<span class="variable language_">this</span>.<span class="property">array</span>.<span class="property">length</span>?<span class="attr">x_index</span>:right_index</span><br><span class="line">        <span class="keyword">let</span> small_child_index = <span class="variable language_">this</span>.<span class="property">array</span>[x_index]&gt;<span class="variable language_">this</span>.<span class="property">array</span>[left_index]?<span class="attr">left_index</span>:x_index</span><br><span class="line">        small_child_index = small_child_index!==x_index?<span class="attr">small_child_index</span>:(<span class="variable language_">this</span>.<span class="property">array</span>[x_index]&gt;<span class="variable language_">this</span>.<span class="property">array</span>[right_index]?<span class="attr">right_index</span>:x_index)</span><br><span class="line">        <span class="keyword">if</span>(small_child_index===x_index) <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">let</span> temp = <span class="variable language_">this</span>.<span class="property">array</span>[x_index]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">array</span>[x_index] = <span class="variable language_">this</span>.<span class="property">array</span>[small_child_index]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">array</span>[small_child_index] = temp</span><br><span class="line">        x_index = small_child_index</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/image-20230324210321704.png" alt="image-20230324210321704"></p>
<h1 id="解决前K个高频元素-低频元素题"><a href="#解决前K个高频元素-低频元素题" class="headerlink" title="解决前K个高频元素/低频元素题"></a>解决前K个高频元素/低频元素题</h1><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/">LeetCode链接</a></p>
<p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p>
<p>示例 1:</p>
<ul>
<li>输入: nums = [1,1,1,2,2,3], k = 2</li>
<li>输出: [1,2]</li>
</ul>
<p>示例 2:</p>
<ul>
<li>输入: nums = [1], k = 1</li>
<li>输出: [1]</li>
</ul>
<p>提示：</p>
<ul>
<li>你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。</li>
<li>你的算法的时间复杂度必须优于 $O(n \log n)$ , n 是数组的大小。</li>
<li>题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的。</li>
<li>你可以按任意顺序返回答案。</li>
</ul>
<p><strong><em>步骤：</em></strong></p>
<ul>
<li>获取到每个数据出现的频率，使用哈希表，这里可以用map，key是数字，value是次数</li>
<li>对频率排序</li>
<li>找出前K个高频元素</li>
</ul>
<p>注：</p>
<ul>
<li>如果使用快速排序的时间复杂度为O(n)</li>
<li>仅维护大小为K的小顶堆，小顶堆的堆顶始终是最小值，如果堆长度小于K则继续往队礼添加，如果长度大于K则弹出堆顶的最小值</li>
</ul>
<p><img src="/2023/03/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/image-20230324211848724.png" alt="image-20230324211848724"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js 没有堆 需要自己构造</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">compareFn</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">compareFn</span> = compareFn;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加</span></span><br><span class="line">    <span class="title function_">push</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="comment">// 推入元素</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(item);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上浮</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="title function_">size</span>() - <span class="number">1</span>; <span class="comment">// 记录推入元素下标</span></span><br><span class="line">        <span class="keyword">let</span> parent = <span class="title class_">Math</span>.<span class="title function_">floor</span>((index - <span class="number">1</span>) / <span class="number">2</span>); <span class="comment">// 记录父节点下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (parent &gt;= <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">compare</span>(parent, index) &gt; <span class="number">0</span>) &#123; <span class="comment">// 注意compare参数顺序</span></span><br><span class="line">            [<span class="variable language_">this</span>.<span class="property">queue</span>[index], <span class="variable language_">this</span>.<span class="property">queue</span>[parent]] = [<span class="variable language_">this</span>.<span class="property">queue</span>[parent], <span class="variable language_">this</span>.<span class="property">queue</span>[index]];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新下标</span></span><br><span class="line">            index = parent;</span><br><span class="line">            parent = <span class="title class_">Math</span>.<span class="title function_">floor</span>((index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取堆顶元素并移除</span></span><br><span class="line">    <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 堆顶元素</span></span><br><span class="line">        <span class="keyword">const</span> out = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除堆顶元素 填入最后一个元素</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="number">0</span>] = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下沉</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// 记录下沉元素下标</span></span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">1</span>; <span class="comment">// left 是左子节点下标 left + 1 则是右子节点下标</span></span><br><span class="line">        <span class="keyword">let</span> searchChild = <span class="variable language_">this</span>.<span class="title function_">compare</span>(left, left + <span class="number">1</span>) &gt; <span class="number">0</span> ? left + <span class="number">1</span> : left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (searchChild !== <span class="literal">undefined</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">compare</span>(index, searchChild) &gt; <span class="number">0</span>) &#123; <span class="comment">// 注意compare参数顺序</span></span><br><span class="line">            [<span class="variable language_">this</span>.<span class="property">queue</span>[index], <span class="variable language_">this</span>.<span class="property">queue</span>[searchChild]] = [<span class="variable language_">this</span>.<span class="property">queue</span>[searchChild], <span class="variable language_">this</span>.<span class="property">queue</span>[index]];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新下标</span></span><br><span class="line">            index = searchChild;</span><br><span class="line">            left = <span class="number">2</span> * index + <span class="number">1</span>;</span><br><span class="line">            searchChild = <span class="variable language_">this</span>.<span class="title function_">compare</span>(left, left + <span class="number">1</span>) &gt; <span class="number">0</span> ? left + <span class="number">1</span> : left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用传入的 compareFn 比较两个位置的元素</span></span><br><span class="line">    <span class="title function_">compare</span>(<span class="params">index1, index2</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理下标越界问题</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queue</span>[index1] === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queue</span>[index2] === <span class="literal">undefined</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">compareFn</span>(<span class="variable language_">this</span>.<span class="property">queue</span>[index1], <span class="variable language_">this</span>.<span class="property">queue</span>[index2]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> topKFrequent = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        map.<span class="title function_">set</span>(num, (map.<span class="title function_">get</span>(num) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建小顶堆</span></span><br><span class="line">    <span class="keyword">const</span> heap= <span class="keyword">new</span> <span class="title class_">Heap</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// entry 是一个长度为2的数组，0位置存储key，1位置存储value</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">        heap.<span class="title function_">push</span>(entry);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (heap.<span class="title function_">size</span>() &gt; k) &#123;</span><br><span class="line">            heap.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return heap.queue.map(e =&gt; e[0]);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = heap.<span class="title function_">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        res[i] = heap.<span class="title function_">pop</span>()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>由于key和value是要绑定的，所以元素不能是简单的数组，而应该是包含key和value的二维数组，同时为了使得代码重用，将比较函数抽取出来，当做参数传递</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
</search>
